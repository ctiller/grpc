#include <stdlib.h>

#include <cstddef>
#include <cstdint>
// max=124 unique=82 flat=5424 nested=6080
static const uint8_t g_emit_buffer_0[678] = {
    48,  48,  48,  49,  48,  50,  48,  97,  48,  99,  48,  101, 48,  105, 48,
    111, 48,  115, 48,  116, 48,  32,  48,  37,  48,  45,  48,  46,  48,  47,
    48,  51,  48,  52,  48,  53,  48,  54,  48,  55,  48,  56,  48,  57,  48,
    61,  48,  65,  48,  95,  48,  98,  48,  100, 48,  102, 48,  103, 48,  104,
    48,  108, 48,  109, 48,  110, 48,  112, 48,  114, 48,  117, 49,  49,  49,
    50,  49,  97,  49,  99,  49,  101, 49,  105, 49,  111, 49,  115, 49,  116,
    49,  32,  49,  37,  49,  45,  49,  46,  49,  47,  49,  51,  49,  52,  49,
    53,  49,  54,  49,  55,  49,  56,  49,  57,  49,  61,  49,  65,  49,  95,
    49,  98,  49,  100, 49,  102, 49,  103, 49,  104, 49,  108, 49,  109, 49,
    110, 49,  112, 49,  114, 49,  117, 50,  50,  50,  97,  50,  99,  50,  101,
    50,  105, 50,  111, 50,  115, 50,  116, 50,  32,  50,  37,  50,  45,  50,
    46,  50,  47,  50,  51,  50,  52,  50,  53,  50,  54,  50,  55,  50,  56,
    50,  57,  50,  61,  50,  65,  50,  95,  50,  98,  50,  100, 50,  102, 50,
    103, 50,  104, 50,  108, 50,  109, 50,  110, 50,  112, 50,  114, 50,  117,
    97,  97,  97,  99,  97,  101, 97,  105, 97,  111, 97,  115, 97,  116, 97,
    32,  97,  37,  97,  45,  97,  46,  97,  47,  97,  51,  97,  52,  97,  53,
    97,  54,  97,  55,  97,  56,  97,  57,  97,  61,  97,  65,  97,  95,  97,
    98,  97,  100, 97,  102, 97,  103, 97,  104, 97,  108, 97,  109, 97,  110,
    97,  112, 97,  114, 97,  117, 99,  99,  99,  101, 99,  105, 99,  111, 99,
    115, 99,  116, 99,  32,  99,  37,  99,  45,  99,  46,  99,  47,  99,  51,
    99,  52,  99,  53,  99,  54,  99,  55,  99,  56,  99,  57,  99,  61,  99,
    65,  99,  95,  99,  98,  99,  100, 99,  102, 99,  103, 99,  104, 99,  108,
    99,  109, 99,  110, 99,  112, 99,  114, 99,  117, 101, 101, 101, 105, 101,
    111, 101, 115, 101, 116, 101, 32,  101, 37,  101, 45,  101, 46,  101, 47,
    101, 51,  101, 52,  101, 53,  101, 54,  101, 55,  101, 56,  101, 57,  101,
    61,  101, 65,  101, 95,  101, 98,  101, 100, 101, 102, 101, 103, 101, 104,
    101, 108, 101, 109, 101, 110, 101, 112, 101, 114, 101, 117, 105, 105, 105,
    111, 105, 115, 105, 116, 105, 32,  105, 37,  105, 45,  105, 46,  105, 47,
    105, 51,  105, 52,  105, 53,  105, 54,  105, 55,  105, 56,  105, 57,  105,
    61,  105, 65,  105, 95,  105, 98,  105, 100, 105, 102, 105, 103, 105, 104,
    105, 108, 105, 109, 105, 110, 105, 112, 105, 114, 105, 117, 111, 111, 111,
    115, 111, 116, 111, 32,  111, 37,  111, 45,  111, 46,  111, 47,  111, 51,
    111, 52,  111, 53,  111, 54,  111, 55,  111, 56,  111, 57,  111, 61,  111,
    65,  111, 95,  111, 98,  111, 100, 111, 102, 111, 103, 111, 104, 111, 108,
    111, 109, 111, 110, 111, 112, 111, 114, 111, 117, 115, 115, 115, 116, 115,
    32,  115, 37,  115, 45,  115, 46,  115, 47,  115, 51,  115, 52,  115, 53,
    115, 54,  115, 55,  115, 56,  115, 57,  115, 61,  115, 65,  115, 95,  115,
    98,  115, 100, 115, 102, 115, 103, 115, 104, 115, 108, 115, 109, 115, 110,
    115, 112, 115, 114, 115, 117, 116, 116, 116, 32,  116, 37,  116, 45,  116,
    46,  116, 47,  116, 51,  116, 52,  116, 53,  116, 54,  116, 55,  116, 56,
    116, 57,  116, 61,  116, 65,  116, 95,  116, 98,  116, 100, 116, 102, 116,
    103, 116, 104, 116, 108, 116, 109, 116, 110, 116, 112, 116, 114, 116, 117,
    117, 48,  58,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,
    78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  89,  106, 107, 113, 118,
    119, 120, 121, 122, 38,  42,  44,  59,  88,  90,  33,  34,  40,  41,  63,
    39,  43,  124};
inline uint8_t GetEmitBuffer0(size_t i) { return g_emit_buffer_0[i]; }
// max=37257 unique=705 flat=32768 nested=44048
static const uint16_t g_emit_op_0[2048] = {
    10,    10,    120,   120,   230,   230,   340,   340,   450,   450,   560,
    560,   670,   670,   780,   780,   890,   890,   1000,  1000,  1111,  1221,
    1331,  1441,  1551,  1661,  1771,  1881,  1991,  2101,  2211,  2321,  2431,
    2541,  2651,  2761,  2871,  2981,  3091,  3201,  3311,  3421,  3531,  3641,
    3751,  3861,  16,    16,    16,    16,    16,    16,    16,    16,    16,
    16,    16,    16,    16,    16,    16,    16,    16,    16,    175,   175,
    3970,  3970,  4080,  4080,  4190,  4190,  4300,  4300,  4410,  4410,  4520,
    4520,  4630,  4630,  4740,  4740,  4850,  4850,  4961,  5071,  5181,  5291,
    5401,  5511,  5621,  5731,  5841,  5951,  6061,  6171,  6281,  6391,  6501,
    6611,  6721,  6831,  6941,  7051,  7161,  7271,  7381,  7491,  7601,  7711,
    181,   181,   181,   181,   181,   181,   181,   181,   181,   181,   181,
    181,   181,   181,   181,   181,   181,   181,   285,   285,   4135,  4135,
    7820,  7820,  7930,  7930,  8040,  8040,  8150,  8150,  8260,  8260,  8370,
    8370,  8480,  8480,  8590,  8590,  8701,  8811,  8921,  9031,  9141,  9251,
    9361,  9471,  9581,  9691,  9801,  9911,  10021, 10131, 10241, 10351, 10461,
    10571, 10681, 10791, 10901, 11011, 11121, 11231, 11341, 11451, 291,   291,
    291,   291,   291,   291,   291,   291,   291,   291,   291,   291,   291,
    291,   291,   291,   291,   291,   395,   395,   4245,  4245,  7985,  7985,
    11560, 11560, 11670, 11670, 11780, 11780, 11890, 11890, 12000, 12000, 12110,
    12110, 12220, 12220, 12331, 12441, 12551, 12661, 12771, 12881, 12991, 13101,
    13211, 13321, 13431, 13541, 13651, 13761, 13871, 13981, 14091, 14201, 14311,
    14421, 14531, 14641, 14751, 14861, 14971, 15081, 401,   401,   401,   401,
    401,   401,   401,   401,   401,   401,   401,   401,   401,   401,   401,
    401,   401,   401,   505,   505,   4355,  4355,  8095,  8095,  11725, 11725,
    15190, 15190, 15300, 15300, 15410, 15410, 15520, 15520, 15630, 15630, 15740,
    15740, 15851, 15961, 16071, 16181, 16291, 16401, 16511, 16621, 16731, 16841,
    16951, 17061, 17171, 17281, 17391, 17501, 17611, 17721, 17831, 17941, 18051,
    18161, 18271, 18381, 18491, 18601, 511,   511,   511,   511,   511,   511,
    511,   511,   511,   511,   511,   511,   511,   511,   511,   511,   511,
    511,   615,   615,   4465,  4465,  8205,  8205,  11835, 11835, 15355, 15355,
    18710, 18710, 18820, 18820, 18930, 18930, 19040, 19040, 19150, 19150, 19261,
    19371, 19481, 19591, 19701, 19811, 19921, 20031, 20141, 20251, 20361, 20471,
    20581, 20691, 20801, 20911, 21021, 21131, 21241, 21351, 21461, 21571, 21681,
    21791, 21901, 22011, 621,   621,   621,   621,   621,   621,   621,   621,
    621,   621,   621,   621,   621,   621,   621,   621,   621,   621,   725,
    725,   4575,  4575,  8315,  8315,  11945, 11945, 15465, 15465, 18875, 18875,
    22120, 22120, 22230, 22230, 22340, 22340, 22450, 22450, 22561, 22671, 22781,
    22891, 23001, 23111, 23221, 23331, 23441, 23551, 23661, 23771, 23881, 23991,
    24101, 24211, 24321, 24431, 24541, 24651, 24761, 24871, 24981, 25091, 25201,
    25311, 731,   731,   731,   731,   731,   731,   731,   731,   731,   731,
    731,   731,   731,   731,   731,   731,   731,   731,   835,   835,   4685,
    4685,  8425,  8425,  12055, 12055, 15575, 15575, 18985, 18985, 22285, 22285,
    25420, 25420, 25530, 25530, 25640, 25640, 25751, 25861, 25971, 26081, 26191,
    26301, 26411, 26521, 26631, 26741, 26851, 26961, 27071, 27181, 27291, 27401,
    27511, 27621, 27731, 27841, 27951, 28061, 28171, 28281, 28391, 28501, 841,
    841,   841,   841,   841,   841,   841,   841,   841,   841,   841,   841,
    841,   841,   841,   841,   841,   841,   945,   945,   4795,  4795,  8535,
    8535,  12165, 12165, 15685, 15685, 19095, 19095, 22395, 22395, 25585, 25585,
    28610, 28610, 28720, 28720, 28831, 28941, 29051, 29161, 29271, 29381, 29491,
    29601, 29711, 29821, 29931, 30041, 30151, 30261, 30371, 30481, 30591, 30701,
    30811, 30921, 31031, 31141, 31251, 31361, 31471, 31581, 951,   951,   951,
    951,   951,   951,   951,   951,   951,   951,   951,   951,   951,   951,
    951,   951,   951,   951,   1055,  1055,  4905,  4905,  8645,  8645,  12275,
    12275, 15795, 15795, 19205, 19205, 22505, 22505, 25695, 25695, 28775, 28775,
    31690, 31690, 31801, 31911, 32021, 32131, 32241, 32351, 32461, 32571, 32681,
    32791, 32901, 33011, 33121, 33231, 33341, 33451, 33561, 33671, 33781, 33891,
    34001, 34111, 34221, 34331, 34441, 34551, 1061,  1061,  1061,  1061,  1061,
    1061,  1061,  1061,  1061,  1061,  1061,  1061,  1061,  1061,  1061,  1061,
    1061,  1061,  1166,  5016,  8756,  12386, 15906, 19316, 22616, 25806, 28886,
    31856, 1172,  1172,  1172,  1172,  1172,  1172,  1172,  1172,  1172,  1172,
    1172,  1172,  1172,  1172,  1172,  1172,  1172,  1172,  1172,  1172,  1172,
    1172,  1276,  5126,  8866,  12496, 16016, 19426, 22726, 25916, 28996, 31966,
    1282,  1282,  1282,  1282,  1282,  1282,  1282,  1282,  1282,  1282,  1282,
    1282,  1282,  1282,  1282,  1282,  1282,  1282,  1282,  1282,  1282,  1282,
    1386,  5236,  8976,  12606, 16126, 19536, 22836, 26026, 29106, 32076, 1392,
    1392,  1392,  1392,  1392,  1392,  1392,  1392,  1392,  1392,  1392,  1392,
    1392,  1392,  1392,  1392,  1392,  1392,  1392,  1392,  1392,  1392,  1496,
    5346,  9086,  12716, 16236, 19646, 22946, 26136, 29216, 32186, 1502,  1502,
    1502,  1502,  1502,  1502,  1502,  1502,  1502,  1502,  1502,  1502,  1502,
    1502,  1502,  1502,  1502,  1502,  1502,  1502,  1502,  1502,  1606,  5456,
    9196,  12826, 16346, 19756, 23056, 26246, 29326, 32296, 1612,  1612,  1612,
    1612,  1612,  1612,  1612,  1612,  1612,  1612,  1612,  1612,  1612,  1612,
    1612,  1612,  1612,  1612,  1612,  1612,  1612,  1612,  1716,  5566,  9306,
    12936, 16456, 19866, 23166, 26356, 29436, 32406, 1722,  1722,  1722,  1722,
    1722,  1722,  1722,  1722,  1722,  1722,  1722,  1722,  1722,  1722,  1722,
    1722,  1722,  1722,  1722,  1722,  1722,  1722,  1826,  5676,  9416,  13046,
    16566, 19976, 23276, 26466, 29546, 32516, 1832,  1832,  1832,  1832,  1832,
    1832,  1832,  1832,  1832,  1832,  1832,  1832,  1832,  1832,  1832,  1832,
    1832,  1832,  1832,  1832,  1832,  1832,  1936,  5786,  9526,  13156, 16676,
    20086, 23386, 26576, 29656, 32626, 1942,  1942,  1942,  1942,  1942,  1942,
    1942,  1942,  1942,  1942,  1942,  1942,  1942,  1942,  1942,  1942,  1942,
    1942,  1942,  1942,  1942,  1942,  2046,  5896,  9636,  13266, 16786, 20196,
    23496, 26686, 29766, 32736, 2052,  2052,  2052,  2052,  2052,  2052,  2052,
    2052,  2052,  2052,  2052,  2052,  2052,  2052,  2052,  2052,  2052,  2052,
    2052,  2052,  2052,  2052,  2156,  6006,  9746,  13376, 16896, 20306, 23606,
    26796, 29876, 32846, 2162,  2162,  2162,  2162,  2162,  2162,  2162,  2162,
    2162,  2162,  2162,  2162,  2162,  2162,  2162,  2162,  2162,  2162,  2162,
    2162,  2162,  2162,  2266,  6116,  9856,  13486, 17006, 20416, 23716, 26906,
    29986, 32956, 2272,  2272,  2272,  2272,  2272,  2272,  2272,  2272,  2272,
    2272,  2272,  2272,  2272,  2272,  2272,  2272,  2272,  2272,  2272,  2272,
    2272,  2272,  2376,  6226,  9966,  13596, 17116, 20526, 23826, 27016, 30096,
    33066, 2382,  2382,  2382,  2382,  2382,  2382,  2382,  2382,  2382,  2382,
    2382,  2382,  2382,  2382,  2382,  2382,  2382,  2382,  2382,  2382,  2382,
    2382,  2486,  6336,  10076, 13706, 17226, 20636, 23936, 27126, 30206, 33176,
    2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,
    2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,  2492,
    2596,  6446,  10186, 13816, 17336, 20746, 24046, 27236, 30316, 33286, 2602,
    2602,  2602,  2602,  2602,  2602,  2602,  2602,  2602,  2602,  2602,  2602,
    2602,  2602,  2602,  2602,  2602,  2602,  2602,  2602,  2602,  2602,  2706,
    6556,  10296, 13926, 17446, 20856, 24156, 27346, 30426, 33396, 2712,  2712,
    2712,  2712,  2712,  2712,  2712,  2712,  2712,  2712,  2712,  2712,  2712,
    2712,  2712,  2712,  2712,  2712,  2712,  2712,  2712,  2712,  2816,  6666,
    10406, 14036, 17556, 20966, 24266, 27456, 30536, 33506, 2822,  2822,  2822,
    2822,  2822,  2822,  2822,  2822,  2822,  2822,  2822,  2822,  2822,  2822,
    2822,  2822,  2822,  2822,  2822,  2822,  2822,  2822,  2926,  6776,  10516,
    14146, 17666, 21076, 24376, 27566, 30646, 33616, 2932,  2932,  2932,  2932,
    2932,  2932,  2932,  2932,  2932,  2932,  2932,  2932,  2932,  2932,  2932,
    2932,  2932,  2932,  2932,  2932,  2932,  2932,  3036,  6886,  10626, 14256,
    17776, 21186, 24486, 27676, 30756, 33726, 3042,  3042,  3042,  3042,  3042,
    3042,  3042,  3042,  3042,  3042,  3042,  3042,  3042,  3042,  3042,  3042,
    3042,  3042,  3042,  3042,  3042,  3042,  3146,  6996,  10736, 14366, 17886,
    21296, 24596, 27786, 30866, 33836, 3152,  3152,  3152,  3152,  3152,  3152,
    3152,  3152,  3152,  3152,  3152,  3152,  3152,  3152,  3152,  3152,  3152,
    3152,  3152,  3152,  3152,  3152,  3256,  7106,  10846, 14476, 17996, 21406,
    24706, 27896, 30976, 33946, 3262,  3262,  3262,  3262,  3262,  3262,  3262,
    3262,  3262,  3262,  3262,  3262,  3262,  3262,  3262,  3262,  3262,  3262,
    3262,  3262,  3262,  3262,  3366,  7216,  10956, 14586, 18106, 21516, 24816,
    28006, 31086, 34056, 3372,  3372,  3372,  3372,  3372,  3372,  3372,  3372,
    3372,  3372,  3372,  3372,  3372,  3372,  3372,  3372,  3372,  3372,  3372,
    3372,  3372,  3372,  3476,  7326,  11066, 14696, 18216, 21626, 24926, 28116,
    31196, 34166, 3482,  3482,  3482,  3482,  3482,  3482,  3482,  3482,  3482,
    3482,  3482,  3482,  3482,  3482,  3482,  3482,  3482,  3482,  3482,  3482,
    3482,  3482,  3586,  7436,  11176, 14806, 18326, 21736, 25036, 28226, 31306,
    34276, 3592,  3592,  3592,  3592,  3592,  3592,  3592,  3592,  3592,  3592,
    3592,  3592,  3592,  3592,  3592,  3592,  3592,  3592,  3592,  3592,  3592,
    3592,  3696,  7546,  11286, 14916, 18436, 21846, 25146, 28336, 31416, 34386,
    3702,  3702,  3702,  3702,  3702,  3702,  3702,  3702,  3702,  3702,  3702,
    3702,  3702,  3702,  3702,  3702,  3702,  3702,  3702,  3702,  3702,  3702,
    3806,  7656,  11396, 15026, 18546, 21956, 25256, 28446, 31526, 34496, 3812,
    3812,  3812,  3812,  3812,  3812,  3812,  3812,  3812,  3812,  3812,  3812,
    3812,  3812,  3812,  3812,  3812,  3812,  3812,  3812,  3812,  3812,  34661,
    3916,  7766,  11506, 15136, 18656, 22066, 25366, 28556, 31636, 3922,  3922,
    3922,  3922,  3922,  3922,  3922,  3922,  3922,  3922,  3922,  3922,  3922,
    3922,  3922,  3922,  3922,  3922,  3922,  3922,  3922,  3922,  34778, 34778,
    34778, 34778, 34778, 34778, 34778, 34778, 34778, 34778, 34778, 34778, 34778,
    34778, 34778, 34778, 34833, 34833, 34833, 34833, 34833, 34833, 34833, 34833,
    34833, 34833, 34833, 34833, 34833, 34833, 34833, 34833, 34888, 34888, 34888,
    34888, 34888, 34888, 34888, 34888, 34888, 34888, 34888, 34888, 34888, 34888,
    34888, 34888, 34943, 34943, 34943, 34943, 34943, 34943, 34943, 34943, 34943,
    34943, 34943, 34943, 34943, 34943, 34943, 34943, 34998, 34998, 34998, 34998,
    34998, 34998, 34998, 34998, 34998, 34998, 34998, 34998, 34998, 34998, 34998,
    34998, 35053, 35053, 35053, 35053, 35053, 35053, 35053, 35053, 35053, 35053,
    35053, 35053, 35053, 35053, 35053, 35053, 35108, 35108, 35108, 35108, 35108,
    35108, 35108, 35108, 35108, 35108, 35108, 35108, 35108, 35108, 35108, 35108,
    35163, 35163, 35163, 35163, 35163, 35163, 35163, 35163, 35163, 35163, 35163,
    35163, 35163, 35163, 35163, 35163, 35218, 35218, 35218, 35218, 35218, 35218,
    35218, 35218, 35218, 35218, 35218, 35218, 35218, 35218, 35218, 35218, 35273,
    35273, 35273, 35273, 35273, 35273, 35273, 35273, 35273, 35273, 35273, 35273,
    35273, 35273, 35273, 35273, 35328, 35328, 35328, 35328, 35328, 35328, 35328,
    35328, 35328, 35328, 35328, 35328, 35328, 35328, 35328, 35328, 35383, 35383,
    35383, 35383, 35383, 35383, 35383, 35383, 35383, 35383, 35383, 35383, 35383,
    35383, 35383, 35383, 35438, 35438, 35438, 35438, 35438, 35438, 35438, 35438,
    35438, 35438, 35438, 35438, 35438, 35438, 35438, 35438, 35493, 35493, 35493,
    35493, 35493, 35493, 35493, 35493, 35493, 35493, 35493, 35493, 35493, 35493,
    35493, 35493, 35548, 35548, 35548, 35548, 35548, 35548, 35548, 35548, 35548,
    35548, 35548, 35548, 35548, 35548, 35548, 35548, 35603, 35603, 35603, 35603,
    35603, 35603, 35603, 35603, 35603, 35603, 35603, 35603, 35603, 35603, 35603,
    35603, 35658, 35658, 35658, 35658, 35658, 35658, 35658, 35658, 35658, 35658,
    35658, 35658, 35658, 35658, 35658, 35658, 35713, 35713, 35713, 35713, 35713,
    35713, 35713, 35713, 35713, 35713, 35713, 35713, 35713, 35713, 35713, 35713,
    35768, 35768, 35768, 35768, 35768, 35768, 35768, 35768, 35768, 35768, 35768,
    35768, 35768, 35768, 35768, 35768, 35823, 35823, 35823, 35823, 35823, 35823,
    35823, 35823, 35823, 35823, 35823, 35823, 35823, 35823, 35823, 35823, 35878,
    35878, 35878, 35878, 35878, 35878, 35878, 35878, 35878, 35878, 35878, 35878,
    35878, 35878, 35878, 35878, 35933, 35933, 35933, 35933, 35933, 35933, 35933,
    35933, 35933, 35933, 35933, 35933, 35933, 35933, 35933, 35933, 35988, 35988,
    35988, 35988, 35988, 35988, 35988, 35988, 35988, 35988, 35988, 35988, 35988,
    35988, 35988, 35988, 36043, 36043, 36043, 36043, 36043, 36043, 36043, 36043,
    36043, 36043, 36043, 36043, 36043, 36043, 36043, 36043, 36098, 36098, 36098,
    36098, 36098, 36098, 36098, 36098, 36098, 36098, 36098, 36098, 36098, 36098,
    36098, 36098, 36153, 36153, 36153, 36153, 36153, 36153, 36153, 36153, 36153,
    36153, 36153, 36153, 36153, 36153, 36153, 36153, 36208, 36208, 36208, 36208,
    36208, 36208, 36208, 36208, 36208, 36208, 36208, 36208, 36208, 36208, 36208,
    36208, 36263, 36263, 36263, 36263, 36263, 36263, 36263, 36263, 36263, 36263,
    36263, 36263, 36263, 36263, 36263, 36263, 36318, 36318, 36318, 36318, 36318,
    36318, 36318, 36318, 36318, 36318, 36318, 36318, 36318, 36318, 36318, 36318,
    36373, 36373, 36373, 36373, 36373, 36373, 36373, 36373, 36373, 36373, 36373,
    36373, 36373, 36373, 36373, 36373, 36428, 36428, 36428, 36428, 36428, 36428,
    36428, 36428, 36428, 36428, 36428, 36428, 36428, 36428, 36428, 36428, 36483,
    36483, 36483, 36483, 36483, 36483, 36483, 36483, 36483, 36483, 36483, 36483,
    36483, 36483, 36483, 36483, 36539, 36539, 36539, 36539, 36539, 36539, 36539,
    36539, 36594, 36594, 36594, 36594, 36594, 36594, 36594, 36594, 36649, 36649,
    36649, 36649, 36649, 36649, 36649, 36649, 36704, 36704, 36704, 36704, 36704,
    36704, 36704, 36704, 36759, 36759, 36759, 36759, 36759, 36759, 36759, 36759,
    36814, 36814, 36814, 36814, 36814, 36814, 36814, 36814, 36871, 36871, 36926,
    36926, 36981, 36981, 37036, 37036, 37091, 37091, 37147, 37202, 37257, 22,
    33,    44};
inline uint16_t GetEmitOp0(size_t i) { return g_emit_op_0[i]; }
// max=62 unique=2 flat=16 nested=32
// monotonic increasing
static const uint8_t g_emit_buffer_1[2] = {35, 62};
inline uint8_t GetEmitBuffer1(size_t i) { return g_emit_buffer_1[i]; }
// max=13 unique=2 flat=16 nested=32
// monotonic increasing
static const uint8_t g_emit_op_1[2] = {12, 13};
inline uint8_t GetEmitOp1(size_t i) { return g_emit_op_1[i]; }
// max=91 unique=4 flat=32 nested=64
// monotonic increasing
static const uint8_t g_emit_buffer_2[4] = {0, 36, 64, 91};
inline uint8_t GetEmitBuffer2(size_t i) { return g_emit_buffer_2[i]; }
// max=19 unique=4 flat=32 nested=64
// monotonic increasing
static const uint8_t g_emit_op_2[4] = {13, 15, 17, 19};
inline uint8_t GetEmitOp2(size_t i) { return g_emit_op_2[i]; }
// max=233 unique=57 flat=456 nested=912
static const uint8_t g_emit_buffer_3[57] = {
    93,  126, 94,  125, 60,  96,  123, 92,  195, 208, 128, 130, 131, 162, 184,
    194, 224, 226, 153, 161, 167, 172, 176, 177, 179, 209, 216, 217, 227, 229,
    230, 129, 132, 133, 134, 136, 146, 154, 156, 160, 163, 164, 169, 170, 173,
    178, 181, 185, 186, 187, 189, 190, 196, 198, 228, 232, 233};
inline uint8_t GetEmitBuffer3(size_t i) { return g_emit_buffer_3[i]; }
// max=12958 unique=77 flat=32768 nested=17616
// monotonic increasing
static const uint8_t g_emit_op_3_outer[2048] = {
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
    1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  2,
    2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
    2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
    2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
    2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
    2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
    2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
    2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
    2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
    2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
    2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
    2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
    2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
    2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
    2,  2,  2,  2,  2,  2,  2,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
    3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
    3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
    3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
    3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
    3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
    3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
    3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
    3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
    3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
    3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
    3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
    3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
    3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  4,  4,  4,
    4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,
    4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,
    4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,
    4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,
    4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,
    4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,
    4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  5,  5,  5,  5,  5,  5,  5,  5,
    5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,
    5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,
    5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,
    5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,
    5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,
    5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  5,
    5,  5,  5,  5,  5,  5,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,
    6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,
    6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,
    6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,
    6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,
    6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,
    6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,
    6,  7,  7,  7,  7,  7,  7,  7,  7,  8,  8,  8,  8,  8,  8,  8,  8,  9,  9,
    9,  9,  9,  9,  9,  9,  10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13,
    13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 17,
    18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27,
    27, 28, 28, 29, 29, 30, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,
    43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
    62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76};
static const uint16_t g_emit_op_3_inner[77] = {
    13,    244,   476,   707,   939,   1170,  1401,  1636,  1867,  2098,  2330,
    2561,  2792,  3023,  3254,  3485,  3716,  3947,  4179,  4410,  4641,  4872,
    5103,  5334,  5565,  5796,  6027,  6258,  6489,  6720,  6951,  7183,  7414,
    7645,  7876,  8107,  8338,  8569,  8800,  9031,  9262,  9493,  9724,  9955,
    10186, 10417, 10648, 10879, 11110, 11341, 11572, 11803, 12034, 12265, 12496,
    12727, 12958, 11,    22,    33,    44,    55,    66,    77,    88,    99,
    110,   121,   132,   143,   154,   165,   176,   187,   198,   209,   220};
inline uint16_t GetEmitOp3(size_t i) {
  return g_emit_op_3_inner[g_emit_op_3_outer[i]];
}
// max=135 unique=2 flat=16 nested=32
// monotonic increasing
static const uint8_t g_emit_buffer_4[2] = {1, 135};
inline uint8_t GetEmitBuffer4(size_t i) { return g_emit_buffer_4[i]; }
// max=24 unique=2 flat=16 nested=32
// monotonic increasing
static const uint8_t g_emit_op_4[2] = {23, 24};
inline uint8_t GetEmitOp4(size_t i) { return g_emit_op_4[i]; }
// max=138 unique=2 flat=16 nested=32
// monotonic increasing
static const uint8_t g_emit_buffer_5[2] = {137, 138};
inline uint8_t GetEmitBuffer5(size_t i) { return g_emit_buffer_5[i]; }
// max=24 unique=2 flat=16 nested=32
// monotonic increasing
static const uint8_t g_emit_op_5[2] = {23, 24};
inline uint8_t GetEmitOp5(size_t i) { return g_emit_op_5[i]; }
// max=140 unique=2 flat=16 nested=32
// monotonic increasing
static const uint8_t g_emit_buffer_6[2] = {139, 140};
inline uint8_t GetEmitBuffer6(size_t i) { return g_emit_buffer_6[i]; }
// max=24 unique=2 flat=16 nested=32
// monotonic increasing
static const uint8_t g_emit_op_6[2] = {23, 24};
inline uint8_t GetEmitOp6(size_t i) { return g_emit_op_6[i]; }
// max=143 unique=2 flat=16 nested=32
// monotonic increasing
static const uint8_t g_emit_buffer_7[2] = {141, 143};
inline uint8_t GetEmitBuffer7(size_t i) { return g_emit_buffer_7[i]; }
// max=24 unique=2 flat=16 nested=32
// monotonic increasing
static const uint8_t g_emit_op_7[2] = {23, 24};
inline uint8_t GetEmitOp7(size_t i) { return g_emit_op_7[i]; }
// max=149 unique=2 flat=16 nested=32
// monotonic increasing
static const uint8_t g_emit_buffer_8[2] = {147, 149};
inline uint8_t GetEmitBuffer8(size_t i) { return g_emit_buffer_8[i]; }
// max=24 unique=2 flat=16 nested=32
// monotonic increasing
static const uint8_t g_emit_op_8[2] = {23, 24};
inline uint8_t GetEmitOp8(size_t i) { return g_emit_op_8[i]; }
// max=151 unique=2 flat=16 nested=32
// monotonic increasing
static const uint8_t g_emit_buffer_9[2] = {150, 151};
inline uint8_t GetEmitBuffer9(size_t i) { return g_emit_buffer_9[i]; }
// max=24 unique=2 flat=16 nested=32
// monotonic increasing
static const uint8_t g_emit_op_9[2] = {23, 24};
inline uint8_t GetEmitOp9(size_t i) { return g_emit_op_9[i]; }
// max=155 unique=2 flat=16 nested=32
// monotonic increasing
static const uint8_t g_emit_buffer_10[2] = {152, 155};
inline uint8_t GetEmitBuffer10(size_t i) { return g_emit_buffer_10[i]; }
// max=24 unique=2 flat=16 nested=32
// monotonic increasing
static const uint8_t g_emit_op_10[2] = {23, 24};
inline uint8_t GetEmitOp10(size_t i) { return g_emit_op_10[i]; }
// max=158 unique=2 flat=16 nested=32
// monotonic increasing
static const uint8_t g_emit_buffer_11[2] = {157, 158};
inline uint8_t GetEmitBuffer11(size_t i) { return g_emit_buffer_11[i]; }
// max=24 unique=2 flat=16 nested=32
// monotonic increasing
static const uint8_t g_emit_op_11[2] = {23, 24};
inline uint8_t GetEmitOp11(size_t i) { return g_emit_op_11[i]; }
// max=166 unique=2 flat=16 nested=32
// monotonic increasing
static const uint8_t g_emit_buffer_12[2] = {165, 166};
inline uint8_t GetEmitBuffer12(size_t i) { return g_emit_buffer_12[i]; }
// max=24 unique=2 flat=16 nested=32
// monotonic increasing
static const uint8_t g_emit_op_12[2] = {23, 24};
inline uint8_t GetEmitOp12(size_t i) { return g_emit_op_12[i]; }
// max=174 unique=2 flat=16 nested=32
// monotonic increasing
static const uint8_t g_emit_buffer_13[2] = {168, 174};
inline uint8_t GetEmitBuffer13(size_t i) { return g_emit_buffer_13[i]; }
// max=24 unique=2 flat=16 nested=32
// monotonic increasing
static const uint8_t g_emit_op_13[2] = {23, 24};
inline uint8_t GetEmitOp13(size_t i) { return g_emit_op_13[i]; }
// max=180 unique=2 flat=16 nested=32
// monotonic increasing
static const uint8_t g_emit_buffer_14[2] = {175, 180};
inline uint8_t GetEmitBuffer14(size_t i) { return g_emit_buffer_14[i]; }
// max=24 unique=2 flat=16 nested=32
// monotonic increasing
static const uint8_t g_emit_op_14[2] = {23, 24};
inline uint8_t GetEmitOp14(size_t i) { return g_emit_op_14[i]; }
// max=183 unique=2 flat=16 nested=32
// monotonic increasing
static const uint8_t g_emit_buffer_15[2] = {182, 183};
inline uint8_t GetEmitBuffer15(size_t i) { return g_emit_buffer_15[i]; }
// max=24 unique=2 flat=16 nested=32
// monotonic increasing
static const uint8_t g_emit_op_15[2] = {23, 24};
inline uint8_t GetEmitOp15(size_t i) { return g_emit_op_15[i]; }
// max=191 unique=2 flat=16 nested=32
// monotonic increasing
static const uint8_t g_emit_buffer_16[2] = {188, 191};
inline uint8_t GetEmitBuffer16(size_t i) { return g_emit_buffer_16[i]; }
// max=24 unique=2 flat=16 nested=32
// monotonic increasing
static const uint8_t g_emit_op_16[2] = {23, 24};
inline uint8_t GetEmitOp16(size_t i) { return g_emit_op_16[i]; }
// max=231 unique=2 flat=16 nested=32
// monotonic increasing
static const uint8_t g_emit_buffer_17[2] = {197, 231};
inline uint8_t GetEmitBuffer17(size_t i) { return g_emit_buffer_17[i]; }
// max=24 unique=2 flat=16 nested=32
// monotonic increasing
static const uint8_t g_emit_op_17[2] = {23, 24};
inline uint8_t GetEmitOp17(size_t i) { return g_emit_op_17[i]; }
// max=159 unique=4 flat=32 nested=64
// monotonic increasing
static const uint8_t g_emit_buffer_18[4] = {144, 145, 148, 159};
inline uint8_t GetEmitBuffer18(size_t i) { return g_emit_buffer_18[i]; }
// max=30 unique=4 flat=32 nested=64
// monotonic increasing
static const uint8_t g_emit_op_18[4] = {24, 26, 28, 30};
inline uint8_t GetEmitOp18(size_t i) { return g_emit_op_18[i]; }
// max=225 unique=4 flat=32 nested=64
// monotonic increasing
static const uint8_t g_emit_buffer_19[4] = {171, 206, 215, 225};
inline uint8_t GetEmitBuffer19(size_t i) { return g_emit_buffer_19[i]; }
// max=30 unique=4 flat=32 nested=64
// monotonic increasing
static const uint8_t g_emit_op_19[4] = {24, 26, 28, 30};
inline uint8_t GetEmitOp19(size_t i) { return g_emit_op_19[i]; }
// max=255 unique=17 flat=136 nested=272
static const uint8_t g_emit_buffer_20[17] = {192, 193, 200, 201, 202, 205,
                                             210, 213, 218, 219, 238, 240,
                                             242, 243, 255, 203, 204};
inline uint8_t GetEmitBuffer20(size_t i) { return g_emit_buffer_20[i]; }
// max=107 unique=17 flat=256 nested=392
// monotonic increasing
static const uint8_t g_emit_op_20[32] = {
    26, 26, 31, 31, 36, 36, 41, 41, 46, 46, 51, 51, 56, 56, 61,  61,
    66, 66, 71, 71, 76, 76, 81, 81, 86, 86, 91, 91, 96, 96, 102, 107};
inline uint8_t GetEmitOp20(size_t i) { return g_emit_op_20[i]; }
// max=239 unique=3 flat=24 nested=48
static const uint8_t g_emit_buffer_21[3] = {239, 9, 142};
inline uint8_t GetEmitBuffer21(size_t i) { return g_emit_buffer_21[i]; }
// max=28 unique=3 flat=32 nested=56
// monotonic increasing
static const uint8_t g_emit_op_21[4] = {23, 23, 26, 28};
inline uint8_t GetEmitOp21(size_t i) { return g_emit_op_21[i]; }
// max=237 unique=6 flat=48 nested=96
static const uint8_t g_emit_buffer_22[6] = {236, 237, 199, 207, 234, 235};
inline uint8_t GetEmitBuffer22(size_t i) { return g_emit_buffer_22[i]; }
// max=40 unique=6 flat=64 nested=112
// monotonic increasing
static const uint8_t g_emit_op_22[8] = {24, 24, 27, 27, 31, 34, 37, 40};
inline uint8_t GetEmitOp22(size_t i) { return g_emit_op_22[i]; }
// max=256 unique=50 flat=800 nested=1200
static const uint16_t g_emit_buffer_23[50] = {
    211, 212, 214, 221, 222, 223, 241, 244, 245, 246, 247, 248, 250,
    251, 252, 253, 254, 2,   3,   4,   5,   6,   7,   8,   11,  12,
    14,  15,  16,  17,  18,  19,  20,  21,  23,  24,  25,  26,  27,
    28,  29,  30,  31,  127, 220, 249, 10,  13,  22,  256};
inline uint16_t GetEmitBuffer23(size_t i) { return g_emit_buffer_23[i]; }
// max=422 unique=50 flat=4096 nested=2848
// monotonic increasing
static const uint8_t g_emit_op_23_outer[256] = {
    0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  2,  2,  2,
    2,  2,  2,  2,  2,  3,  3,  3,  3,  3,  3,  3,  3,  4,  4,  4,  4,  4,  4,
    4,  4,  5,  5,  5,  5,  5,  5,  5,  5,  6,  6,  6,  6,  6,  6,  6,  6,  7,
    7,  7,  7,  7,  7,  7,  7,  8,  8,  8,  8,  8,  8,  8,  8,  9,  9,  9,  9,
    9,  9,  9,  9,  10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11,
    11, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14,
    14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16,
    16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20,
    21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25,
    25, 26, 26, 26, 26, 27, 27, 27, 27, 28, 28, 28, 28, 29, 29, 29, 29, 30, 30,
    30, 30, 31, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 34, 35,
    35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39,
    40, 40, 40, 40, 41, 41, 41, 41, 42, 42, 42, 42, 43, 43, 43, 43, 44, 44, 44,
    44, 45, 45, 45, 45, 46, 47, 48, 49};
// monotonic increasing
static const uint16_t g_emit_op_23_inner[50] = {
    27,  35,  43,  51,  59,  67,  75,  83,  91,  99,  107, 115, 123,
    131, 139, 147, 155, 164, 172, 180, 188, 196, 204, 212, 220, 228,
    236, 244, 252, 260, 268, 276, 284, 292, 300, 308, 316, 324, 332,
    340, 348, 356, 364, 372, 380, 388, 398, 406, 414, 422};
inline uint16_t GetEmitOp23(size_t i) {
  return g_emit_op_23_inner[g_emit_op_23_outer[i]];
}
class HuffDecoder {
 public:
  template <typename F>
  bool DecodeHuff(F sink, const uint8_t* begin, const uint8_t* end) {
    while (true) {
      if (!RefillTo11()) return buffer_len_ == 0;
      const auto index = buffer_ >> (buffer_len_ - 11);
      auto op = GetEmitOp0(index);
      buffer_len_ -= op % 11;
      op /= 11;
      const auto emit_ofs = op / 5;
      switch (op % 5) {
        case 0: {
          *out_++ = GetEmitBuffer0(emit_ofs + 0);
          *out_++ = GetEmitBuffer0(emit_ofs + 1);
          return true;
        }
        case 1: {
          *out_++ = GetEmitBuffer0(emit_ofs + 0);
          return true;
        }
        case 2: {
          return DecodeStep0();
        }
        case 3: {
          return DecodeStep1();
        }
        case 4: {
          return DecodeStep2();
        }
      }
    }
  }

 private:
  bool RefillTo11() {
    while (buffer_len_ < 11) {
      if (begin_ == end_) return false;
      buffer_ <<= 8;
      buffer_ |= static_cast<uint64_t>(*begin_++);
      buffer_len_ += 8;
    }
    return true;
  }
  bool DecodeStep0() {
    if (!RefillTo1()) return buffer_len_ == 0;
    const auto index = buffer_ >> (buffer_len_ - 1);
    auto op = GetEmitOp1(index);
    buffer_len_ -= op % 1;
    *out_++ = GetEmitBuffer1(op + 0);
    return true;
  }
  bool RefillTo1() {
    while (buffer_len_ < 1) {
      if (begin_ == end_) return false;
      buffer_ <<= 8;
      buffer_ |= static_cast<uint64_t>(*begin_++);
      buffer_len_ += 8;
    }
    return true;
  }
  bool DecodeStep1() {
    if (!RefillTo2()) return buffer_len_ == 0;
    const auto index = buffer_ >> (buffer_len_ - 2);
    auto op = GetEmitOp2(index);
    buffer_len_ -= op % 2;
    *out_++ = GetEmitBuffer2(op + 0);
    return true;
  }
  bool RefillTo2() {
    while (buffer_len_ < 2) {
      if (begin_ == end_) return false;
      buffer_ <<= 8;
      buffer_ |= static_cast<uint64_t>(*begin_++);
      buffer_len_ += 8;
    }
    return true;
  }
  bool DecodeStep2() {
    if (!RefillTo11()) return buffer_len_ == 0;
    const auto index = buffer_ >> (buffer_len_ - 11);
    auto op = GetEmitOp3(index);
    buffer_len_ -= op % 11;
    op /= 11;
    const auto emit_ofs = op / 21;
    switch (op % 21) {
      case 0: {
        *out_++ = GetEmitBuffer3(emit_ofs + 0);
        return true;
      }
      case 8: {
        return DecodeStep10();
      }
      case 9: {
        return DecodeStep11();
      }
      case 10: {
        return DecodeStep12();
      }
      case 11: {
        return DecodeStep13();
      }
      case 12: {
        return DecodeStep14();
      }
      case 13: {
        return DecodeStep15();
      }
      case 14: {
        return DecodeStep16();
      }
      case 16: {
        return DecodeStep17();
      }
      case 17: {
        return DecodeStep18();
      }
      case 19: {
        return DecodeStep19();
      }
      case 15: {
        return DecodeStep20();
      }
      case 18: {
        return DecodeStep21();
      }
      case 20: {
        return DecodeStep22();
      }
      case 1: {
        return DecodeStep3();
      }
      case 2: {
        return DecodeStep4();
      }
      case 3: {
        return DecodeStep5();
      }
      case 4: {
        return DecodeStep6();
      }
      case 5: {
        return DecodeStep7();
      }
      case 6: {
        return DecodeStep8();
      }
      case 7: {
        return DecodeStep9();
      }
    }
  }
  bool DecodeStep3() {
    if (!RefillTo1()) return buffer_len_ == 0;
    const auto index = buffer_ >> (buffer_len_ - 1);
    auto op = GetEmitOp4(index);
    buffer_len_ -= op % 1;
    *out_++ = GetEmitBuffer4(op + 0);
    return true;
  }
  bool DecodeStep4() {
    if (!RefillTo1()) return buffer_len_ == 0;
    const auto index = buffer_ >> (buffer_len_ - 1);
    auto op = GetEmitOp5(index);
    buffer_len_ -= op % 1;
    *out_++ = GetEmitBuffer5(op + 0);
    return true;
  }
  bool DecodeStep5() {
    if (!RefillTo1()) return buffer_len_ == 0;
    const auto index = buffer_ >> (buffer_len_ - 1);
    auto op = GetEmitOp6(index);
    buffer_len_ -= op % 1;
    *out_++ = GetEmitBuffer6(op + 0);
    return true;
  }
  bool DecodeStep6() {
    if (!RefillTo1()) return buffer_len_ == 0;
    const auto index = buffer_ >> (buffer_len_ - 1);
    auto op = GetEmitOp7(index);
    buffer_len_ -= op % 1;
    *out_++ = GetEmitBuffer7(op + 0);
    return true;
  }
  bool DecodeStep7() {
    if (!RefillTo1()) return buffer_len_ == 0;
    const auto index = buffer_ >> (buffer_len_ - 1);
    auto op = GetEmitOp8(index);
    buffer_len_ -= op % 1;
    *out_++ = GetEmitBuffer8(op + 0);
    return true;
  }
  bool DecodeStep8() {
    if (!RefillTo1()) return buffer_len_ == 0;
    const auto index = buffer_ >> (buffer_len_ - 1);
    auto op = GetEmitOp9(index);
    buffer_len_ -= op % 1;
    *out_++ = GetEmitBuffer9(op + 0);
    return true;
  }
  bool DecodeStep9() {
    if (!RefillTo1()) return buffer_len_ == 0;
    const auto index = buffer_ >> (buffer_len_ - 1);
    auto op = GetEmitOp10(index);
    buffer_len_ -= op % 1;
    *out_++ = GetEmitBuffer10(op + 0);
    return true;
  }
  bool DecodeStep10() {
    if (!RefillTo1()) return buffer_len_ == 0;
    const auto index = buffer_ >> (buffer_len_ - 1);
    auto op = GetEmitOp11(index);
    buffer_len_ -= op % 1;
    *out_++ = GetEmitBuffer11(op + 0);
    return true;
  }
  bool DecodeStep11() {
    if (!RefillTo1()) return buffer_len_ == 0;
    const auto index = buffer_ >> (buffer_len_ - 1);
    auto op = GetEmitOp12(index);
    buffer_len_ -= op % 1;
    *out_++ = GetEmitBuffer12(op + 0);
    return true;
  }
  bool DecodeStep12() {
    if (!RefillTo1()) return buffer_len_ == 0;
    const auto index = buffer_ >> (buffer_len_ - 1);
    auto op = GetEmitOp13(index);
    buffer_len_ -= op % 1;
    *out_++ = GetEmitBuffer13(op + 0);
    return true;
  }
  bool DecodeStep13() {
    if (!RefillTo1()) return buffer_len_ == 0;
    const auto index = buffer_ >> (buffer_len_ - 1);
    auto op = GetEmitOp14(index);
    buffer_len_ -= op % 1;
    *out_++ = GetEmitBuffer14(op + 0);
    return true;
  }
  bool DecodeStep14() {
    if (!RefillTo1()) return buffer_len_ == 0;
    const auto index = buffer_ >> (buffer_len_ - 1);
    auto op = GetEmitOp15(index);
    buffer_len_ -= op % 1;
    *out_++ = GetEmitBuffer15(op + 0);
    return true;
  }
  bool DecodeStep15() {
    if (!RefillTo1()) return buffer_len_ == 0;
    const auto index = buffer_ >> (buffer_len_ - 1);
    auto op = GetEmitOp16(index);
    buffer_len_ -= op % 1;
    *out_++ = GetEmitBuffer16(op + 0);
    return true;
  }
  bool DecodeStep16() {
    if (!RefillTo1()) return buffer_len_ == 0;
    const auto index = buffer_ >> (buffer_len_ - 1);
    auto op = GetEmitOp17(index);
    buffer_len_ -= op % 1;
    *out_++ = GetEmitBuffer17(op + 0);
    return true;
  }
  bool DecodeStep17() {
    if (!RefillTo2()) return buffer_len_ == 0;
    const auto index = buffer_ >> (buffer_len_ - 2);
    auto op = GetEmitOp18(index);
    buffer_len_ -= op % 2;
    *out_++ = GetEmitBuffer18(op + 0);
    return true;
  }
  bool DecodeStep18() {
    if (!RefillTo2()) return buffer_len_ == 0;
    const auto index = buffer_ >> (buffer_len_ - 2);
    auto op = GetEmitOp19(index);
    buffer_len_ -= op % 2;
    *out_++ = GetEmitBuffer19(op + 0);
    return true;
  }
  bool DecodeStep19() {
    if (!RefillTo5()) return buffer_len_ == 0;
    const auto index = buffer_ >> (buffer_len_ - 5);
    auto op = GetEmitOp20(index);
    buffer_len_ -= op % 5;
    *out_++ = GetEmitBuffer20(op + 0);
    return true;
  }
  bool RefillTo5() {
    while (buffer_len_ < 5) {
      if (begin_ == end_) return false;
      buffer_ <<= 8;
      buffer_ |= static_cast<uint64_t>(*begin_++);
      buffer_len_ += 8;
    }
    return true;
  }
  bool DecodeStep20() {
    if (!RefillTo2()) return buffer_len_ == 0;
    const auto index = buffer_ >> (buffer_len_ - 2);
    auto op = GetEmitOp21(index);
    buffer_len_ -= op % 2;
    *out_++ = GetEmitBuffer21(op + 0);
    return true;
  }
  bool DecodeStep21() {
    if (!RefillTo3()) return buffer_len_ == 0;
    const auto index = buffer_ >> (buffer_len_ - 3);
    auto op = GetEmitOp22(index);
    buffer_len_ -= op % 3;
    *out_++ = GetEmitBuffer22(op + 0);
    return true;
  }
  bool RefillTo3() {
    while (buffer_len_ < 3) {
      if (begin_ == end_) return false;
      buffer_ <<= 8;
      buffer_ |= static_cast<uint64_t>(*begin_++);
      buffer_len_ += 8;
    }
    return true;
  }
  bool DecodeStep22() {
    if (!RefillTo8()) return buffer_len_ == 0;
    const auto index = buffer_ >> (buffer_len_ - 8);
    auto op = GetEmitOp23(index);
    buffer_len_ -= op % 8;
    *out_++ = GetEmitBuffer23(op + 0);
    return true;
  }
  bool RefillTo8() {
    while (buffer_len_ < 8) {
      if (begin_ == end_) return false;
      buffer_ <<= 8;
      buffer_ |= static_cast<uint64_t>(*begin_++);
      buffer_len_ += 8;
    }
    return true;
  }
  const uint8_t* begin_;
  const uint8_t* const end_;
  uint8_t* out_;
  uint64_t buffer_ = 0;
  int buffer_len_ = 0;
};
