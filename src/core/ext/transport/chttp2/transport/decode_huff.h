#include <cstddef>
#include <cstdint>
static const uint8_t g_emit_buffer_0[] = {
  0x30, 0x30, 0x30, 0x31, 0x30, 0x32, 0x30, 0x61, 0x30, 0x63, 0x30, 0x65, 0x30, 0x69, 0x30, 0x6f, 0x30, 0x73, 0x30, 0x74, 0x31, 0x31, 0x31, 0x32, 0x31, 0x61, 0x31, 0x63, 0x31, 0x65, 0x31, 0x69, 0x31, 0x6f, 0x31, 0x73, 0x31, 0x74, 0x32, 0x32, 0x32, 0x61, 0x32, 0x63, 0x32, 0x65, 0x32, 0x69, 0x32, 0x6f, 0x32, 0x73, 0x32, 0x74, 0x61, 0x61, 0x61, 0x63, 0x61, 0x65, 0x61, 0x69, 0x61, 0x6f, 0x61, 0x73, 0x61, 0x74, 0x63, 0x63, 0x63, 0x65, 0x63, 0x69, 0x63, 0x6f, 0x63, 0x73, 0x63, 0x74, 0x65, 0x65, 0x65, 0x69, 0x65, 0x6f, 0x65, 0x73, 0x65, 0x74, 0x69, 0x69, 0x69, 0x6f, 0x69, 0x73, 0x69, 0x74, 0x6f, 0x6f, 0x6f, 0x73, 0x6f, 0x74, 0x73, 0x73, 0x73, 0x74, 0x74, 0x30, 0x20, 0x25, 0x2d, 0x2e, 0x2f, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3d, 0x41, 0x5f, 0x62, 0x64, 0x66, 0x67, 0x68, 0x6c, 0x6d, 0x6e, 0x70, 0x72, 0x75, 0x3a, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x59, 0x6a, 0x6b, 0x71, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x26, 0x2a, 0x2c, 0x3b, 0x58, 0x5a, 0x21, 0x22, 0x28, 0x29, 0x3f
};
static const uint16_t g_emit_op_0[] = {
  0x00, 0x12, 0x24, 0x36, 0x48, 0x5a, 0x6c, 0x7e, 0x90, 0xa2, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x1b, 0xb4, 0xc6, 0xd8, 0xea, 0xfc, 0x10e, 0x120, 0x132, 0x144, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x2d, 0xcf, 0x156, 0x168, 0x17a, 0x18c, 0x19e, 0x1b0, 0x1c2, 0x1d4, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x3f, 0xe1, 0x171, 0x1e6, 0x1f8, 0x20a, 0x21c, 0x22e, 0x240, 0x252, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x51, 0xf3, 0x183, 0x201, 0x264, 0x276, 0x288, 0x29a, 0x2ac, 0x2be, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x52, 0x63, 0x105, 0x195, 0x213, 0x27f, 0x2d0, 0x2e2, 0x2f4, 0x306, 0x318, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x75, 0x117, 0x1a7, 0x225, 0x291, 0x2eb, 0x32a, 0x33c, 0x34e, 0x360, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x87, 0x129, 0x1b9, 0x237, 0x2a3, 0x2fd, 0x345, 0x372, 0x384, 0x396, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x99, 0x13b, 0x1cb, 0x249, 0x2b5, 0x30f, 0x357, 0x38d, 0x3a8, 0x3ba, 0x9a, 0x9a, 0x9a, 0x9a, 0x9a, 0x9a, 0x9a, 0x9a, 0x9a, 0x9a, 0x9a, 0x9a, 0x9a, 0x9a, 0x9a, 0x9a, 0x9a, 0x9a, 0x9a, 0x9a, 0x9a, 0x9a, 0x3cc, 0xab, 0x14d, 0x1dd, 0x25b, 0x2c7, 0x321, 0x369, 0x39f, 0x3c3, 0xac, 0xac, 0xac, 0xac, 0xac, 0xac, 0xac, 0xac, 0xac, 0xac, 0xac, 0xac, 0xac, 0xac, 0xac, 0xac, 0xac, 0xac, 0xac, 0xac, 0xac, 0xac, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e0, 0x3e9, 0x3e9, 0x3e9, 0x3e9, 0x3e9, 0x3e9, 0x3e9, 0x3e9, 0x3e9, 0x3e9, 0x3e9, 0x3e9, 0x3e9, 0x3e9, 0x3e9, 0x3e9, 0x3f2, 0x3f2, 0x3f2, 0x3f2, 0x3f2, 0x3f2, 0x3f2, 0x3f2, 0x3f2, 0x3f2, 0x3f2, 0x3f2, 0x3f2, 0x3f2, 0x3f2, 0x3f2, 0x3fb, 0x3fb, 0x3fb, 0x3fb, 0x3fb, 0x3fb, 0x3fb, 0x3fb, 0x3fb, 0x3fb, 0x3fb, 0x3fb, 0x3fb, 0x3fb, 0x3fb, 0x3fb, 0x404, 0x404, 0x404, 0x404, 0x404, 0x404, 0x404, 0x404, 0x404, 0x404, 0x404, 0x404, 0x404, 0x404, 0x404, 0x404, 0x40d, 0x40d, 0x40d, 0x40d, 0x40d, 0x40d, 0x40d, 0x40d, 0x40d, 0x40d, 0x40d, 0x40d, 0x40d, 0x40d, 0x40d, 0x40d, 0x416, 0x416, 0x416, 0x416, 0x416, 0x416, 0x416, 0x416, 0x416, 0x416, 0x416, 0x416, 0x416, 0x416, 0x416, 0x416, 0x41f, 0x41f, 0x41f, 0x41f, 0x41f, 0x41f, 0x41f, 0x41f, 0x41f, 0x41f, 0x41f, 0x41f, 0x41f, 0x41f, 0x41f, 0x41f, 0x428, 0x428, 0x428, 0x428, 0x428, 0x428, 0x428, 0x428, 0x428, 0x428, 0x428, 0x428, 0x428, 0x428, 0x428, 0x428, 0x431, 0x431, 0x431, 0x431, 0x431, 0x431, 0x431, 0x431, 0x431, 0x431, 0x431, 0x431, 0x431, 0x431, 0x431, 0x431, 0x43a, 0x43a, 0x43a, 0x43a, 0x43a, 0x43a, 0x43a, 0x43a, 0x43a, 0x43a, 0x43a, 0x43a, 0x43a, 0x43a, 0x43a, 0x43a, 0x443, 0x443, 0x443, 0x443, 0x443, 0x443, 0x443, 0x443, 0x443, 0x443, 0x443, 0x443, 0x443, 0x443, 0x443, 0x443, 0x44c, 0x44c, 0x44c, 0x44c, 0x44c, 0x44c, 0x44c, 0x44c, 0x44c, 0x44c, 0x44c, 0x44c, 0x44c, 0x44c, 0x44c, 0x44c, 0x455, 0x455, 0x455, 0x455, 0x455, 0x455, 0x455, 0x455, 0x455, 0x455, 0x455, 0x455, 0x455, 0x455, 0x455, 0x455, 0x45e, 0x45e, 0x45e, 0x45e, 0x45e, 0x45e, 0x45e, 0x45e, 0x45e, 0x45e, 0x45e, 0x45e, 0x45e, 0x45e, 0x45e, 0x45e, 0x467, 0x467, 0x467, 0x467, 0x467, 0x467, 0x467, 0x467, 0x467, 0x467, 0x467, 0x467, 0x467, 0x467, 0x467, 0x467, 0x470, 0x470, 0x470, 0x470, 0x470, 0x470, 0x470, 0x470, 0x470, 0x470, 0x470, 0x470, 0x470, 0x470, 0x470, 0x470, 0x479, 0x479, 0x479, 0x479, 0x479, 0x479, 0x479, 0x479, 0x479, 0x479, 0x479, 0x479, 0x479, 0x479, 0x479, 0x479, 0x482, 0x482, 0x482, 0x482, 0x482, 0x482, 0x482, 0x482, 0x482, 0x482, 0x482, 0x482, 0x482, 0x482, 0x482, 0x482, 0x48b, 0x48b, 0x48b, 0x48b, 0x48b, 0x48b, 0x48b, 0x48b, 0x48b, 0x48b, 0x48b, 0x48b, 0x48b, 0x48b, 0x48b, 0x48b, 0x494, 0x494, 0x494, 0x494, 0x494, 0x494, 0x494, 0x494, 0x494, 0x494, 0x494, 0x494, 0x494, 0x494, 0x494, 0x494, 0x49d, 0x49d, 0x49d, 0x49d, 0x49d, 0x49d, 0x49d, 0x49d, 0x49d, 0x49d, 0x49d, 0x49d, 0x49d, 0x49d, 0x49d, 0x49d, 0x4a6, 0x4a6, 0x4a6, 0x4a6, 0x4a6, 0x4a6, 0x4a6, 0x4a6, 0x4a6, 0x4a6, 0x4a6, 0x4a6, 0x4a6, 0x4a6, 0x4a6, 0x4a6, 0x4af, 0x4af, 0x4af, 0x4af, 0x4af, 0x4af, 0x4af, 0x4af, 0x4af, 0x4af, 0x4af, 0x4af, 0x4af, 0x4af, 0x4af, 0x4af, 0x4b8, 0x4b8, 0x4b8, 0x4b8, 0x4b8, 0x4b8, 0x4b8, 0x4b8, 0x4b8, 0x4b8, 0x4b8, 0x4b8, 0x4b8, 0x4b8, 0x4b8, 0x4b8, 0x4c1, 0x4c1, 0x4c1, 0x4c1, 0x4c1, 0x4c1, 0x4c1, 0x4c1, 0x4c1, 0x4c1, 0x4c1, 0x4c1, 0x4c1, 0x4c1, 0x4c1, 0x4c1, 0x4cb, 0x4cb, 0x4cb, 0x4cb, 0x4cb, 0x4cb, 0x4cb, 0x4cb, 0x4d4, 0x4d4, 0x4d4, 0x4d4, 0x4d4, 0x4d4, 0x4d4, 0x4d4, 0x4dd, 0x4dd, 0x4dd, 0x4dd, 0x4dd, 0x4dd, 0x4dd, 0x4dd, 0x4e6, 0x4e6, 0x4e6, 0x4e6, 0x4e6, 0x4e6, 0x4e6, 0x4e6, 0x4ef, 0x4ef, 0x4ef, 0x4ef, 0x4ef, 0x4ef, 0x4ef, 0x4ef, 0x4f8, 0x4f8, 0x4f8, 0x4f8, 0x4f8, 0x4f8, 0x4f8, 0x4f8, 0x501, 0x501, 0x501, 0x501, 0x501, 0x501, 0x501, 0x501, 0x50a, 0x50a, 0x50a, 0x50a, 0x50a, 0x50a, 0x50a, 0x50a, 0x513, 0x513, 0x513, 0x513, 0x513, 0x513, 0x513, 0x513, 0x51c, 0x51c, 0x51c, 0x51c, 0x51c, 0x51c, 0x51c, 0x51c, 0x525, 0x525, 0x525, 0x525, 0x525, 0x525, 0x525, 0x525, 0x52e, 0x52e, 0x52e, 0x52e, 0x52e, 0x52e, 0x52e, 0x52e, 0x537, 0x537, 0x537, 0x537, 0x537, 0x537, 0x537, 0x537, 0x540, 0x540, 0x540, 0x540, 0x540, 0x540, 0x540, 0x540, 0x549, 0x549, 0x549, 0x549, 0x549, 0x549, 0x549, 0x549, 0x552, 0x552, 0x552, 0x552, 0x552, 0x552, 0x552, 0x552, 0x55b, 0x55b, 0x55b, 0x55b, 0x55b, 0x55b, 0x55b, 0x55b, 0x564, 0x564, 0x564, 0x564, 0x564, 0x564, 0x564, 0x564, 0x56d, 0x56d, 0x56d, 0x56d, 0x56d, 0x56d, 0x56d, 0x56d, 0x576, 0x576, 0x576, 0x576, 0x576, 0x576, 0x576, 0x576, 0x57f, 0x57f, 0x57f, 0x57f, 0x57f, 0x57f, 0x57f, 0x57f, 0x588, 0x588, 0x588, 0x588, 0x588, 0x588, 0x588, 0x588, 0x591, 0x591, 0x591, 0x591, 0x591, 0x591, 0x591, 0x591, 0x59a, 0x59a, 0x59a, 0x59a, 0x59a, 0x59a, 0x59a, 0x59a, 0x5a3, 0x5a3, 0x5a3, 0x5a3, 0x5a3, 0x5a3, 0x5a3, 0x5a3, 0x5ac, 0x5ac, 0x5ac, 0x5ac, 0x5ac, 0x5ac, 0x5ac, 0x5ac, 0x5b5, 0x5b5, 0x5b5, 0x5b5, 0x5b5, 0x5b5, 0x5b5, 0x5b5, 0x5be, 0x5be, 0x5be, 0x5be, 0x5be, 0x5be, 0x5be, 0x5be, 0x5c7, 0x5c7, 0x5c7, 0x5c7, 0x5c7, 0x5c7, 0x5c7, 0x5c7, 0x5d0, 0x5d0, 0x5d0, 0x5d0, 0x5d0, 0x5d0, 0x5d0, 0x5d0, 0x5d9, 0x5d9, 0x5d9, 0x5d9, 0x5d9, 0x5d9, 0x5d9, 0x5d9, 0x5e2, 0x5e2, 0x5e2, 0x5e2, 0x5e2, 0x5e2, 0x5e2, 0x5e2, 0x5ec, 0x5ec, 0x5ec, 0x5ec, 0x5f5, 0x5f5, 0x5f5, 0x5f5, 0x5fe, 0x5fe, 0x5fe, 0x5fe, 0x607, 0x607, 0x607, 0x607, 0x610, 0x610, 0x610, 0x610, 0x619, 0x619, 0x619, 0x619, 0x623, 0x62c, 0x635, 0x63e, 0x647
};
static const uint8_t g_emit_buffer_1[] = {
  0x27, 0x2b
};
static const uint8_t g_emit_op_1[] = {
  0x00, 0x01
};
static const uint8_t g_emit_buffer_2[] = {
  0x00, 0x24, 0x40, 0x5b, 0x5d, 0x7e, 0x5e, 0x7d, 0x3c, 0x60, 0x7b, 0x5c, 0xc3, 0xd0, 0x80, 0x82, 0x83, 0xa2, 0xb8, 0xc2, 0xe0, 0xe2
};
static const uint16_t g_emit_op_2[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x2e, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x73, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xa2, 0xba, 0xba, 0xba, 0xba, 0xba, 0xba, 0xba, 0xba, 0xba, 0xba, 0xba, 0xba, 0xba, 0xba, 0xba, 0xba, 0xba, 0xba, 0xba, 0xba, 0xba, 0xba, 0xba, 0xba, 0xba, 0xba, 0xba, 0xba, 0xba, 0xba, 0xba, 0xba, 0xd1, 0xd1, 0xd1, 0xd1, 0xd1, 0xd1, 0xd1, 0xd1, 0xd1, 0xd1, 0xd1, 0xd1, 0xd1, 0xd1, 0xd1, 0xd1, 0xd1, 0xd1, 0xd1, 0xd1, 0xd1, 0xd1, 0xd1, 0xd1, 0xd1, 0xd1, 0xd1, 0xd1, 0xd1, 0xd1, 0xd1, 0xd1, 0xe8, 0xe8, 0xe8, 0xe8, 0xe8, 0xe8, 0xe8, 0xe8, 0xe8, 0xe8, 0xe8, 0xe8, 0xe8, 0xe8, 0xe8, 0xe8, 0xe8, 0xe8, 0xe8, 0xe8, 0xe8, 0xe8, 0xe8, 0xe8, 0xe8, 0xe8, 0xe8, 0xe8, 0xe8, 0xe8, 0xe8, 0xe8, 0x100, 0x100, 0x117, 0x117, 0x12e, 0x12e, 0x146, 0x15d, 0x174, 0x18b, 0x1a2, 0x1b9, 0x1d0, 0x1e7
};
static const uint8_t g_emit_buffer_3[] = {
  0x99, 0xa1
};
static const uint8_t g_emit_op_3[] = {
  0x00, 0x01
};
static const uint8_t g_emit_buffer_4[] = {
  0xa7, 0xac
};
static const uint8_t g_emit_op_4[] = {
  0x00, 0x01
};
static const uint8_t g_emit_buffer_5[] = {
  0xb0, 0xb1
};
static const uint8_t g_emit_op_5[] = {
  0x00, 0x01
};
static const uint8_t g_emit_buffer_6[] = {
  0xb3, 0xd1
};
static const uint8_t g_emit_op_6[] = {
  0x00, 0x01
};
static const uint8_t g_emit_buffer_7[] = {
  0xd8, 0xd9
};
static const uint8_t g_emit_op_7[] = {
  0x00, 0x01
};
static const uint8_t g_emit_buffer_8[] = {
  0xe3, 0xe5
};
static const uint8_t g_emit_op_8[] = {
  0x00, 0x01
};
static const uint8_t g_emit_buffer_9[] = {
  0x85, 0x86, 0x88, 0x92
};
static const uint8_t g_emit_op_9[] = {
  0x00, 0x01, 0x02, 0x03
};
static const uint8_t g_emit_buffer_10[] = {
  0x9a, 0x9c, 0xa0, 0xa3
};
static const uint8_t g_emit_op_10[] = {
  0x00, 0x01, 0x02, 0x03
};
static const uint8_t g_emit_buffer_11[] = {
  0xa4, 0xa9, 0xaa, 0xad
};
static const uint8_t g_emit_op_11[] = {
  0x00, 0x01, 0x02, 0x03
};
static const uint8_t g_emit_buffer_12[] = {
  0xb2, 0xb5, 0xb9, 0xba
};
static const uint8_t g_emit_op_12[] = {
  0x00, 0x01, 0x02, 0x03
};
static const uint8_t g_emit_buffer_13[] = {
  0xbb, 0xbd, 0xbe, 0xc4
};
static const uint8_t g_emit_op_13[] = {
  0x00, 0x01, 0x02, 0x03
};
static const uint8_t g_emit_buffer_14[] = {
  0xc6, 0xe4, 0xe8, 0xe9
};
static const uint8_t g_emit_op_14[] = {
  0x00, 0x01, 0x02, 0x03
};
static const uint8_t g_emit_buffer_15[] = {
  0x01, 0x87, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8f
};
static const uint8_t g_emit_op_15[] = {
  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07
};
static const uint8_t g_emit_buffer_16[] = {
  0x93, 0x95, 0x96, 0x97, 0x98, 0x9b, 0x9d, 0x9e
};
static const uint8_t g_emit_op_16[] = {
  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07
};
static const uint8_t g_emit_buffer_17[] = {
  0xa5, 0xa6, 0xa8, 0xae, 0xaf, 0xb4, 0xb6, 0xb7
};
static const uint8_t g_emit_op_17[] = {
  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07
};
static const uint8_t g_emit_buffer_18[] = {
  0xe6, 0x81, 0x84
};
static const uint8_t g_emit_op_18[] = {
  0x00, 0x00, 0x03, 0x05
};
static const uint8_t g_emit_buffer_19[] = {
  0xbc, 0xbf, 0xc5, 0xe7, 0xef, 0x09, 0x8e, 0x90, 0x91, 0x94, 0x9f
};
static const uint8_t g_emit_op_19[] = {
  0x00, 0x00, 0x02, 0x02, 0x04, 0x04, 0x06, 0x06, 0x08, 0x08, 0x0b, 0x0d, 0x0f, 0x11, 0x13, 0x15
};
static const uint16_t g_emit_buffer_20[] = {
  0xab, 0xce, 0xd7, 0xe1, 0xec, 0xed, 0xc7, 0xcf, 0xea, 0xeb, 0xc0, 0xc1, 0xc8, 0xc9, 0xca, 0xcd, 0xd2, 0xd5, 0xda, 0xdb, 0xee, 0xf0, 0xf2, 0xf3, 0xff, 0xcb, 0xcc, 0xd3, 0xd4, 0xd6, 0xdd, 0xde, 0xdf, 0xf1, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x0b, 0x0c, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x7f, 0xdc, 0xf9, 0x0a, 0x0d, 0x16, 0x100
};
static const uint16_t g_emit_op_20[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x2b, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x4a, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x56, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x5c, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x68, 0x6e, 0x6e, 0x6e, 0x6e, 0x6e, 0x6e, 0x6e, 0x6e, 0x6e, 0x6e, 0x6e, 0x6e, 0x6e, 0x6e, 0x6e, 0x6e, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x74, 0x7a, 0x7a, 0x7a, 0x7a, 0x7a, 0x7a, 0x7a, 0x7a, 0x7a, 0x7a, 0x7a, 0x7a, 0x7a, 0x7a, 0x7a, 0x7a, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x86, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x9f, 0x9f, 0x9f, 0x9f, 0x9f, 0x9f, 0x9f, 0x9f, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xa5, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xb1, 0xb1, 0xb1, 0xb1, 0xb1, 0xb1, 0xb1, 0xb1, 0xb7, 0xb7, 0xb7, 0xb7, 0xb7, 0xb7, 0xb7, 0xb7, 0xbd, 0xbd, 0xbd, 0xbd, 0xbd, 0xbd, 0xbd, 0xbd, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc9, 0xc9, 0xc9, 0xc9, 0xc9, 0xc9, 0xc9, 0xc9, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xed, 0xf3, 0xf3, 0xf3, 0xf3, 0xf3, 0xf3, 0xf3, 0xf3, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x105, 0x105, 0x105, 0x105, 0x105, 0x105, 0x105, 0x105, 0x10c, 0x10c, 0x10c, 0x10c, 0x112, 0x112, 0x112, 0x112, 0x118, 0x118, 0x118, 0x118, 0x11e, 0x11e, 0x11e, 0x11e, 0x124, 0x124, 0x124, 0x124, 0x12a, 0x12a, 0x12a, 0x12a, 0x130, 0x130, 0x130, 0x130, 0x136, 0x136, 0x136, 0x136, 0x13c, 0x13c, 0x13c, 0x13c, 0x142, 0x142, 0x142, 0x142, 0x148, 0x148, 0x148, 0x148, 0x14e, 0x14e, 0x14e, 0x14e, 0x154, 0x154, 0x154, 0x154, 0x15a, 0x15a, 0x15a, 0x15a, 0x160, 0x160, 0x160, 0x160, 0x166, 0x166, 0x166, 0x166, 0x16c, 0x16c, 0x16c, 0x16c, 0x172, 0x172, 0x172, 0x172, 0x178, 0x178, 0x178, 0x178, 0x17e, 0x17e, 0x17e, 0x17e, 0x184, 0x184, 0x184, 0x184, 0x18a, 0x18a, 0x18a, 0x18a, 0x190, 0x190, 0x190, 0x190, 0x196, 0x196, 0x196, 0x196, 0x19c, 0x19c, 0x19c, 0x19c, 0x1a2, 0x1a2, 0x1a2, 0x1a2, 0x1a8, 0x1a8, 0x1a8, 0x1a8, 0x1ae, 0x1ae, 0x1ae, 0x1ae, 0x1b4, 0x1b4, 0x1b4, 0x1b4, 0x1bb, 0x1c1, 0x1c7, 0x1cd
};
static const uint8_t g_emit_buffer_21[] = {
  0x7c, 0x23, 0x3e
};
static const uint8_t g_emit_op_21[] = {
  0x00, 0x00, 0x03, 0x05
};
template <typename F>
bool DecodeHuff(F sink, const uint8_t* begin, const uint8_t* end) {
  uint64_t buffer = 0;
  uint64_t index;
  size_t emit_ofs;
  int buffer_len = 0;
refill:
  while (buffer_len < 10) {
    if (begin == end) return buffer_len == 0;
    buffer <<= 8;
    buffer |= static_cast<uint64_t>(*begin++);
    buffer_len += 8;
  }
  index = buffer >> (buffer_len - 10);
  emit_ofs = g_emit_op_0[index] / 9;
  switch (g_emit_op_0[index] % 9) {
    case 8: {
      // 0:0/3,1:1fd8/13,2:3ffe2/18,3:3ffe3/18,4:3ffe4/18,5:3ffe5/18,6:3ffe6/18,7:3ffe7/18,8:3ffe8/18,9:3fea/14,10:ffffc/20,11:3ffe9/18,12:3ffea/18,13:ffffd/20,14:3ffeb/18,15:3ffec/18,16:3ffed/18,17:3ffee/18,18:3ffef/18,19:3fff0/18,20:3fff1/18,21:3fff2/18,22:ffffe/20,23:3fff3/18,24:3fff4/18,25:3fff5/18,26:3fff6/18,27:3fff7/18,28:3fff8/18,29:3fff9/18,30:3fffa/18,31:3fffb/18,36:1/3,60:1c/5,64:2/3,91:3/3,92:1f0/9,93:4/3,94:c/4,96:1d/5,123:1e/5,125:d/4,126:5/3,127:3fffc/18,128:3e6/10,129:fd2/12,130:3e7/10,131:3e8/10,132:fd3/12,133:fd4/12,134:fd5/12,135:1fd9/13,136:fd6/12,137:1fda/13,138:1fdb/13,139:1fdc/13,140:1fdd/13,141:1fde/13,142:3feb/14,143:1fdf/13,144:3fec/14,145:3fed/14,146:fd7/12,147:1fe0/13,148:3fee/14,149:1fe1/13,150:1fe2/13,151:1fe3/13,152:1fe4/13,153:7dc/11,154:fd8/12,155:1fe5/13,156:fd9/12,157:1fe6/13,158:1fe7/13,159:3fef/14,160:fda/12,161:7dd/11,162:3e9/10,163:fdb/12,164:fdc/12,165:1fe8/13,166:1fe9/13,167:7de/11,168:1fea/13,169:fdd/12,170:fde/12,171:3ff0/14,172:7df/11,173:fdf/12,174:1feb/13,175:1fec/13,176:7e0/11,177:7e1/11,178:fe0/12,179:7e2/11,180:1fed/13,181:fe1/12,182:1fee/13,183:1fef/13,184:3ea/10,185:fe2/12,186:fe3/12,187:fe4/12,188:1ff0/13,189:fe5/12,190:fe6/12,191:1ff1/13,192:ffe0/16,193:ffe1/16,194:3eb/10,195:1f1/9,196:fe7/12,197:1ff2/13,198:fe8/12,199:7fec/15,200:ffe2/16,201:ffe3/16,202:ffe4/16,203:1ffde/17,204:1ffdf/17,205:ffe5/16,206:3ff1/14,207:7fed/15,208:1f2/9,209:7e3/11,210:ffe6/16,211:1ffe0/17,212:1ffe1/17,213:ffe7/16,214:1ffe2/17,215:3ff2/14,216:7e4/11,217:7e5/11,218:ffe8/16,219:ffe9/16,220:3fffd/18,221:1ffe3/17,222:1ffe4/17,223:1ffe5/17,224:3ec/10,225:3ff3/14,226:3ed/10,227:7e6/11,228:fe9/12,229:7e7/11,230:7e8/11,231:1ff3/13,232:fea/12,233:feb/12,234:7fee/15,235:7fef/15,236:3ff4/14,237:3ff5/14,238:ffea/16,239:1ff4/13,240:ffeb/16,241:1ffe6/17,242:ffec/16,243:ffed/16,244:1ffe7/17,245:1ffe8/17,246:1ffe9/17,247:1ffea/17,248:1ffeb/17,249:3fffe/18,250:1ffec/17,251:1ffed/17,252:1ffee/17,253:1ffef/17,254:1fff0/17,255:ffee/16,256:fffff/20
      buffer_len -= 10;
      while (buffer_len < 10) {
        if (begin == end) return buffer_len == 0;
        buffer <<= 8;
        buffer |= static_cast<uint64_t>(*begin++);
        buffer_len += 8;
      }
      index = buffer >> (buffer_len - 10);
      emit_ofs = g_emit_op_2[index] / 23;
      switch (g_emit_op_2[index] % 23) {
        case 11: {
          // 129:2/2,132:3/2,230:0/1
          buffer_len -= 10;
          while (buffer_len < 2) {
            if (begin == end) return buffer_len == 0;
            buffer <<= 8;
            buffer |= static_cast<uint64_t>(*begin++);
            buffer_len += 8;
          }
          index = buffer >> (buffer_len - 2);
          emit_ofs = g_emit_op_18[index] / 2;
          switch (g_emit_op_18[index] % 2) {
            case 0: {
              sink(g_emit_buffer_18[emit_ofs + 0]);
              buffer_len -= 21;
              goto refill;
            }
            case 1: {
              sink(g_emit_buffer_18[emit_ofs + 0]);
              buffer_len -= 22;
              goto refill;
            }
          }
          break;
        }
        case 12: {
          // 133:0/2,134:1/2,136:2/2,146:3/2
          buffer_len -= 10;
          while (buffer_len < 2) {
            if (begin == end) return buffer_len == 0;
            buffer <<= 8;
            buffer |= static_cast<uint64_t>(*begin++);
            buffer_len += 8;
          }
          index = buffer >> (buffer_len - 2);
          emit_ofs = g_emit_op_9[index] / 1;
          switch (g_emit_op_9[index] % 1) {
            case 0: {
              sink(g_emit_buffer_9[emit_ofs + 0]);
              buffer_len -= 22;
              goto refill;
            }
          }
          break;
        }
        case 19: {
          // 147:0/3,149:1/3,150:2/3,151:3/3,152:4/3,155:5/3,157:6/3,158:7/3
          buffer_len -= 10;
          while (buffer_len < 3) {
            if (begin == end) return buffer_len == 0;
            buffer <<= 8;
            buffer |= static_cast<uint64_t>(*begin++);
            buffer_len += 8;
          }
          index = buffer >> (buffer_len - 3);
          emit_ofs = g_emit_op_16[index] / 1;
          switch (g_emit_op_16[index] % 1) {
            case 0: {
              sink(g_emit_buffer_16[emit_ofs + 0]);
              buffer_len -= 23;
              goto refill;
            }
          }
          break;
        }
        case 5: {
          // 153:0/1,161:1/1
          buffer_len -= 10;
          while (buffer_len < 1) {
            if (begin == end) return buffer_len == 0;
            buffer <<= 8;
            buffer |= static_cast<uint64_t>(*begin++);
            buffer_len += 8;
          }
          index = buffer >> (buffer_len - 1);
          emit_ofs = g_emit_op_3[index] / 1;
          switch (g_emit_op_3[index] % 1) {
            case 0: {
              sink(g_emit_buffer_3[emit_ofs + 0]);
              buffer_len -= 21;
              goto refill;
            }
          }
          break;
        }
        case 13: {
          // 154:0/2,156:1/2,160:2/2,163:3/2
          buffer_len -= 10;
          while (buffer_len < 2) {
            if (begin == end) return buffer_len == 0;
            buffer <<= 8;
            buffer |= static_cast<uint64_t>(*begin++);
            buffer_len += 8;
          }
          index = buffer >> (buffer_len - 2);
          emit_ofs = g_emit_op_10[index] / 1;
          switch (g_emit_op_10[index] % 1) {
            case 0: {
              sink(g_emit_buffer_10[emit_ofs + 0]);
              buffer_len -= 22;
              goto refill;
            }
          }
          break;
        }
        case 14: {
          // 164:0/2,169:1/2,170:2/2,173:3/2
          buffer_len -= 10;
          while (buffer_len < 2) {
            if (begin == end) return buffer_len == 0;
            buffer <<= 8;
            buffer |= static_cast<uint64_t>(*begin++);
            buffer_len += 8;
          }
          index = buffer >> (buffer_len - 2);
          emit_ofs = g_emit_op_11[index] / 1;
          switch (g_emit_op_11[index] % 1) {
            case 0: {
              sink(g_emit_buffer_11[emit_ofs + 0]);
              buffer_len -= 22;
              goto refill;
            }
          }
          break;
        }
        case 20: {
          // 165:0/3,166:1/3,168:2/3,174:3/3,175:4/3,180:5/3,182:6/3,183:7/3
          buffer_len -= 10;
          while (buffer_len < 3) {
            if (begin == end) return buffer_len == 0;
            buffer <<= 8;
            buffer |= static_cast<uint64_t>(*begin++);
            buffer_len += 8;
          }
          index = buffer >> (buffer_len - 3);
          emit_ofs = g_emit_op_17[index] / 1;
          switch (g_emit_op_17[index] % 1) {
            case 0: {
              sink(g_emit_buffer_17[emit_ofs + 0]);
              buffer_len -= 23;
              goto refill;
            }
          }
          break;
        }
        case 6: {
          // 167:0/1,172:1/1
          buffer_len -= 10;
          while (buffer_len < 1) {
            if (begin == end) return buffer_len == 0;
            buffer <<= 8;
            buffer |= static_cast<uint64_t>(*begin++);
            buffer_len += 8;
          }
          index = buffer >> (buffer_len - 1);
          emit_ofs = g_emit_op_4[index] / 1;
          switch (g_emit_op_4[index] % 1) {
            case 0: {
              sink(g_emit_buffer_4[emit_ofs + 0]);
              buffer_len -= 21;
              goto refill;
            }
          }
          break;
        }
        case 7: {
          // 176:0/1,177:1/1
          buffer_len -= 10;
          while (buffer_len < 1) {
            if (begin == end) return buffer_len == 0;
            buffer <<= 8;
            buffer |= static_cast<uint64_t>(*begin++);
            buffer_len += 8;
          }
          index = buffer >> (buffer_len - 1);
          emit_ofs = g_emit_op_5[index] / 1;
          switch (g_emit_op_5[index] % 1) {
            case 0: {
              sink(g_emit_buffer_5[emit_ofs + 0]);
              buffer_len -= 21;
              goto refill;
            }
          }
          break;
        }
        case 15: {
          // 178:0/2,181:1/2,185:2/2,186:3/2
          buffer_len -= 10;
          while (buffer_len < 2) {
            if (begin == end) return buffer_len == 0;
            buffer <<= 8;
            buffer |= static_cast<uint64_t>(*begin++);
            buffer_len += 8;
          }
          index = buffer >> (buffer_len - 2);
          emit_ofs = g_emit_op_12[index] / 1;
          switch (g_emit_op_12[index] % 1) {
            case 0: {
              sink(g_emit_buffer_12[emit_ofs + 0]);
              buffer_len -= 22;
              goto refill;
            }
          }
          break;
        }
        case 8: {
          // 179:0/1,209:1/1
          buffer_len -= 10;
          while (buffer_len < 1) {
            if (begin == end) return buffer_len == 0;
            buffer <<= 8;
            buffer |= static_cast<uint64_t>(*begin++);
            buffer_len += 8;
          }
          index = buffer >> (buffer_len - 1);
          emit_ofs = g_emit_op_6[index] / 1;
          switch (g_emit_op_6[index] % 1) {
            case 0: {
              sink(g_emit_buffer_6[emit_ofs + 0]);
              buffer_len -= 21;
              goto refill;
            }
          }
          break;
        }
        case 16: {
          // 187:0/2,189:1/2,190:2/2,196:3/2
          buffer_len -= 10;
          while (buffer_len < 2) {
            if (begin == end) return buffer_len == 0;
            buffer <<= 8;
            buffer |= static_cast<uint64_t>(*begin++);
            buffer_len += 8;
          }
          index = buffer >> (buffer_len - 2);
          emit_ofs = g_emit_op_13[index] / 1;
          switch (g_emit_op_13[index] % 1) {
            case 0: {
              sink(g_emit_buffer_13[emit_ofs + 0]);
              buffer_len -= 22;
              goto refill;
            }
          }
          break;
        }
        case 17: {
          // 198:0/2,228:1/2,232:2/2,233:3/2
          buffer_len -= 10;
          while (buffer_len < 2) {
            if (begin == end) return buffer_len == 0;
            buffer <<= 8;
            buffer |= static_cast<uint64_t>(*begin++);
            buffer_len += 8;
          }
          index = buffer >> (buffer_len - 2);
          emit_ofs = g_emit_op_14[index] / 1;
          switch (g_emit_op_14[index] % 1) {
            case 0: {
              sink(g_emit_buffer_14[emit_ofs + 0]);
              buffer_len -= 22;
              goto refill;
            }
          }
          break;
        }
        case 18: {
          // 1:0/3,135:1/3,137:2/3,138:3/3,139:4/3,140:5/3,141:6/3,143:7/3
          buffer_len -= 10;
          while (buffer_len < 3) {
            if (begin == end) return buffer_len == 0;
            buffer <<= 8;
            buffer |= static_cast<uint64_t>(*begin++);
            buffer_len += 8;
          }
          index = buffer >> (buffer_len - 3);
          emit_ofs = g_emit_op_15[index] / 1;
          switch (g_emit_op_15[index] % 1) {
            case 0: {
              sink(g_emit_buffer_15[emit_ofs + 0]);
              buffer_len -= 23;
              goto refill;
            }
          }
          break;
        }
        case 9: {
          // 216:0/1,217:1/1
          buffer_len -= 10;
          while (buffer_len < 1) {
            if (begin == end) return buffer_len == 0;
            buffer <<= 8;
            buffer |= static_cast<uint64_t>(*begin++);
            buffer_len += 8;
          }
          index = buffer >> (buffer_len - 1);
          emit_ofs = g_emit_op_7[index] / 1;
          switch (g_emit_op_7[index] % 1) {
            case 0: {
              sink(g_emit_buffer_7[emit_ofs + 0]);
              buffer_len -= 21;
              goto refill;
            }
          }
          break;
        }
        case 10: {
          // 227:0/1,229:1/1
          buffer_len -= 10;
          while (buffer_len < 1) {
            if (begin == end) return buffer_len == 0;
            buffer <<= 8;
            buffer |= static_cast<uint64_t>(*begin++);
            buffer_len += 8;
          }
          index = buffer >> (buffer_len - 1);
          emit_ofs = g_emit_op_8[index] / 1;
          switch (g_emit_op_8[index] % 1) {
            case 0: {
              sink(g_emit_buffer_8[emit_ofs + 0]);
              buffer_len -= 21;
              goto refill;
            }
          }
          break;
        }
        case 22: {
          // 2:e2/8,3:e3/8,4:e4/8,5:e5/8,6:e6/8,7:e7/8,8:e8/8,10:3fc/10,11:e9/8,12:ea/8,13:3fd/10,14:eb/8,15:ec/8,16:ed/8,17:ee/8,18:ef/8,19:f0/8,20:f1/8,21:f2/8,22:3fe/10,23:f3/8,24:f4/8,25:f5/8,26:f6/8,27:f7/8,28:f8/8,29:f9/8,30:fa/8,31:fb/8,127:fc/8,171:0/4,192:20/6,193:21/6,199:c/5,200:22/6,201:23/6,202:24/6,203:5e/7,204:5f/7,205:25/6,206:1/4,207:d/5,210:26/6,211:60/7,212:61/7,213:27/6,214:62/7,215:2/4,218:28/6,219:29/6,220:fd/8,221:63/7,222:64/7,223:65/7,225:3/4,234:e/5,235:f/5,236:4/4,237:5/4,238:2a/6,240:2b/6,241:66/7,242:2c/6,243:2d/6,244:67/7,245:68/7,246:69/7,247:6a/7,248:6b/7,249:fe/8,250:6c/7,251:6d/7,252:6e/7,253:6f/7,254:70/7,255:2e/6,256:3ff/10
          buffer_len -= 10;
          while (buffer_len < 10) {
            if (begin == end) return buffer_len == 0;
            buffer <<= 8;
            buffer |= static_cast<uint64_t>(*begin++);
            buffer_len += 8;
          }
          index = buffer >> (buffer_len - 10);
          emit_ofs = g_emit_op_20[index] / 6;
          switch (g_emit_op_20[index] % 6) {
            case 0: {
              sink(g_emit_buffer_20[emit_ofs + 0]);
              buffer_len -= 24;
              goto refill;
            }
            case 1: {
              sink(g_emit_buffer_20[emit_ofs + 0]);
              buffer_len -= 25;
              goto refill;
            }
            case 2: {
              sink(g_emit_buffer_20[emit_ofs + 0]);
              buffer_len -= 26;
              goto refill;
            }
            case 3: {
              sink(g_emit_buffer_20[emit_ofs + 0]);
              buffer_len -= 27;
              goto refill;
            }
            case 4: {
              sink(g_emit_buffer_20[emit_ofs + 0]);
              buffer_len -= 28;
              goto refill;
            }
            case 5: {
              sink(g_emit_buffer_20[emit_ofs + 0]);
              buffer_len -= 30;
              goto refill;
            }
          }
          break;
        }
        case 21: {
          // 9:a/4,142:b/4,144:c/4,145:d/4,148:e/4,159:f/4,188:0/3,191:1/3,197:2/3,231:3/3,239:4/3
          buffer_len -= 10;
          while (buffer_len < 4) {
            if (begin == end) return buffer_len == 0;
            buffer <<= 8;
            buffer |= static_cast<uint64_t>(*begin++);
            buffer_len += 8;
          }
          index = buffer >> (buffer_len - 4);
          emit_ofs = g_emit_op_19[index] / 2;
          switch (g_emit_op_19[index] % 2) {
            case 0: {
              sink(g_emit_buffer_19[emit_ofs + 0]);
              buffer_len -= 23;
              goto refill;
            }
            case 1: {
              sink(g_emit_buffer_19[emit_ofs + 0]);
              buffer_len -= 24;
              goto refill;
            }
          }
          break;
        }
        case 0: {
          sink(g_emit_buffer_2[emit_ofs + 0]);
          buffer_len -= 13;
          goto refill;
        }
        case 1: {
          sink(g_emit_buffer_2[emit_ofs + 0]);
          buffer_len -= 14;
          goto refill;
        }
        case 2: {
          sink(g_emit_buffer_2[emit_ofs + 0]);
          buffer_len -= 15;
          goto refill;
        }
        case 3: {
          sink(g_emit_buffer_2[emit_ofs + 0]);
          buffer_len -= 19;
          goto refill;
        }
        case 4: {
          sink(g_emit_buffer_2[emit_ofs + 0]);
          buffer_len -= 20;
          goto refill;
        }
      }
      break;
    }
    case 7: {
      // 35:2/2,62:3/2,124:0/1
      buffer_len -= 10;
      while (buffer_len < 2) {
        if (begin == end) return buffer_len == 0;
        buffer <<= 8;
        buffer |= static_cast<uint64_t>(*begin++);
        buffer_len += 8;
      }
      index = buffer >> (buffer_len - 2);
      emit_ofs = g_emit_op_21[index] / 2;
      switch (g_emit_op_21[index] % 2) {
        case 0: {
          sink(g_emit_buffer_21[emit_ofs + 0]);
          buffer_len -= 11;
          goto refill;
        }
        case 1: {
          sink(g_emit_buffer_21[emit_ofs + 0]);
          buffer_len -= 12;
          goto refill;
        }
      }
      break;
    }
    case 6: {
      // 39:0/1,43:1/1
      buffer_len -= 10;
      while (buffer_len < 1) {
        if (begin == end) return buffer_len == 0;
        buffer <<= 8;
        buffer |= static_cast<uint64_t>(*begin++);
        buffer_len += 8;
      }
      index = buffer >> (buffer_len - 1);
      emit_ofs = g_emit_op_1[index] / 1;
      switch (g_emit_op_1[index] % 1) {
        case 0: {
          sink(g_emit_buffer_1[emit_ofs + 0]);
          buffer_len -= 11;
          goto refill;
        }
      }
      break;
    }
    case 5: {
      sink(g_emit_buffer_0[emit_ofs + 0]);
      buffer_len -= 10;
      goto refill;
    }
    case 1: {
      sink(g_emit_buffer_0[emit_ofs + 0]);
      buffer_len -= 5;
      goto refill;
    }
    case 2: {
      sink(g_emit_buffer_0[emit_ofs + 0]);
      buffer_len -= 6;
      goto refill;
    }
    case 3: {
      sink(g_emit_buffer_0[emit_ofs + 0]);
      buffer_len -= 7;
      goto refill;
    }
    case 4: {
      sink(g_emit_buffer_0[emit_ofs + 0]);
      buffer_len -= 8;
      goto refill;
    }
    case 0: {
      sink(g_emit_buffer_0[emit_ofs + 0]);
      sink(g_emit_buffer_0[emit_ofs + 1]);
      buffer_len -= 10;
      goto refill;
    }
  }
  abort();
}
