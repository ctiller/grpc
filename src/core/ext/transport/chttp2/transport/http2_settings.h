/*
 * Copyright 2017 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Automatically generated by tools/codegen/core/gen_settings_ids.py
 */

#ifndef GRPC_CORE_EXT_TRANSPORT_CHTTP2_TRANSPORT_HTTP2_SETTINGS_H
#define GRPC_CORE_EXT_TRANSPORT_CHTTP2_TRANSPORT_HTTP2_SETTINGS_H

#include <grpc/support/port_platform.h>

#include <stdint.h>

#include "absl/types/variant.h"

#include "src/core/ext/transport/chttp2/transport/frame.h"
#include "src/core/lib/channel/channel_args.h"
#include "src/core/lib/gpr/useful.h"
#include "src/core/lib/transport/http2_errors.h"

namespace grpc_core {
class Http2Settings {
 public:
  struct Traits {
    static absl::optional<Traits> FromId(uint16_t id);
    absl::string_view name;
    uint32_t min;
    uint32_t max;
  };
  void SetHeaderTableSize(uint32_t header_table_size) {
    header_table_size_ = header_table_size;
  }
  uint32_t header_table_size() const { return header_table_size_; }
  static Traits header_table_size_traits() {
    return Traits{"header_table_size", 0, 4294967295};
  }
  void SetEnablePush(uint32_t enable_push) {
    enable_push_ = std::min<uint32_t>(enable_push, 1);
  }
  uint32_t enable_push() const { return enable_push_; }
  static Traits enable_push_traits() { return Traits{"enable_push", 0, 1}; }
  void SetMaxConcurrentStreams(uint32_t max_concurrent_streams) {
    max_concurrent_streams_ = max_concurrent_streams;
  }
  uint32_t max_concurrent_streams() const { return max_concurrent_streams_; }
  static Traits max_concurrent_streams_traits() {
    return Traits{"max_concurrent_streams", 0, 4294967295};
  }
  void SetInitialWindowSize(uint32_t initial_window_size) {
    initial_window_size_ = std::min<uint32_t>(initial_window_size, 2147483647);
  }
  uint32_t initial_window_size() const { return initial_window_size_; }
  static Traits initial_window_size_traits() {
    return Traits{"initial_window_size", 0, 2147483647};
  }
  void SetMaxFrameSize(uint32_t max_frame_size) {
    max_frame_size_ = Clamp<uint32_t>(max_frame_size, 16384, 16777215);
  }
  uint32_t max_frame_size() const { return max_frame_size_; }
  static Traits max_frame_size_traits() {
    return Traits{"max_frame_size", 16384, 16777215};
  }
  void SetMaxHeaderListSize(uint32_t max_header_list_size) {
    max_header_list_size_ = std::min<uint32_t>(max_header_list_size, 16777216);
  }
  uint32_t max_header_list_size() const { return max_header_list_size_; }
  static Traits max_header_list_size_traits() {
    return Traits{"max_header_list_size", 0, 16777216};
  }
  void SetGrpcAllowTrueBinaryMetadata(
      uint32_t grpc_allow_true_binary_metadata) {
    grpc_allow_true_binary_metadata_ =
        std::min<uint32_t>(grpc_allow_true_binary_metadata, 1);
  }
  uint32_t grpc_allow_true_binary_metadata() const {
    return grpc_allow_true_binary_metadata_;
  }
  static Traits grpc_allow_true_binary_metadata_traits() {
    return Traits{"grpc_allow_true_binary_metadata", 0, 1};
  }
  void SetGrpcPreferredReceiveCryptoFrameSize(
      uint32_t grpc_preferred_receive_crypto_frame_size) {
    grpc_preferred_receive_crypto_frame_size_ = Clamp<uint32_t>(
        grpc_preferred_receive_crypto_frame_size, 16384, 2147483647);
  }
  uint32_t grpc_preferred_receive_crypto_frame_size() const {
    return grpc_preferred_receive_crypto_frame_size_;
  }
  static Traits grpc_preferred_receive_crypto_frame_size_traits() {
    return Traits{"grpc_preferred_receive_crypto_frame_size", 16384,
                  2147483647};
  }
  bool operator==(const Http2Settings& other) const {
    return header_table_size_ == other.header_table_size_ &&
           enable_push_ == other.enable_push_ &&
           max_concurrent_streams_ == other.max_concurrent_streams_ &&
           initial_window_size_ == other.initial_window_size_ &&
           max_frame_size_ == other.max_frame_size_ &&
           max_header_list_size_ == other.max_header_list_size_ &&
           grpc_allow_true_binary_metadata_ ==
               other.grpc_allow_true_binary_metadata_ &&
           grpc_preferred_receive_crypto_frame_size_ ==
               other.grpc_preferred_receive_crypto_frame_size_;
  }
  struct ParseError {
    grpc_http2_error_code error;
    absl::string_view message;
  };
  using ParseResult = absl::variant<Http2Settings, ParseError>;
  ParseResult FromIncomingFrame(const Http2SettingsFrame& frame) const;
  Http2Settings FromClientChannelArgs(const ChannelArgs& args) const;
  Http2Settings FromServerChannelArgs(const ChannelArgs& args) const;
  Http2SettingsFrame CreateUpdateFromBasis(Http2Settings basis,
                                           bool is_first_send) const;

 private:
  uint32_t header_table_size_ = 4096;
  uint32_t enable_push_ = 1;
  uint32_t max_concurrent_streams_ = 4294967295;
  uint32_t initial_window_size_ = 65535;
  uint32_t max_frame_size_ = 16384;
  uint32_t max_header_list_size_ = 16777216;
  uint32_t grpc_allow_true_binary_metadata_ = 0;
  uint32_t grpc_preferred_receive_crypto_frame_size_ = 0;
};
}  // namespace grpc_core

#endif /* GRPC_CORE_EXT_TRANSPORT_CHTTP2_TRANSPORT_HTTP2_SETTINGS_H */
