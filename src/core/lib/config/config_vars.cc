/*
 * Copyright 2022 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Automatically generated by tools/codegen/core/gen_config_vars.py
 */

#include <grpc/support/port_platform.h>

#include "src/core/lib/config/config_vars.h"

#include "src/core/lib/config/load_config_var.h"

namespace {
const char* const description_client_channel_backup_poll_interval_ms =
    "Declares the interval in ms between two backup polls on client channels. "
    "These polls are run in the timer thread so that gRPC can process "
    "connection failures while there is no active polling thread. They help "
    "reconnect disconnected client channels (mostly due to idleness), so that "
    "the next RPC on this channel won't fail. Set to 0 to turn off the backup "
    "polls.";
const char* const description_dns_resolver =
    "Declares which DNS resolver to use. The default is ares if gRPC is built "
    "with c-ares support. Otherwise, the value of this environment variable is "
    "ignored.";
const char* const default_dns_resolver = "";
const char* const description_enable_peer_state_based_framing =
    "If set, the max sizes of frames sent to lower layers is controlled based "
    "on the peer's memory pressure which is reflected in its max http2 frame "
    "size.";
const char* const description_broad_flow_control_range =
    "Use an enlarged memory pressure range for scaling flow control when using "
    "a resource quota.";
const char* const description_trace =
    "A comma separated list of tracers that provide additional insight into "
    "how gRPC C core is processing requests via debug logs.";
const char* const default_trace = "";
const char* const description_verbosity = "Default gRPC logging verbosity";
const char* const default_verbosity = "GPR_DEFAULT_LOG_VERBOSITY_STRING";
const char* const description_stacktrace_minloglevel =
    "Messages logged at the same or higher level than this will print "
    "stacktrace";
const char* const default_stacktrace_minloglevel = "";
const char* const description_enable_fork_support = "Enable fork support";
const char* const description_poll_strategy =
    "Declares which polling engines to try when starting gRPC. This is a "
    "comma-separated list of engines, which are tried in priority order first "
    "-> last.";
const char* const default_poll_strategy = "all";
const char* const description_abort_on_leaks =
    "A debugging aid to cause a call to abort() when gRPC objects are leaked "
    "past grpc_shutdown()";
const char* const description_enable_tcp_frame_size_tuning =
    "If set, enables TCP to use RPC size estimation made by higher layers. TCP "
    "would not indicate completion of a read operation until a specified "
    "number of bytes have been read over the socket. Buffers are also "
    "allocated according to estimated RPC sizes.";
const char* const description_smooth_memory_pressure =
    "Smooth the value of memory pressure over time";
const char* const description_enable_periodic_resource_quota_reclamation =
    "Enable experimental feature to reclaim resource quota periodically";
const char* const description_max_quota_buffer_size =
    "Maximum size for one memory allocators buffer size against a quota";
const char* const description_resource_quota_set_point =
    "Ask the resource quota to target this percentage of total quota usage.";
const char* const description_system_ssl_roots_dir =
    "Custom directory to SSL Roots";
const char* const default_system_ssl_roots_dir = "";
const char* const description_default_ssl_roots_file_path =
    "Path to the default SSL roots file.";
const char* const default_default_ssl_roots_file_path = "";
const char* const description_not_use_system_ssl_roots =
    "Disable loading system root certificates.";
const char* const description_ssl_cipher_suites =
    "A colon separated list of cipher suites to use with OpenSSL";
const char* const default_ssl_cipher_suites =
    "TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_"
    "SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-"
    "RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384";
}  // namespace

namespace grpc_core {

ConfigVars::ConfigVars(LoadFunction load)
    : grpc_client_channel_backup_poll_interval_ms_(
          LoadConfigVar(load("client_channel_backup_poll_interval_ms"), 5000)),
      grpc_experimental_max_quota_buffer_size_(
          LoadConfigVar(load("max_quota_buffer_size"), 1024 * 1024)),
      grpc_experimental_resource_quota_set_point_(
          LoadConfigVar(load("resource_quota_set_point"), 95)),
      grpc_experimental_enable_peer_state_based_framing_(
          LoadConfigVar(load("enable_peer_state_based_framing"), false)),
      grpc_experimental_broad_flow_control_range_(
          LoadConfigVar(load("broad_flow_control_range"), false)),
      grpc_enable_fork_support_(
          LoadConfigVar(load("enable_fork_support"), true)),
      grpc_abort_on_leaks_(LoadConfigVar(load("abort_on_leaks"), false)),
      grpc_experimental_enable_tcp_frame_size_tuning_(
          LoadConfigVar(load("enable_tcp_frame_size_tuning"), false)),
      grpc_experimental_smooth_memory_pressure_(
          LoadConfigVar(load("smooth_memory_pressure"), false)),
      grpc_experimental_enable_periodic_resource_quota_reclamation_(
          LoadConfigVar(load("enable_periodic_resource_quota_reclamation"),
                        false)),
      grpc_not_use_system_ssl_roots_(
          LoadConfigVar(load("not_use_system_ssl_roots"), false)),
      grpc_dns_resolver_(
          LoadConfigVar(load("dns_resolver"), default_dns_resolver)),
      grpc_trace_(LoadConfigVar(load("trace"), default_trace)),
      grpc_verbosity_(LoadConfigVar(load("verbosity"), default_verbosity)),
      grpc_stacktrace_minloglevel_(LoadConfigVar(
          load("stacktrace_minloglevel"), default_stacktrace_minloglevel)),
      grpc_poll_strategy_(
          LoadConfigVar(load("poll_strategy"), default_poll_strategy)),
      grpc_system_ssl_roots_dir_(LoadConfigVar(load("system_ssl_roots_dir"),
                                               default_system_ssl_roots_dir)),
      grpc_default_ssl_roots_file_path_(
          LoadConfigVar(load("default_ssl_roots_file_path"),
                        default_default_ssl_roots_file_path)),
      grpc_ssl_cipher_suites_(LoadConfigVar(load("ssl_cipher_suites"),
                                            default_ssl_cipher_suites)) {}

absl::Span<const ConfigVarMetadata> ConfigVars::metadata() {
  static const auto* metadata = new std::vector<ConfigVarMetadata>{
      {
          "client_channel_backup_poll_interval_ms",
          description_client_channel_backup_poll_interval_ms,
          false,
          ConfigVarMetadata::Int{
              5000, &ConfigVars::ClientChannelBackupPollIntervalMs},
      },
      {
          "dns_resolver",
          description_dns_resolver,
          false,
          ConfigVarMetadata::String{default_dns_resolver,
                                    &ConfigVars::DnsResolver},
      },
      {
          "enable_peer_state_based_framing",
          description_enable_peer_state_based_framing,
          true,
          ConfigVarMetadata::Bool{false,
                                  &ConfigVars::EnablePeerStateBasedFraming},
      },
      {
          "broad_flow_control_range",
          description_broad_flow_control_range,
          true,
          ConfigVarMetadata::Bool{false, &ConfigVars::BroadFlowControlRange},
      },
      {
          "trace",
          description_trace,
          false,
          ConfigVarMetadata::String{default_trace, &ConfigVars::Trace},
      },
      {
          "verbosity",
          description_verbosity,
          false,
          ConfigVarMetadata::String{default_verbosity, &ConfigVars::Verbosity},
      },
      {
          "stacktrace_minloglevel",
          description_stacktrace_minloglevel,
          false,
          ConfigVarMetadata::String{default_stacktrace_minloglevel,
                                    &ConfigVars::StacktraceMinloglevel},
      },
      {
          "enable_fork_support",
          description_enable_fork_support,
          false,
          ConfigVarMetadata::Bool{true, &ConfigVars::EnableForkSupport},
      },
      {
          "poll_strategy",
          description_poll_strategy,
          false,
          ConfigVarMetadata::String{default_poll_strategy,
                                    &ConfigVars::PollStrategy},
      },
      {
          "abort_on_leaks",
          description_abort_on_leaks,
          false,
          ConfigVarMetadata::Bool{false, &ConfigVars::AbortOnLeaks},
      },
      {
          "enable_tcp_frame_size_tuning",
          description_enable_tcp_frame_size_tuning,
          true,
          ConfigVarMetadata::Bool{false, &ConfigVars::EnableTcpFrameSizeTuning},
      },
      {
          "smooth_memory_pressure",
          description_smooth_memory_pressure,
          true,
          ConfigVarMetadata::Bool{false, &ConfigVars::SmoothMemoryPressure},
      },
      {
          "enable_periodic_resource_quota_reclamation",
          description_enable_periodic_resource_quota_reclamation,
          true,
          ConfigVarMetadata::Bool{
              false, &ConfigVars::EnablePeriodicResourceQuotaReclamation},
      },
      {
          "max_quota_buffer_size",
          description_max_quota_buffer_size,
          true,
          ConfigVarMetadata::Int{1024 * 1024, &ConfigVars::MaxQuotaBufferSize},
      },
      {
          "resource_quota_set_point",
          description_resource_quota_set_point,
          true,
          ConfigVarMetadata::Int{95, &ConfigVars::ResourceQuotaSetPoint},
      },
      {
          "system_ssl_roots_dir",
          description_system_ssl_roots_dir,
          false,
          ConfigVarMetadata::String{default_system_ssl_roots_dir,
                                    &ConfigVars::SystemSslRootsDir},
      },
      {
          "default_ssl_roots_file_path",
          description_default_ssl_roots_file_path,
          false,
          ConfigVarMetadata::String{default_default_ssl_roots_file_path,
                                    &ConfigVars::DefaultSslRootsFilePath},
      },
      {
          "not_use_system_ssl_roots",
          description_not_use_system_ssl_roots,
          false,
          ConfigVarMetadata::Bool{false, &ConfigVars::NotUseSystemSslRoots},
      },
      {
          "ssl_cipher_suites",
          description_ssl_cipher_suites,
          false,
          ConfigVarMetadata::String{default_ssl_cipher_suites,
                                    &ConfigVars::SslCipherSuites},
      },
  };
  return *metadata;
}

}  // namespace grpc_core
