/*
 * Copyright 2022 gRPC authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Automatically generated by tools/codegen/core/gen_config_vars.py
 */

#ifndef GRPC_CORE_LIB_CONFIG_CONFIG_VARS_H
#define GRPC_CORE_LIB_CONFIG_CONFIG_VARS_H

#include <grpc/support/port_platform.h>

#include <string>
#include <functional>
#include "absl/strings/string_view.h"
#include "absl/types/optional.h"
#include "absl/types/span.h"
#include "src/core/lib/config/config_var_metadata.h"

namespace grpc_core {

class ConfigVars {
 public:
  using LoadFunction = std::function<absl::optional<std::string>(absl::string_view)>;
  explicit ConfigVars(LoadFunction load);
  ConfigVars(const ConfigVars&) = delete;
  ConfigVars& operator=(const ConfigVars&) = delete;
  int32_t ClientChannelBackupPollIntervalMs() const { return client_channel_backup_poll_interval_ms_; }
  absl::string_view DnsResolver() const { return dns_resolver_; }
  bool EnablePeerStateBasedFraming() const { return enable_peer_state_based_framing_; }
  bool BroadFlowControlRange() const { return broad_flow_control_range_; }
  absl::string_view Trace() const { return trace_; }
  absl::string_view Verbosity() const { return verbosity_; }
  absl::string_view StacktraceMinloglevel() const { return stacktrace_minloglevel_; }
  bool EnableForkSupport() const { return enable_fork_support_; }
  absl::string_view PollStrategy() const { return poll_strategy_; }
  bool AbortOnLeaks() const { return abort_on_leaks_; }
  bool EnableTcpFrameSizeTuning() const { return enable_tcp_frame_size_tuning_; }
  bool SmoothMemoryPressure() const { return smooth_memory_pressure_; }
  bool EnablePeriodicResourceQuotaReclamation() const { return enable_periodic_resource_quota_reclamation_; }
  int32_t MaxQuotaBufferSize() const { return max_quota_buffer_size_; }
  int32_t ResourceQuotaSetPoint() const { return resource_quota_set_point_; }
  absl::string_view SystemSslRootsDir() const { return system_ssl_roots_dir_; }
  absl::string_view DefaultSslRootsFilePath() const { return default_ssl_roots_file_path_; }
  bool NotUseSystemSslRoots() const { return not_use_system_ssl_roots_; }
  absl::string_view SslCipherSuites() const { return ssl_cipher_suites_; }
  static absl::Span<const ConfigVarMetadata> metadata();
 private:
  int32_t client_channel_backup_poll_interval_ms_;
  int32_t max_quota_buffer_size_;
  int32_t resource_quota_set_point_;
  bool enable_peer_state_based_framing_;
  bool broad_flow_control_range_;
  bool enable_fork_support_;
  bool abort_on_leaks_;
  bool enable_tcp_frame_size_tuning_;
  bool smooth_memory_pressure_;
  bool enable_periodic_resource_quota_reclamation_;
  bool not_use_system_ssl_roots_;
  std::string dns_resolver_;
  std::string trace_;
  std::string verbosity_;
  std::string stacktrace_minloglevel_;
  std::string poll_strategy_;
  std::string system_ssl_roots_dir_;
  std::string default_ssl_roots_file_path_;
  std::string ssl_cipher_suites_;
};

}  // namespace grpc_core

#endif  // GRPC_CORE_LIB_CONFIG_CONFIG_VARS_H
