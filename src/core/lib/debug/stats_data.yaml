# Copyright 2017 gRPC authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Stats data declaration
# use tools / codegen / core / gen_stats_data.py to turn this into stats_data.h

# overall
- counter: client_calls_created
  doc: Number of client side calls created by this process
- counter: server_calls_created
  doc: Number of server side calls created by this process
- histogram: call_initial_size
  max: 262144
  buckets: 64
  doc: Initial size of the grpc_call arena created at call start
- counter: client_channels_created
  doc: Number of client channels created
- counter: client_subchannels_created
  doc: Number of client subchannels created
- counter: server_channels_created
  doc: Number of server channels created
# polling
- counter: syscall_poll
  doc: Number of polling syscalls (epoll_wait, poll, etc) made by this process
- histogram: poll_events_returned
  max: 1024
  buckets: 128
  doc: How many events are called for each syscall_poll
- counter: pollset_kick
  doc: How many polling wakeups were performed by the process
- counter: pollset_kicked_without_poller
  doc: How many times was a polling wakeup requested without an active poller
- counter: pollset_kicked_again
  doc: How many times was the same polling worker awoken repeatedly before
       waking up
- counter: pollset_kick_wakeup_fd
  doc: How many times was an eventfd used as the wakeup vector for a polling
       wakeup
- counter: pollset_kick_wakeup_cv
  doc: How many times was a condition variable used as the wakeup vector for a
       polling wakeup
- counter: pollset_kick_own_thread
  doc: How many times could a polling wakeup be satisfied by keeping the waking
       thread awake?
# stats system
- counter: histogram_slow_lookups
  doc: Number of times histogram increments went through the slow
       (binary search) path
# tcp
- counter: syscall_write
  doc: Number of write syscalls (or equivalent - eg sendmsg) made by this process
- counter: syscall_read
  doc: Number of read syscalls (or equivalent - eg recvmsg) made by this process
- histogram: tcp_write_size
  max: 16777216 # 16 meg max write tracked
  buckets: 64
  doc: Number of bytes offered to each syscall_write
- histogram: tcp_write_iov_size
  max: 1024
  buckets: 64
  doc: Number of byte segments offered to each syscall_write
- counter: tcp_read_alloc_8k
  doc: Number of 8k allocations by the TCP subsystem for reading
- counter: tcp_read_alloc_64k
  doc: Number of 64k allocations by the TCP subsystem for reading
- histogram: tcp_read_size
  max: 16777216
  buckets: 64
  doc: Number of bytes received by each syscall_read
- histogram: tcp_read_offer
  max: 16777216
  buckets: 64
  doc: Number of bytes offered to each syscall_read
- histogram: tcp_read_offer_iov_size
  max: 1024
  buckets: 64
  doc: Number of byte segments offered to each syscall_read
# chttp2
- histogram: http2_send_message_size
  max: 16777216
  buckets: 64
  doc: Size of messages received by HTTP2 transport
- counter: http2_settings_writes
  doc: Number of settings frames sent
- counter: http2_pings_sent
  doc: Number of HTTP2 pings sent by process
- counter: http2_writes_begun
  doc: Number of HTTP2 writes initiated
- counter: http2_transport_stalls
  doc: Number of times sending was completely stalled by the transport flow control window
- counter: http2_stream_stalls
  doc: Number of times sending was completely stalled by the stream flow control window
