/*
 * Copyright 2021 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Automatically generated by tools/codegen/core/gen_join_switch.py
 */

template <typename F0>
class Join<F0> {
 private:
  [[no_unique_address]] uint8_t state_ = 0;
  [[no_unique_address]] Fused<F0> f0_;
  using R0 = typename Fused<F0>::Result;

 public:
  Join(F0 f0) { Construct(&f0_.pending, std::move(f0)); }
  Join& operator=(const Join&) = delete;
  Join(const Join& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
  }
  Join(Join&& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
  }
  ~Join() { f0_.CallDestruct((state_ & 1) != 0); }
  Poll<std::tuple<R0>> operator()() {
    f0_.Poll(&state_, decltype(state_)(1));
    if (state_ != 1) return kPending;
    return ready(std::tuple<R0>(std::move(f0_.ready)));
  }
};
template <typename F0, typename F1>
class Join<F0, F1> {
 private:
  [[no_unique_address]] uint8_t state_ = 0;
  [[no_unique_address]] Fused<F0> f0_;
  using R0 = typename Fused<F0>::Result;
  [[no_unique_address]] Fused<F1> f1_;
  using R1 = typename Fused<F1>::Result;

 public:
  Join(F0 f0, F1 f1) {
    Construct(&f0_.pending, std::move(f0));
    Construct(&f1_.pending, std::move(f1));
  }
  Join& operator=(const Join&) = delete;
  Join(const Join& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
  }
  Join(Join&& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
  }
  ~Join() {
    f0_.CallDestruct((state_ & 1) != 0);
    f1_.CallDestruct((state_ & 2) != 0);
  }
  Poll<std::tuple<R0, R1>> operator()() {
    f0_.Poll(&state_, decltype(state_)(1));
    f1_.Poll(&state_, decltype(state_)(2));
    if (state_ != 3) return kPending;
    return ready(
        std::tuple<R0, R1>(std::move(f0_.ready), std::move(f1_.ready)));
  }
};
template <typename F0, typename F1, typename F2>
class Join<F0, F1, F2> {
 private:
  [[no_unique_address]] uint8_t state_ = 0;
  [[no_unique_address]] Fused<F0> f0_;
  using R0 = typename Fused<F0>::Result;
  [[no_unique_address]] Fused<F1> f1_;
  using R1 = typename Fused<F1>::Result;
  [[no_unique_address]] Fused<F2> f2_;
  using R2 = typename Fused<F2>::Result;

 public:
  Join(F0 f0, F1 f1, F2 f2) {
    Construct(&f0_.pending, std::move(f0));
    Construct(&f1_.pending, std::move(f1));
    Construct(&f2_.pending, std::move(f2));
  }
  Join& operator=(const Join&) = delete;
  Join(const Join& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
  }
  Join(Join&& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
  }
  ~Join() {
    f0_.CallDestruct((state_ & 1) != 0);
    f1_.CallDestruct((state_ & 2) != 0);
    f2_.CallDestruct((state_ & 4) != 0);
  }
  Poll<std::tuple<R0, R1, R2>> operator()() {
    f0_.Poll(&state_, decltype(state_)(1));
    f1_.Poll(&state_, decltype(state_)(2));
    f2_.Poll(&state_, decltype(state_)(4));
    if (state_ != 7) return kPending;
    return ready(std::tuple<R0, R1, R2>(
        std::move(f0_.ready), std::move(f1_.ready), std::move(f2_.ready)));
  }
};
template <typename F0, typename F1, typename F2, typename F3>
class Join<F0, F1, F2, F3> {
 private:
  [[no_unique_address]] uint8_t state_ = 0;
  [[no_unique_address]] Fused<F0> f0_;
  using R0 = typename Fused<F0>::Result;
  [[no_unique_address]] Fused<F1> f1_;
  using R1 = typename Fused<F1>::Result;
  [[no_unique_address]] Fused<F2> f2_;
  using R2 = typename Fused<F2>::Result;
  [[no_unique_address]] Fused<F3> f3_;
  using R3 = typename Fused<F3>::Result;

 public:
  Join(F0 f0, F1 f1, F2 f2, F3 f3) {
    Construct(&f0_.pending, std::move(f0));
    Construct(&f1_.pending, std::move(f1));
    Construct(&f2_.pending, std::move(f2));
    Construct(&f3_.pending, std::move(f3));
  }
  Join& operator=(const Join&) = delete;
  Join(const Join& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
    Construct(&f3_.pending, std::move(other.f3_.pending));
  }
  Join(Join&& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
    Construct(&f3_.pending, std::move(other.f3_.pending));
  }
  ~Join() {
    f0_.CallDestruct((state_ & 1) != 0);
    f1_.CallDestruct((state_ & 2) != 0);
    f2_.CallDestruct((state_ & 4) != 0);
    f3_.CallDestruct((state_ & 8) != 0);
  }
  Poll<std::tuple<R0, R1, R2, R3>> operator()() {
    f0_.Poll(&state_, decltype(state_)(1));
    f1_.Poll(&state_, decltype(state_)(2));
    f2_.Poll(&state_, decltype(state_)(4));
    f3_.Poll(&state_, decltype(state_)(8));
    if (state_ != 15) return kPending;
    return ready(
        std::tuple<R0, R1, R2, R3>(std::move(f0_.ready), std::move(f1_.ready),
                                   std::move(f2_.ready), std::move(f3_.ready)));
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4>
class Join<F0, F1, F2, F3, F4> {
 private:
  [[no_unique_address]] uint8_t state_ = 0;
  [[no_unique_address]] Fused<F0> f0_;
  using R0 = typename Fused<F0>::Result;
  [[no_unique_address]] Fused<F1> f1_;
  using R1 = typename Fused<F1>::Result;
  [[no_unique_address]] Fused<F2> f2_;
  using R2 = typename Fused<F2>::Result;
  [[no_unique_address]] Fused<F3> f3_;
  using R3 = typename Fused<F3>::Result;
  [[no_unique_address]] Fused<F4> f4_;
  using R4 = typename Fused<F4>::Result;

 public:
  Join(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4) {
    Construct(&f0_.pending, std::move(f0));
    Construct(&f1_.pending, std::move(f1));
    Construct(&f2_.pending, std::move(f2));
    Construct(&f3_.pending, std::move(f3));
    Construct(&f4_.pending, std::move(f4));
  }
  Join& operator=(const Join&) = delete;
  Join(const Join& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
    Construct(&f3_.pending, std::move(other.f3_.pending));
    Construct(&f4_.pending, std::move(other.f4_.pending));
  }
  Join(Join&& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
    Construct(&f3_.pending, std::move(other.f3_.pending));
    Construct(&f4_.pending, std::move(other.f4_.pending));
  }
  ~Join() {
    f0_.CallDestruct((state_ & 1) != 0);
    f1_.CallDestruct((state_ & 2) != 0);
    f2_.CallDestruct((state_ & 4) != 0);
    f3_.CallDestruct((state_ & 8) != 0);
    f4_.CallDestruct((state_ & 16) != 0);
  }
  Poll<std::tuple<R0, R1, R2, R3, R4>> operator()() {
    f0_.Poll(&state_, decltype(state_)(1));
    f1_.Poll(&state_, decltype(state_)(2));
    f2_.Poll(&state_, decltype(state_)(4));
    f3_.Poll(&state_, decltype(state_)(8));
    f4_.Poll(&state_, decltype(state_)(16));
    if (state_ != 31) return kPending;
    return ready(std::tuple<R0, R1, R2, R3, R4>(
        std::move(f0_.ready), std::move(f1_.ready), std::move(f2_.ready),
        std::move(f3_.ready), std::move(f4_.ready)));
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5>
class Join<F0, F1, F2, F3, F4, F5> {
 private:
  [[no_unique_address]] uint8_t state_ = 0;
  [[no_unique_address]] Fused<F0> f0_;
  using R0 = typename Fused<F0>::Result;
  [[no_unique_address]] Fused<F1> f1_;
  using R1 = typename Fused<F1>::Result;
  [[no_unique_address]] Fused<F2> f2_;
  using R2 = typename Fused<F2>::Result;
  [[no_unique_address]] Fused<F3> f3_;
  using R3 = typename Fused<F3>::Result;
  [[no_unique_address]] Fused<F4> f4_;
  using R4 = typename Fused<F4>::Result;
  [[no_unique_address]] Fused<F5> f5_;
  using R5 = typename Fused<F5>::Result;

 public:
  Join(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5) {
    Construct(&f0_.pending, std::move(f0));
    Construct(&f1_.pending, std::move(f1));
    Construct(&f2_.pending, std::move(f2));
    Construct(&f3_.pending, std::move(f3));
    Construct(&f4_.pending, std::move(f4));
    Construct(&f5_.pending, std::move(f5));
  }
  Join& operator=(const Join&) = delete;
  Join(const Join& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
    Construct(&f3_.pending, std::move(other.f3_.pending));
    Construct(&f4_.pending, std::move(other.f4_.pending));
    Construct(&f5_.pending, std::move(other.f5_.pending));
  }
  Join(Join&& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
    Construct(&f3_.pending, std::move(other.f3_.pending));
    Construct(&f4_.pending, std::move(other.f4_.pending));
    Construct(&f5_.pending, std::move(other.f5_.pending));
  }
  ~Join() {
    f0_.CallDestruct((state_ & 1) != 0);
    f1_.CallDestruct((state_ & 2) != 0);
    f2_.CallDestruct((state_ & 4) != 0);
    f3_.CallDestruct((state_ & 8) != 0);
    f4_.CallDestruct((state_ & 16) != 0);
    f5_.CallDestruct((state_ & 32) != 0);
  }
  Poll<std::tuple<R0, R1, R2, R3, R4, R5>> operator()() {
    f0_.Poll(&state_, decltype(state_)(1));
    f1_.Poll(&state_, decltype(state_)(2));
    f2_.Poll(&state_, decltype(state_)(4));
    f3_.Poll(&state_, decltype(state_)(8));
    f4_.Poll(&state_, decltype(state_)(16));
    f5_.Poll(&state_, decltype(state_)(32));
    if (state_ != 63) return kPending;
    return ready(std::tuple<R0, R1, R2, R3, R4, R5>(
        std::move(f0_.ready), std::move(f1_.ready), std::move(f2_.ready),
        std::move(f3_.ready), std::move(f4_.ready), std::move(f5_.ready)));
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6>
class Join<F0, F1, F2, F3, F4, F5, F6> {
 private:
  [[no_unique_address]] uint8_t state_ = 0;
  [[no_unique_address]] Fused<F0> f0_;
  using R0 = typename Fused<F0>::Result;
  [[no_unique_address]] Fused<F1> f1_;
  using R1 = typename Fused<F1>::Result;
  [[no_unique_address]] Fused<F2> f2_;
  using R2 = typename Fused<F2>::Result;
  [[no_unique_address]] Fused<F3> f3_;
  using R3 = typename Fused<F3>::Result;
  [[no_unique_address]] Fused<F4> f4_;
  using R4 = typename Fused<F4>::Result;
  [[no_unique_address]] Fused<F5> f5_;
  using R5 = typename Fused<F5>::Result;
  [[no_unique_address]] Fused<F6> f6_;
  using R6 = typename Fused<F6>::Result;

 public:
  Join(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6) {
    Construct(&f0_.pending, std::move(f0));
    Construct(&f1_.pending, std::move(f1));
    Construct(&f2_.pending, std::move(f2));
    Construct(&f3_.pending, std::move(f3));
    Construct(&f4_.pending, std::move(f4));
    Construct(&f5_.pending, std::move(f5));
    Construct(&f6_.pending, std::move(f6));
  }
  Join& operator=(const Join&) = delete;
  Join(const Join& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
    Construct(&f3_.pending, std::move(other.f3_.pending));
    Construct(&f4_.pending, std::move(other.f4_.pending));
    Construct(&f5_.pending, std::move(other.f5_.pending));
    Construct(&f6_.pending, std::move(other.f6_.pending));
  }
  Join(Join&& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
    Construct(&f3_.pending, std::move(other.f3_.pending));
    Construct(&f4_.pending, std::move(other.f4_.pending));
    Construct(&f5_.pending, std::move(other.f5_.pending));
    Construct(&f6_.pending, std::move(other.f6_.pending));
  }
  ~Join() {
    f0_.CallDestruct((state_ & 1) != 0);
    f1_.CallDestruct((state_ & 2) != 0);
    f2_.CallDestruct((state_ & 4) != 0);
    f3_.CallDestruct((state_ & 8) != 0);
    f4_.CallDestruct((state_ & 16) != 0);
    f5_.CallDestruct((state_ & 32) != 0);
    f6_.CallDestruct((state_ & 64) != 0);
  }
  Poll<std::tuple<R0, R1, R2, R3, R4, R5, R6>> operator()() {
    f0_.Poll(&state_, decltype(state_)(1));
    f1_.Poll(&state_, decltype(state_)(2));
    f2_.Poll(&state_, decltype(state_)(4));
    f3_.Poll(&state_, decltype(state_)(8));
    f4_.Poll(&state_, decltype(state_)(16));
    f5_.Poll(&state_, decltype(state_)(32));
    f6_.Poll(&state_, decltype(state_)(64));
    if (state_ != 127) return kPending;
    return ready(std::tuple<R0, R1, R2, R3, R4, R5, R6>(
        std::move(f0_.ready), std::move(f1_.ready), std::move(f2_.ready),
        std::move(f3_.ready), std::move(f4_.ready), std::move(f5_.ready),
        std::move(f6_.ready)));
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7>
class Join<F0, F1, F2, F3, F4, F5, F6, F7> {
 private:
  [[no_unique_address]] uint8_t state_ = 0;
  [[no_unique_address]] Fused<F0> f0_;
  using R0 = typename Fused<F0>::Result;
  [[no_unique_address]] Fused<F1> f1_;
  using R1 = typename Fused<F1>::Result;
  [[no_unique_address]] Fused<F2> f2_;
  using R2 = typename Fused<F2>::Result;
  [[no_unique_address]] Fused<F3> f3_;
  using R3 = typename Fused<F3>::Result;
  [[no_unique_address]] Fused<F4> f4_;
  using R4 = typename Fused<F4>::Result;
  [[no_unique_address]] Fused<F5> f5_;
  using R5 = typename Fused<F5>::Result;
  [[no_unique_address]] Fused<F6> f6_;
  using R6 = typename Fused<F6>::Result;
  [[no_unique_address]] Fused<F7> f7_;
  using R7 = typename Fused<F7>::Result;

 public:
  Join(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7) {
    Construct(&f0_.pending, std::move(f0));
    Construct(&f1_.pending, std::move(f1));
    Construct(&f2_.pending, std::move(f2));
    Construct(&f3_.pending, std::move(f3));
    Construct(&f4_.pending, std::move(f4));
    Construct(&f5_.pending, std::move(f5));
    Construct(&f6_.pending, std::move(f6));
    Construct(&f7_.pending, std::move(f7));
  }
  Join& operator=(const Join&) = delete;
  Join(const Join& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
    Construct(&f3_.pending, std::move(other.f3_.pending));
    Construct(&f4_.pending, std::move(other.f4_.pending));
    Construct(&f5_.pending, std::move(other.f5_.pending));
    Construct(&f6_.pending, std::move(other.f6_.pending));
    Construct(&f7_.pending, std::move(other.f7_.pending));
  }
  Join(Join&& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
    Construct(&f3_.pending, std::move(other.f3_.pending));
    Construct(&f4_.pending, std::move(other.f4_.pending));
    Construct(&f5_.pending, std::move(other.f5_.pending));
    Construct(&f6_.pending, std::move(other.f6_.pending));
    Construct(&f7_.pending, std::move(other.f7_.pending));
  }
  ~Join() {
    f0_.CallDestruct((state_ & 1) != 0);
    f1_.CallDestruct((state_ & 2) != 0);
    f2_.CallDestruct((state_ & 4) != 0);
    f3_.CallDestruct((state_ & 8) != 0);
    f4_.CallDestruct((state_ & 16) != 0);
    f5_.CallDestruct((state_ & 32) != 0);
    f6_.CallDestruct((state_ & 64) != 0);
    f7_.CallDestruct((state_ & 128) != 0);
  }
  Poll<std::tuple<R0, R1, R2, R3, R4, R5, R6, R7>> operator()() {
    f0_.Poll(&state_, decltype(state_)(1));
    f1_.Poll(&state_, decltype(state_)(2));
    f2_.Poll(&state_, decltype(state_)(4));
    f3_.Poll(&state_, decltype(state_)(8));
    f4_.Poll(&state_, decltype(state_)(16));
    f5_.Poll(&state_, decltype(state_)(32));
    f6_.Poll(&state_, decltype(state_)(64));
    f7_.Poll(&state_, decltype(state_)(128));
    if (state_ != 255) return kPending;
    return ready(std::tuple<R0, R1, R2, R3, R4, R5, R6, R7>(
        std::move(f0_.ready), std::move(f1_.ready), std::move(f2_.ready),
        std::move(f3_.ready), std::move(f4_.ready), std::move(f5_.ready),
        std::move(f6_.ready), std::move(f7_.ready)));
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8>
class Join<F0, F1, F2, F3, F4, F5, F6, F7, F8> {
 private:
  [[no_unique_address]] uint16_t state_ = 0;
  [[no_unique_address]] Fused<F0> f0_;
  using R0 = typename Fused<F0>::Result;
  [[no_unique_address]] Fused<F1> f1_;
  using R1 = typename Fused<F1>::Result;
  [[no_unique_address]] Fused<F2> f2_;
  using R2 = typename Fused<F2>::Result;
  [[no_unique_address]] Fused<F3> f3_;
  using R3 = typename Fused<F3>::Result;
  [[no_unique_address]] Fused<F4> f4_;
  using R4 = typename Fused<F4>::Result;
  [[no_unique_address]] Fused<F5> f5_;
  using R5 = typename Fused<F5>::Result;
  [[no_unique_address]] Fused<F6> f6_;
  using R6 = typename Fused<F6>::Result;
  [[no_unique_address]] Fused<F7> f7_;
  using R7 = typename Fused<F7>::Result;
  [[no_unique_address]] Fused<F8> f8_;
  using R8 = typename Fused<F8>::Result;

 public:
  Join(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8) {
    Construct(&f0_.pending, std::move(f0));
    Construct(&f1_.pending, std::move(f1));
    Construct(&f2_.pending, std::move(f2));
    Construct(&f3_.pending, std::move(f3));
    Construct(&f4_.pending, std::move(f4));
    Construct(&f5_.pending, std::move(f5));
    Construct(&f6_.pending, std::move(f6));
    Construct(&f7_.pending, std::move(f7));
    Construct(&f8_.pending, std::move(f8));
  }
  Join& operator=(const Join&) = delete;
  Join(const Join& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
    Construct(&f3_.pending, std::move(other.f3_.pending));
    Construct(&f4_.pending, std::move(other.f4_.pending));
    Construct(&f5_.pending, std::move(other.f5_.pending));
    Construct(&f6_.pending, std::move(other.f6_.pending));
    Construct(&f7_.pending, std::move(other.f7_.pending));
    Construct(&f8_.pending, std::move(other.f8_.pending));
  }
  Join(Join&& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
    Construct(&f3_.pending, std::move(other.f3_.pending));
    Construct(&f4_.pending, std::move(other.f4_.pending));
    Construct(&f5_.pending, std::move(other.f5_.pending));
    Construct(&f6_.pending, std::move(other.f6_.pending));
    Construct(&f7_.pending, std::move(other.f7_.pending));
    Construct(&f8_.pending, std::move(other.f8_.pending));
  }
  ~Join() {
    f0_.CallDestruct((state_ & 1) != 0);
    f1_.CallDestruct((state_ & 2) != 0);
    f2_.CallDestruct((state_ & 4) != 0);
    f3_.CallDestruct((state_ & 8) != 0);
    f4_.CallDestruct((state_ & 16) != 0);
    f5_.CallDestruct((state_ & 32) != 0);
    f6_.CallDestruct((state_ & 64) != 0);
    f7_.CallDestruct((state_ & 128) != 0);
    f8_.CallDestruct((state_ & 256) != 0);
  }
  Poll<std::tuple<R0, R1, R2, R3, R4, R5, R6, R7, R8>> operator()() {
    f0_.Poll(&state_, decltype(state_)(1));
    f1_.Poll(&state_, decltype(state_)(2));
    f2_.Poll(&state_, decltype(state_)(4));
    f3_.Poll(&state_, decltype(state_)(8));
    f4_.Poll(&state_, decltype(state_)(16));
    f5_.Poll(&state_, decltype(state_)(32));
    f6_.Poll(&state_, decltype(state_)(64));
    f7_.Poll(&state_, decltype(state_)(128));
    f8_.Poll(&state_, decltype(state_)(256));
    if (state_ != 511) return kPending;
    return ready(std::tuple<R0, R1, R2, R3, R4, R5, R6, R7, R8>(
        std::move(f0_.ready), std::move(f1_.ready), std::move(f2_.ready),
        std::move(f3_.ready), std::move(f4_.ready), std::move(f5_.ready),
        std::move(f6_.ready), std::move(f7_.ready), std::move(f8_.ready)));
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9>
class Join<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9> {
 private:
  [[no_unique_address]] uint16_t state_ = 0;
  [[no_unique_address]] Fused<F0> f0_;
  using R0 = typename Fused<F0>::Result;
  [[no_unique_address]] Fused<F1> f1_;
  using R1 = typename Fused<F1>::Result;
  [[no_unique_address]] Fused<F2> f2_;
  using R2 = typename Fused<F2>::Result;
  [[no_unique_address]] Fused<F3> f3_;
  using R3 = typename Fused<F3>::Result;
  [[no_unique_address]] Fused<F4> f4_;
  using R4 = typename Fused<F4>::Result;
  [[no_unique_address]] Fused<F5> f5_;
  using R5 = typename Fused<F5>::Result;
  [[no_unique_address]] Fused<F6> f6_;
  using R6 = typename Fused<F6>::Result;
  [[no_unique_address]] Fused<F7> f7_;
  using R7 = typename Fused<F7>::Result;
  [[no_unique_address]] Fused<F8> f8_;
  using R8 = typename Fused<F8>::Result;
  [[no_unique_address]] Fused<F9> f9_;
  using R9 = typename Fused<F9>::Result;

 public:
  Join(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9) {
    Construct(&f0_.pending, std::move(f0));
    Construct(&f1_.pending, std::move(f1));
    Construct(&f2_.pending, std::move(f2));
    Construct(&f3_.pending, std::move(f3));
    Construct(&f4_.pending, std::move(f4));
    Construct(&f5_.pending, std::move(f5));
    Construct(&f6_.pending, std::move(f6));
    Construct(&f7_.pending, std::move(f7));
    Construct(&f8_.pending, std::move(f8));
    Construct(&f9_.pending, std::move(f9));
  }
  Join& operator=(const Join&) = delete;
  Join(const Join& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
    Construct(&f3_.pending, std::move(other.f3_.pending));
    Construct(&f4_.pending, std::move(other.f4_.pending));
    Construct(&f5_.pending, std::move(other.f5_.pending));
    Construct(&f6_.pending, std::move(other.f6_.pending));
    Construct(&f7_.pending, std::move(other.f7_.pending));
    Construct(&f8_.pending, std::move(other.f8_.pending));
    Construct(&f9_.pending, std::move(other.f9_.pending));
  }
  Join(Join&& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
    Construct(&f3_.pending, std::move(other.f3_.pending));
    Construct(&f4_.pending, std::move(other.f4_.pending));
    Construct(&f5_.pending, std::move(other.f5_.pending));
    Construct(&f6_.pending, std::move(other.f6_.pending));
    Construct(&f7_.pending, std::move(other.f7_.pending));
    Construct(&f8_.pending, std::move(other.f8_.pending));
    Construct(&f9_.pending, std::move(other.f9_.pending));
  }
  ~Join() {
    f0_.CallDestruct((state_ & 1) != 0);
    f1_.CallDestruct((state_ & 2) != 0);
    f2_.CallDestruct((state_ & 4) != 0);
    f3_.CallDestruct((state_ & 8) != 0);
    f4_.CallDestruct((state_ & 16) != 0);
    f5_.CallDestruct((state_ & 32) != 0);
    f6_.CallDestruct((state_ & 64) != 0);
    f7_.CallDestruct((state_ & 128) != 0);
    f8_.CallDestruct((state_ & 256) != 0);
    f9_.CallDestruct((state_ & 512) != 0);
  }
  Poll<std::tuple<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9>> operator()() {
    f0_.Poll(&state_, decltype(state_)(1));
    f1_.Poll(&state_, decltype(state_)(2));
    f2_.Poll(&state_, decltype(state_)(4));
    f3_.Poll(&state_, decltype(state_)(8));
    f4_.Poll(&state_, decltype(state_)(16));
    f5_.Poll(&state_, decltype(state_)(32));
    f6_.Poll(&state_, decltype(state_)(64));
    f7_.Poll(&state_, decltype(state_)(128));
    f8_.Poll(&state_, decltype(state_)(256));
    f9_.Poll(&state_, decltype(state_)(512));
    if (state_ != 1023) return kPending;
    return ready(std::tuple<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9>(
        std::move(f0_.ready), std::move(f1_.ready), std::move(f2_.ready),
        std::move(f3_.ready), std::move(f4_.ready), std::move(f5_.ready),
        std::move(f6_.ready), std::move(f7_.ready), std::move(f8_.ready),
        std::move(f9_.ready)));
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10>
class Join<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10> {
 private:
  [[no_unique_address]] uint16_t state_ = 0;
  [[no_unique_address]] Fused<F0> f0_;
  using R0 = typename Fused<F0>::Result;
  [[no_unique_address]] Fused<F1> f1_;
  using R1 = typename Fused<F1>::Result;
  [[no_unique_address]] Fused<F2> f2_;
  using R2 = typename Fused<F2>::Result;
  [[no_unique_address]] Fused<F3> f3_;
  using R3 = typename Fused<F3>::Result;
  [[no_unique_address]] Fused<F4> f4_;
  using R4 = typename Fused<F4>::Result;
  [[no_unique_address]] Fused<F5> f5_;
  using R5 = typename Fused<F5>::Result;
  [[no_unique_address]] Fused<F6> f6_;
  using R6 = typename Fused<F6>::Result;
  [[no_unique_address]] Fused<F7> f7_;
  using R7 = typename Fused<F7>::Result;
  [[no_unique_address]] Fused<F8> f8_;
  using R8 = typename Fused<F8>::Result;
  [[no_unique_address]] Fused<F9> f9_;
  using R9 = typename Fused<F9>::Result;
  [[no_unique_address]] Fused<F10> f10_;
  using R10 = typename Fused<F10>::Result;

 public:
  Join(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
       F10 f10) {
    Construct(&f0_.pending, std::move(f0));
    Construct(&f1_.pending, std::move(f1));
    Construct(&f2_.pending, std::move(f2));
    Construct(&f3_.pending, std::move(f3));
    Construct(&f4_.pending, std::move(f4));
    Construct(&f5_.pending, std::move(f5));
    Construct(&f6_.pending, std::move(f6));
    Construct(&f7_.pending, std::move(f7));
    Construct(&f8_.pending, std::move(f8));
    Construct(&f9_.pending, std::move(f9));
    Construct(&f10_.pending, std::move(f10));
  }
  Join& operator=(const Join&) = delete;
  Join(const Join& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
    Construct(&f3_.pending, std::move(other.f3_.pending));
    Construct(&f4_.pending, std::move(other.f4_.pending));
    Construct(&f5_.pending, std::move(other.f5_.pending));
    Construct(&f6_.pending, std::move(other.f6_.pending));
    Construct(&f7_.pending, std::move(other.f7_.pending));
    Construct(&f8_.pending, std::move(other.f8_.pending));
    Construct(&f9_.pending, std::move(other.f9_.pending));
    Construct(&f10_.pending, std::move(other.f10_.pending));
  }
  Join(Join&& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
    Construct(&f3_.pending, std::move(other.f3_.pending));
    Construct(&f4_.pending, std::move(other.f4_.pending));
    Construct(&f5_.pending, std::move(other.f5_.pending));
    Construct(&f6_.pending, std::move(other.f6_.pending));
    Construct(&f7_.pending, std::move(other.f7_.pending));
    Construct(&f8_.pending, std::move(other.f8_.pending));
    Construct(&f9_.pending, std::move(other.f9_.pending));
    Construct(&f10_.pending, std::move(other.f10_.pending));
  }
  ~Join() {
    f0_.CallDestruct((state_ & 1) != 0);
    f1_.CallDestruct((state_ & 2) != 0);
    f2_.CallDestruct((state_ & 4) != 0);
    f3_.CallDestruct((state_ & 8) != 0);
    f4_.CallDestruct((state_ & 16) != 0);
    f5_.CallDestruct((state_ & 32) != 0);
    f6_.CallDestruct((state_ & 64) != 0);
    f7_.CallDestruct((state_ & 128) != 0);
    f8_.CallDestruct((state_ & 256) != 0);
    f9_.CallDestruct((state_ & 512) != 0);
    f10_.CallDestruct((state_ & 1024) != 0);
  }
  Poll<std::tuple<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10>> operator()() {
    f0_.Poll(&state_, decltype(state_)(1));
    f1_.Poll(&state_, decltype(state_)(2));
    f2_.Poll(&state_, decltype(state_)(4));
    f3_.Poll(&state_, decltype(state_)(8));
    f4_.Poll(&state_, decltype(state_)(16));
    f5_.Poll(&state_, decltype(state_)(32));
    f6_.Poll(&state_, decltype(state_)(64));
    f7_.Poll(&state_, decltype(state_)(128));
    f8_.Poll(&state_, decltype(state_)(256));
    f9_.Poll(&state_, decltype(state_)(512));
    f10_.Poll(&state_, decltype(state_)(1024));
    if (state_ != 2047) return kPending;
    return ready(std::tuple<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10>(
        std::move(f0_.ready), std::move(f1_.ready), std::move(f2_.ready),
        std::move(f3_.ready), std::move(f4_.ready), std::move(f5_.ready),
        std::move(f6_.ready), std::move(f7_.ready), std::move(f8_.ready),
        std::move(f9_.ready), std::move(f10_.ready)));
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11>
class Join<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11> {
 private:
  [[no_unique_address]] uint16_t state_ = 0;
  [[no_unique_address]] Fused<F0> f0_;
  using R0 = typename Fused<F0>::Result;
  [[no_unique_address]] Fused<F1> f1_;
  using R1 = typename Fused<F1>::Result;
  [[no_unique_address]] Fused<F2> f2_;
  using R2 = typename Fused<F2>::Result;
  [[no_unique_address]] Fused<F3> f3_;
  using R3 = typename Fused<F3>::Result;
  [[no_unique_address]] Fused<F4> f4_;
  using R4 = typename Fused<F4>::Result;
  [[no_unique_address]] Fused<F5> f5_;
  using R5 = typename Fused<F5>::Result;
  [[no_unique_address]] Fused<F6> f6_;
  using R6 = typename Fused<F6>::Result;
  [[no_unique_address]] Fused<F7> f7_;
  using R7 = typename Fused<F7>::Result;
  [[no_unique_address]] Fused<F8> f8_;
  using R8 = typename Fused<F8>::Result;
  [[no_unique_address]] Fused<F9> f9_;
  using R9 = typename Fused<F9>::Result;
  [[no_unique_address]] Fused<F10> f10_;
  using R10 = typename Fused<F10>::Result;
  [[no_unique_address]] Fused<F11> f11_;
  using R11 = typename Fused<F11>::Result;

 public:
  Join(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
       F10 f10, F11 f11) {
    Construct(&f0_.pending, std::move(f0));
    Construct(&f1_.pending, std::move(f1));
    Construct(&f2_.pending, std::move(f2));
    Construct(&f3_.pending, std::move(f3));
    Construct(&f4_.pending, std::move(f4));
    Construct(&f5_.pending, std::move(f5));
    Construct(&f6_.pending, std::move(f6));
    Construct(&f7_.pending, std::move(f7));
    Construct(&f8_.pending, std::move(f8));
    Construct(&f9_.pending, std::move(f9));
    Construct(&f10_.pending, std::move(f10));
    Construct(&f11_.pending, std::move(f11));
  }
  Join& operator=(const Join&) = delete;
  Join(const Join& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
    Construct(&f3_.pending, std::move(other.f3_.pending));
    Construct(&f4_.pending, std::move(other.f4_.pending));
    Construct(&f5_.pending, std::move(other.f5_.pending));
    Construct(&f6_.pending, std::move(other.f6_.pending));
    Construct(&f7_.pending, std::move(other.f7_.pending));
    Construct(&f8_.pending, std::move(other.f8_.pending));
    Construct(&f9_.pending, std::move(other.f9_.pending));
    Construct(&f10_.pending, std::move(other.f10_.pending));
    Construct(&f11_.pending, std::move(other.f11_.pending));
  }
  Join(Join&& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
    Construct(&f3_.pending, std::move(other.f3_.pending));
    Construct(&f4_.pending, std::move(other.f4_.pending));
    Construct(&f5_.pending, std::move(other.f5_.pending));
    Construct(&f6_.pending, std::move(other.f6_.pending));
    Construct(&f7_.pending, std::move(other.f7_.pending));
    Construct(&f8_.pending, std::move(other.f8_.pending));
    Construct(&f9_.pending, std::move(other.f9_.pending));
    Construct(&f10_.pending, std::move(other.f10_.pending));
    Construct(&f11_.pending, std::move(other.f11_.pending));
  }
  ~Join() {
    f0_.CallDestruct((state_ & 1) != 0);
    f1_.CallDestruct((state_ & 2) != 0);
    f2_.CallDestruct((state_ & 4) != 0);
    f3_.CallDestruct((state_ & 8) != 0);
    f4_.CallDestruct((state_ & 16) != 0);
    f5_.CallDestruct((state_ & 32) != 0);
    f6_.CallDestruct((state_ & 64) != 0);
    f7_.CallDestruct((state_ & 128) != 0);
    f8_.CallDestruct((state_ & 256) != 0);
    f9_.CallDestruct((state_ & 512) != 0);
    f10_.CallDestruct((state_ & 1024) != 0);
    f11_.CallDestruct((state_ & 2048) != 0);
  }
  Poll<std::tuple<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11>>
  operator()() {
    f0_.Poll(&state_, decltype(state_)(1));
    f1_.Poll(&state_, decltype(state_)(2));
    f2_.Poll(&state_, decltype(state_)(4));
    f3_.Poll(&state_, decltype(state_)(8));
    f4_.Poll(&state_, decltype(state_)(16));
    f5_.Poll(&state_, decltype(state_)(32));
    f6_.Poll(&state_, decltype(state_)(64));
    f7_.Poll(&state_, decltype(state_)(128));
    f8_.Poll(&state_, decltype(state_)(256));
    f9_.Poll(&state_, decltype(state_)(512));
    f10_.Poll(&state_, decltype(state_)(1024));
    f11_.Poll(&state_, decltype(state_)(2048));
    if (state_ != 4095) return kPending;
    return ready(std::tuple<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11>(
        std::move(f0_.ready), std::move(f1_.ready), std::move(f2_.ready),
        std::move(f3_.ready), std::move(f4_.ready), std::move(f5_.ready),
        std::move(f6_.ready), std::move(f7_.ready), std::move(f8_.ready),
        std::move(f9_.ready), std::move(f10_.ready), std::move(f11_.ready)));
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12>
class Join<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12> {
 private:
  [[no_unique_address]] uint16_t state_ = 0;
  [[no_unique_address]] Fused<F0> f0_;
  using R0 = typename Fused<F0>::Result;
  [[no_unique_address]] Fused<F1> f1_;
  using R1 = typename Fused<F1>::Result;
  [[no_unique_address]] Fused<F2> f2_;
  using R2 = typename Fused<F2>::Result;
  [[no_unique_address]] Fused<F3> f3_;
  using R3 = typename Fused<F3>::Result;
  [[no_unique_address]] Fused<F4> f4_;
  using R4 = typename Fused<F4>::Result;
  [[no_unique_address]] Fused<F5> f5_;
  using R5 = typename Fused<F5>::Result;
  [[no_unique_address]] Fused<F6> f6_;
  using R6 = typename Fused<F6>::Result;
  [[no_unique_address]] Fused<F7> f7_;
  using R7 = typename Fused<F7>::Result;
  [[no_unique_address]] Fused<F8> f8_;
  using R8 = typename Fused<F8>::Result;
  [[no_unique_address]] Fused<F9> f9_;
  using R9 = typename Fused<F9>::Result;
  [[no_unique_address]] Fused<F10> f10_;
  using R10 = typename Fused<F10>::Result;
  [[no_unique_address]] Fused<F11> f11_;
  using R11 = typename Fused<F11>::Result;
  [[no_unique_address]] Fused<F12> f12_;
  using R12 = typename Fused<F12>::Result;

 public:
  Join(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
       F10 f10, F11 f11, F12 f12) {
    Construct(&f0_.pending, std::move(f0));
    Construct(&f1_.pending, std::move(f1));
    Construct(&f2_.pending, std::move(f2));
    Construct(&f3_.pending, std::move(f3));
    Construct(&f4_.pending, std::move(f4));
    Construct(&f5_.pending, std::move(f5));
    Construct(&f6_.pending, std::move(f6));
    Construct(&f7_.pending, std::move(f7));
    Construct(&f8_.pending, std::move(f8));
    Construct(&f9_.pending, std::move(f9));
    Construct(&f10_.pending, std::move(f10));
    Construct(&f11_.pending, std::move(f11));
    Construct(&f12_.pending, std::move(f12));
  }
  Join& operator=(const Join&) = delete;
  Join(const Join& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
    Construct(&f3_.pending, std::move(other.f3_.pending));
    Construct(&f4_.pending, std::move(other.f4_.pending));
    Construct(&f5_.pending, std::move(other.f5_.pending));
    Construct(&f6_.pending, std::move(other.f6_.pending));
    Construct(&f7_.pending, std::move(other.f7_.pending));
    Construct(&f8_.pending, std::move(other.f8_.pending));
    Construct(&f9_.pending, std::move(other.f9_.pending));
    Construct(&f10_.pending, std::move(other.f10_.pending));
    Construct(&f11_.pending, std::move(other.f11_.pending));
    Construct(&f12_.pending, std::move(other.f12_.pending));
  }
  Join(Join&& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
    Construct(&f3_.pending, std::move(other.f3_.pending));
    Construct(&f4_.pending, std::move(other.f4_.pending));
    Construct(&f5_.pending, std::move(other.f5_.pending));
    Construct(&f6_.pending, std::move(other.f6_.pending));
    Construct(&f7_.pending, std::move(other.f7_.pending));
    Construct(&f8_.pending, std::move(other.f8_.pending));
    Construct(&f9_.pending, std::move(other.f9_.pending));
    Construct(&f10_.pending, std::move(other.f10_.pending));
    Construct(&f11_.pending, std::move(other.f11_.pending));
    Construct(&f12_.pending, std::move(other.f12_.pending));
  }
  ~Join() {
    f0_.CallDestruct((state_ & 1) != 0);
    f1_.CallDestruct((state_ & 2) != 0);
    f2_.CallDestruct((state_ & 4) != 0);
    f3_.CallDestruct((state_ & 8) != 0);
    f4_.CallDestruct((state_ & 16) != 0);
    f5_.CallDestruct((state_ & 32) != 0);
    f6_.CallDestruct((state_ & 64) != 0);
    f7_.CallDestruct((state_ & 128) != 0);
    f8_.CallDestruct((state_ & 256) != 0);
    f9_.CallDestruct((state_ & 512) != 0);
    f10_.CallDestruct((state_ & 1024) != 0);
    f11_.CallDestruct((state_ & 2048) != 0);
    f12_.CallDestruct((state_ & 4096) != 0);
  }
  Poll<std::tuple<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12>>
  operator()() {
    f0_.Poll(&state_, decltype(state_)(1));
    f1_.Poll(&state_, decltype(state_)(2));
    f2_.Poll(&state_, decltype(state_)(4));
    f3_.Poll(&state_, decltype(state_)(8));
    f4_.Poll(&state_, decltype(state_)(16));
    f5_.Poll(&state_, decltype(state_)(32));
    f6_.Poll(&state_, decltype(state_)(64));
    f7_.Poll(&state_, decltype(state_)(128));
    f8_.Poll(&state_, decltype(state_)(256));
    f9_.Poll(&state_, decltype(state_)(512));
    f10_.Poll(&state_, decltype(state_)(1024));
    f11_.Poll(&state_, decltype(state_)(2048));
    f12_.Poll(&state_, decltype(state_)(4096));
    if (state_ != 8191) return kPending;
    return ready(
        std::tuple<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12>(
            std::move(f0_.ready), std::move(f1_.ready), std::move(f2_.ready),
            std::move(f3_.ready), std::move(f4_.ready), std::move(f5_.ready),
            std::move(f6_.ready), std::move(f7_.ready), std::move(f8_.ready),
            std::move(f9_.ready), std::move(f10_.ready), std::move(f11_.ready),
            std::move(f12_.ready)));
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12, typename F13>
class Join<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13> {
 private:
  [[no_unique_address]] uint16_t state_ = 0;
  [[no_unique_address]] Fused<F0> f0_;
  using R0 = typename Fused<F0>::Result;
  [[no_unique_address]] Fused<F1> f1_;
  using R1 = typename Fused<F1>::Result;
  [[no_unique_address]] Fused<F2> f2_;
  using R2 = typename Fused<F2>::Result;
  [[no_unique_address]] Fused<F3> f3_;
  using R3 = typename Fused<F3>::Result;
  [[no_unique_address]] Fused<F4> f4_;
  using R4 = typename Fused<F4>::Result;
  [[no_unique_address]] Fused<F5> f5_;
  using R5 = typename Fused<F5>::Result;
  [[no_unique_address]] Fused<F6> f6_;
  using R6 = typename Fused<F6>::Result;
  [[no_unique_address]] Fused<F7> f7_;
  using R7 = typename Fused<F7>::Result;
  [[no_unique_address]] Fused<F8> f8_;
  using R8 = typename Fused<F8>::Result;
  [[no_unique_address]] Fused<F9> f9_;
  using R9 = typename Fused<F9>::Result;
  [[no_unique_address]] Fused<F10> f10_;
  using R10 = typename Fused<F10>::Result;
  [[no_unique_address]] Fused<F11> f11_;
  using R11 = typename Fused<F11>::Result;
  [[no_unique_address]] Fused<F12> f12_;
  using R12 = typename Fused<F12>::Result;
  [[no_unique_address]] Fused<F13> f13_;
  using R13 = typename Fused<F13>::Result;

 public:
  Join(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
       F10 f10, F11 f11, F12 f12, F13 f13) {
    Construct(&f0_.pending, std::move(f0));
    Construct(&f1_.pending, std::move(f1));
    Construct(&f2_.pending, std::move(f2));
    Construct(&f3_.pending, std::move(f3));
    Construct(&f4_.pending, std::move(f4));
    Construct(&f5_.pending, std::move(f5));
    Construct(&f6_.pending, std::move(f6));
    Construct(&f7_.pending, std::move(f7));
    Construct(&f8_.pending, std::move(f8));
    Construct(&f9_.pending, std::move(f9));
    Construct(&f10_.pending, std::move(f10));
    Construct(&f11_.pending, std::move(f11));
    Construct(&f12_.pending, std::move(f12));
    Construct(&f13_.pending, std::move(f13));
  }
  Join& operator=(const Join&) = delete;
  Join(const Join& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
    Construct(&f3_.pending, std::move(other.f3_.pending));
    Construct(&f4_.pending, std::move(other.f4_.pending));
    Construct(&f5_.pending, std::move(other.f5_.pending));
    Construct(&f6_.pending, std::move(other.f6_.pending));
    Construct(&f7_.pending, std::move(other.f7_.pending));
    Construct(&f8_.pending, std::move(other.f8_.pending));
    Construct(&f9_.pending, std::move(other.f9_.pending));
    Construct(&f10_.pending, std::move(other.f10_.pending));
    Construct(&f11_.pending, std::move(other.f11_.pending));
    Construct(&f12_.pending, std::move(other.f12_.pending));
    Construct(&f13_.pending, std::move(other.f13_.pending));
  }
  Join(Join&& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
    Construct(&f3_.pending, std::move(other.f3_.pending));
    Construct(&f4_.pending, std::move(other.f4_.pending));
    Construct(&f5_.pending, std::move(other.f5_.pending));
    Construct(&f6_.pending, std::move(other.f6_.pending));
    Construct(&f7_.pending, std::move(other.f7_.pending));
    Construct(&f8_.pending, std::move(other.f8_.pending));
    Construct(&f9_.pending, std::move(other.f9_.pending));
    Construct(&f10_.pending, std::move(other.f10_.pending));
    Construct(&f11_.pending, std::move(other.f11_.pending));
    Construct(&f12_.pending, std::move(other.f12_.pending));
    Construct(&f13_.pending, std::move(other.f13_.pending));
  }
  ~Join() {
    f0_.CallDestruct((state_ & 1) != 0);
    f1_.CallDestruct((state_ & 2) != 0);
    f2_.CallDestruct((state_ & 4) != 0);
    f3_.CallDestruct((state_ & 8) != 0);
    f4_.CallDestruct((state_ & 16) != 0);
    f5_.CallDestruct((state_ & 32) != 0);
    f6_.CallDestruct((state_ & 64) != 0);
    f7_.CallDestruct((state_ & 128) != 0);
    f8_.CallDestruct((state_ & 256) != 0);
    f9_.CallDestruct((state_ & 512) != 0);
    f10_.CallDestruct((state_ & 1024) != 0);
    f11_.CallDestruct((state_ & 2048) != 0);
    f12_.CallDestruct((state_ & 4096) != 0);
    f13_.CallDestruct((state_ & 8192) != 0);
  }
  Poll<std::tuple<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13>>
  operator()() {
    f0_.Poll(&state_, decltype(state_)(1));
    f1_.Poll(&state_, decltype(state_)(2));
    f2_.Poll(&state_, decltype(state_)(4));
    f3_.Poll(&state_, decltype(state_)(8));
    f4_.Poll(&state_, decltype(state_)(16));
    f5_.Poll(&state_, decltype(state_)(32));
    f6_.Poll(&state_, decltype(state_)(64));
    f7_.Poll(&state_, decltype(state_)(128));
    f8_.Poll(&state_, decltype(state_)(256));
    f9_.Poll(&state_, decltype(state_)(512));
    f10_.Poll(&state_, decltype(state_)(1024));
    f11_.Poll(&state_, decltype(state_)(2048));
    f12_.Poll(&state_, decltype(state_)(4096));
    f13_.Poll(&state_, decltype(state_)(8192));
    if (state_ != 16383) return kPending;
    return ready(
        std::tuple<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13>(
            std::move(f0_.ready), std::move(f1_.ready), std::move(f2_.ready),
            std::move(f3_.ready), std::move(f4_.ready), std::move(f5_.ready),
            std::move(f6_.ready), std::move(f7_.ready), std::move(f8_.ready),
            std::move(f9_.ready), std::move(f10_.ready), std::move(f11_.ready),
            std::move(f12_.ready), std::move(f13_.ready)));
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12, typename F13, typename F14>
class Join<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14> {
 private:
  [[no_unique_address]] uint16_t state_ = 0;
  [[no_unique_address]] Fused<F0> f0_;
  using R0 = typename Fused<F0>::Result;
  [[no_unique_address]] Fused<F1> f1_;
  using R1 = typename Fused<F1>::Result;
  [[no_unique_address]] Fused<F2> f2_;
  using R2 = typename Fused<F2>::Result;
  [[no_unique_address]] Fused<F3> f3_;
  using R3 = typename Fused<F3>::Result;
  [[no_unique_address]] Fused<F4> f4_;
  using R4 = typename Fused<F4>::Result;
  [[no_unique_address]] Fused<F5> f5_;
  using R5 = typename Fused<F5>::Result;
  [[no_unique_address]] Fused<F6> f6_;
  using R6 = typename Fused<F6>::Result;
  [[no_unique_address]] Fused<F7> f7_;
  using R7 = typename Fused<F7>::Result;
  [[no_unique_address]] Fused<F8> f8_;
  using R8 = typename Fused<F8>::Result;
  [[no_unique_address]] Fused<F9> f9_;
  using R9 = typename Fused<F9>::Result;
  [[no_unique_address]] Fused<F10> f10_;
  using R10 = typename Fused<F10>::Result;
  [[no_unique_address]] Fused<F11> f11_;
  using R11 = typename Fused<F11>::Result;
  [[no_unique_address]] Fused<F12> f12_;
  using R12 = typename Fused<F12>::Result;
  [[no_unique_address]] Fused<F13> f13_;
  using R13 = typename Fused<F13>::Result;
  [[no_unique_address]] Fused<F14> f14_;
  using R14 = typename Fused<F14>::Result;

 public:
  Join(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
       F10 f10, F11 f11, F12 f12, F13 f13, F14 f14) {
    Construct(&f0_.pending, std::move(f0));
    Construct(&f1_.pending, std::move(f1));
    Construct(&f2_.pending, std::move(f2));
    Construct(&f3_.pending, std::move(f3));
    Construct(&f4_.pending, std::move(f4));
    Construct(&f5_.pending, std::move(f5));
    Construct(&f6_.pending, std::move(f6));
    Construct(&f7_.pending, std::move(f7));
    Construct(&f8_.pending, std::move(f8));
    Construct(&f9_.pending, std::move(f9));
    Construct(&f10_.pending, std::move(f10));
    Construct(&f11_.pending, std::move(f11));
    Construct(&f12_.pending, std::move(f12));
    Construct(&f13_.pending, std::move(f13));
    Construct(&f14_.pending, std::move(f14));
  }
  Join& operator=(const Join&) = delete;
  Join(const Join& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
    Construct(&f3_.pending, std::move(other.f3_.pending));
    Construct(&f4_.pending, std::move(other.f4_.pending));
    Construct(&f5_.pending, std::move(other.f5_.pending));
    Construct(&f6_.pending, std::move(other.f6_.pending));
    Construct(&f7_.pending, std::move(other.f7_.pending));
    Construct(&f8_.pending, std::move(other.f8_.pending));
    Construct(&f9_.pending, std::move(other.f9_.pending));
    Construct(&f10_.pending, std::move(other.f10_.pending));
    Construct(&f11_.pending, std::move(other.f11_.pending));
    Construct(&f12_.pending, std::move(other.f12_.pending));
    Construct(&f13_.pending, std::move(other.f13_.pending));
    Construct(&f14_.pending, std::move(other.f14_.pending));
  }
  Join(Join&& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
    Construct(&f3_.pending, std::move(other.f3_.pending));
    Construct(&f4_.pending, std::move(other.f4_.pending));
    Construct(&f5_.pending, std::move(other.f5_.pending));
    Construct(&f6_.pending, std::move(other.f6_.pending));
    Construct(&f7_.pending, std::move(other.f7_.pending));
    Construct(&f8_.pending, std::move(other.f8_.pending));
    Construct(&f9_.pending, std::move(other.f9_.pending));
    Construct(&f10_.pending, std::move(other.f10_.pending));
    Construct(&f11_.pending, std::move(other.f11_.pending));
    Construct(&f12_.pending, std::move(other.f12_.pending));
    Construct(&f13_.pending, std::move(other.f13_.pending));
    Construct(&f14_.pending, std::move(other.f14_.pending));
  }
  ~Join() {
    f0_.CallDestruct((state_ & 1) != 0);
    f1_.CallDestruct((state_ & 2) != 0);
    f2_.CallDestruct((state_ & 4) != 0);
    f3_.CallDestruct((state_ & 8) != 0);
    f4_.CallDestruct((state_ & 16) != 0);
    f5_.CallDestruct((state_ & 32) != 0);
    f6_.CallDestruct((state_ & 64) != 0);
    f7_.CallDestruct((state_ & 128) != 0);
    f8_.CallDestruct((state_ & 256) != 0);
    f9_.CallDestruct((state_ & 512) != 0);
    f10_.CallDestruct((state_ & 1024) != 0);
    f11_.CallDestruct((state_ & 2048) != 0);
    f12_.CallDestruct((state_ & 4096) != 0);
    f13_.CallDestruct((state_ & 8192) != 0);
    f14_.CallDestruct((state_ & 16384) != 0);
  }
  Poll<std::tuple<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13,
                  R14>>
  operator()() {
    f0_.Poll(&state_, decltype(state_)(1));
    f1_.Poll(&state_, decltype(state_)(2));
    f2_.Poll(&state_, decltype(state_)(4));
    f3_.Poll(&state_, decltype(state_)(8));
    f4_.Poll(&state_, decltype(state_)(16));
    f5_.Poll(&state_, decltype(state_)(32));
    f6_.Poll(&state_, decltype(state_)(64));
    f7_.Poll(&state_, decltype(state_)(128));
    f8_.Poll(&state_, decltype(state_)(256));
    f9_.Poll(&state_, decltype(state_)(512));
    f10_.Poll(&state_, decltype(state_)(1024));
    f11_.Poll(&state_, decltype(state_)(2048));
    f12_.Poll(&state_, decltype(state_)(4096));
    f13_.Poll(&state_, decltype(state_)(8192));
    f14_.Poll(&state_, decltype(state_)(16384));
    if (state_ != 32767) return kPending;
    return ready(std::tuple<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11,
                            R12, R13, R14>(
        std::move(f0_.ready), std::move(f1_.ready), std::move(f2_.ready),
        std::move(f3_.ready), std::move(f4_.ready), std::move(f5_.ready),
        std::move(f6_.ready), std::move(f7_.ready), std::move(f8_.ready),
        std::move(f9_.ready), std::move(f10_.ready), std::move(f11_.ready),
        std::move(f12_.ready), std::move(f13_.ready), std::move(f14_.ready)));
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12, typename F13, typename F14,
          typename F15>
class Join<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
           F15> {
 private:
  [[no_unique_address]] uint16_t state_ = 0;
  [[no_unique_address]] Fused<F0> f0_;
  using R0 = typename Fused<F0>::Result;
  [[no_unique_address]] Fused<F1> f1_;
  using R1 = typename Fused<F1>::Result;
  [[no_unique_address]] Fused<F2> f2_;
  using R2 = typename Fused<F2>::Result;
  [[no_unique_address]] Fused<F3> f3_;
  using R3 = typename Fused<F3>::Result;
  [[no_unique_address]] Fused<F4> f4_;
  using R4 = typename Fused<F4>::Result;
  [[no_unique_address]] Fused<F5> f5_;
  using R5 = typename Fused<F5>::Result;
  [[no_unique_address]] Fused<F6> f6_;
  using R6 = typename Fused<F6>::Result;
  [[no_unique_address]] Fused<F7> f7_;
  using R7 = typename Fused<F7>::Result;
  [[no_unique_address]] Fused<F8> f8_;
  using R8 = typename Fused<F8>::Result;
  [[no_unique_address]] Fused<F9> f9_;
  using R9 = typename Fused<F9>::Result;
  [[no_unique_address]] Fused<F10> f10_;
  using R10 = typename Fused<F10>::Result;
  [[no_unique_address]] Fused<F11> f11_;
  using R11 = typename Fused<F11>::Result;
  [[no_unique_address]] Fused<F12> f12_;
  using R12 = typename Fused<F12>::Result;
  [[no_unique_address]] Fused<F13> f13_;
  using R13 = typename Fused<F13>::Result;
  [[no_unique_address]] Fused<F14> f14_;
  using R14 = typename Fused<F14>::Result;
  [[no_unique_address]] Fused<F15> f15_;
  using R15 = typename Fused<F15>::Result;

 public:
  Join(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
       F10 f10, F11 f11, F12 f12, F13 f13, F14 f14, F15 f15) {
    Construct(&f0_.pending, std::move(f0));
    Construct(&f1_.pending, std::move(f1));
    Construct(&f2_.pending, std::move(f2));
    Construct(&f3_.pending, std::move(f3));
    Construct(&f4_.pending, std::move(f4));
    Construct(&f5_.pending, std::move(f5));
    Construct(&f6_.pending, std::move(f6));
    Construct(&f7_.pending, std::move(f7));
    Construct(&f8_.pending, std::move(f8));
    Construct(&f9_.pending, std::move(f9));
    Construct(&f10_.pending, std::move(f10));
    Construct(&f11_.pending, std::move(f11));
    Construct(&f12_.pending, std::move(f12));
    Construct(&f13_.pending, std::move(f13));
    Construct(&f14_.pending, std::move(f14));
    Construct(&f15_.pending, std::move(f15));
  }
  Join& operator=(const Join&) = delete;
  Join(const Join& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
    Construct(&f3_.pending, std::move(other.f3_.pending));
    Construct(&f4_.pending, std::move(other.f4_.pending));
    Construct(&f5_.pending, std::move(other.f5_.pending));
    Construct(&f6_.pending, std::move(other.f6_.pending));
    Construct(&f7_.pending, std::move(other.f7_.pending));
    Construct(&f8_.pending, std::move(other.f8_.pending));
    Construct(&f9_.pending, std::move(other.f9_.pending));
    Construct(&f10_.pending, std::move(other.f10_.pending));
    Construct(&f11_.pending, std::move(other.f11_.pending));
    Construct(&f12_.pending, std::move(other.f12_.pending));
    Construct(&f13_.pending, std::move(other.f13_.pending));
    Construct(&f14_.pending, std::move(other.f14_.pending));
    Construct(&f15_.pending, std::move(other.f15_.pending));
  }
  Join(Join&& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
    Construct(&f3_.pending, std::move(other.f3_.pending));
    Construct(&f4_.pending, std::move(other.f4_.pending));
    Construct(&f5_.pending, std::move(other.f5_.pending));
    Construct(&f6_.pending, std::move(other.f6_.pending));
    Construct(&f7_.pending, std::move(other.f7_.pending));
    Construct(&f8_.pending, std::move(other.f8_.pending));
    Construct(&f9_.pending, std::move(other.f9_.pending));
    Construct(&f10_.pending, std::move(other.f10_.pending));
    Construct(&f11_.pending, std::move(other.f11_.pending));
    Construct(&f12_.pending, std::move(other.f12_.pending));
    Construct(&f13_.pending, std::move(other.f13_.pending));
    Construct(&f14_.pending, std::move(other.f14_.pending));
    Construct(&f15_.pending, std::move(other.f15_.pending));
  }
  ~Join() {
    f0_.CallDestruct((state_ & 1) != 0);
    f1_.CallDestruct((state_ & 2) != 0);
    f2_.CallDestruct((state_ & 4) != 0);
    f3_.CallDestruct((state_ & 8) != 0);
    f4_.CallDestruct((state_ & 16) != 0);
    f5_.CallDestruct((state_ & 32) != 0);
    f6_.CallDestruct((state_ & 64) != 0);
    f7_.CallDestruct((state_ & 128) != 0);
    f8_.CallDestruct((state_ & 256) != 0);
    f9_.CallDestruct((state_ & 512) != 0);
    f10_.CallDestruct((state_ & 1024) != 0);
    f11_.CallDestruct((state_ & 2048) != 0);
    f12_.CallDestruct((state_ & 4096) != 0);
    f13_.CallDestruct((state_ & 8192) != 0);
    f14_.CallDestruct((state_ & 16384) != 0);
    f15_.CallDestruct((state_ & 32768) != 0);
  }
  Poll<std::tuple<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13,
                  R14, R15>>
  operator()() {
    f0_.Poll(&state_, decltype(state_)(1));
    f1_.Poll(&state_, decltype(state_)(2));
    f2_.Poll(&state_, decltype(state_)(4));
    f3_.Poll(&state_, decltype(state_)(8));
    f4_.Poll(&state_, decltype(state_)(16));
    f5_.Poll(&state_, decltype(state_)(32));
    f6_.Poll(&state_, decltype(state_)(64));
    f7_.Poll(&state_, decltype(state_)(128));
    f8_.Poll(&state_, decltype(state_)(256));
    f9_.Poll(&state_, decltype(state_)(512));
    f10_.Poll(&state_, decltype(state_)(1024));
    f11_.Poll(&state_, decltype(state_)(2048));
    f12_.Poll(&state_, decltype(state_)(4096));
    f13_.Poll(&state_, decltype(state_)(8192));
    f14_.Poll(&state_, decltype(state_)(16384));
    f15_.Poll(&state_, decltype(state_)(32768));
    if (state_ != 65535) return kPending;
    return ready(std::tuple<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11,
                            R12, R13, R14, R15>(
        std::move(f0_.ready), std::move(f1_.ready), std::move(f2_.ready),
        std::move(f3_.ready), std::move(f4_.ready), std::move(f5_.ready),
        std::move(f6_.ready), std::move(f7_.ready), std::move(f8_.ready),
        std::move(f9_.ready), std::move(f10_.ready), std::move(f11_.ready),
        std::move(f12_.ready), std::move(f13_.ready), std::move(f14_.ready),
        std::move(f15_.ready)));
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12, typename F13, typename F14,
          typename F15, typename F16>
class Join<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
           F16> {
 private:
  [[no_unique_address]] uint32_t state_ = 0;
  [[no_unique_address]] Fused<F0> f0_;
  using R0 = typename Fused<F0>::Result;
  [[no_unique_address]] Fused<F1> f1_;
  using R1 = typename Fused<F1>::Result;
  [[no_unique_address]] Fused<F2> f2_;
  using R2 = typename Fused<F2>::Result;
  [[no_unique_address]] Fused<F3> f3_;
  using R3 = typename Fused<F3>::Result;
  [[no_unique_address]] Fused<F4> f4_;
  using R4 = typename Fused<F4>::Result;
  [[no_unique_address]] Fused<F5> f5_;
  using R5 = typename Fused<F5>::Result;
  [[no_unique_address]] Fused<F6> f6_;
  using R6 = typename Fused<F6>::Result;
  [[no_unique_address]] Fused<F7> f7_;
  using R7 = typename Fused<F7>::Result;
  [[no_unique_address]] Fused<F8> f8_;
  using R8 = typename Fused<F8>::Result;
  [[no_unique_address]] Fused<F9> f9_;
  using R9 = typename Fused<F9>::Result;
  [[no_unique_address]] Fused<F10> f10_;
  using R10 = typename Fused<F10>::Result;
  [[no_unique_address]] Fused<F11> f11_;
  using R11 = typename Fused<F11>::Result;
  [[no_unique_address]] Fused<F12> f12_;
  using R12 = typename Fused<F12>::Result;
  [[no_unique_address]] Fused<F13> f13_;
  using R13 = typename Fused<F13>::Result;
  [[no_unique_address]] Fused<F14> f14_;
  using R14 = typename Fused<F14>::Result;
  [[no_unique_address]] Fused<F15> f15_;
  using R15 = typename Fused<F15>::Result;
  [[no_unique_address]] Fused<F16> f16_;
  using R16 = typename Fused<F16>::Result;

 public:
  Join(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
       F10 f10, F11 f11, F12 f12, F13 f13, F14 f14, F15 f15, F16 f16) {
    Construct(&f0_.pending, std::move(f0));
    Construct(&f1_.pending, std::move(f1));
    Construct(&f2_.pending, std::move(f2));
    Construct(&f3_.pending, std::move(f3));
    Construct(&f4_.pending, std::move(f4));
    Construct(&f5_.pending, std::move(f5));
    Construct(&f6_.pending, std::move(f6));
    Construct(&f7_.pending, std::move(f7));
    Construct(&f8_.pending, std::move(f8));
    Construct(&f9_.pending, std::move(f9));
    Construct(&f10_.pending, std::move(f10));
    Construct(&f11_.pending, std::move(f11));
    Construct(&f12_.pending, std::move(f12));
    Construct(&f13_.pending, std::move(f13));
    Construct(&f14_.pending, std::move(f14));
    Construct(&f15_.pending, std::move(f15));
    Construct(&f16_.pending, std::move(f16));
  }
  Join& operator=(const Join&) = delete;
  Join(const Join& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
    Construct(&f3_.pending, std::move(other.f3_.pending));
    Construct(&f4_.pending, std::move(other.f4_.pending));
    Construct(&f5_.pending, std::move(other.f5_.pending));
    Construct(&f6_.pending, std::move(other.f6_.pending));
    Construct(&f7_.pending, std::move(other.f7_.pending));
    Construct(&f8_.pending, std::move(other.f8_.pending));
    Construct(&f9_.pending, std::move(other.f9_.pending));
    Construct(&f10_.pending, std::move(other.f10_.pending));
    Construct(&f11_.pending, std::move(other.f11_.pending));
    Construct(&f12_.pending, std::move(other.f12_.pending));
    Construct(&f13_.pending, std::move(other.f13_.pending));
    Construct(&f14_.pending, std::move(other.f14_.pending));
    Construct(&f15_.pending, std::move(other.f15_.pending));
    Construct(&f16_.pending, std::move(other.f16_.pending));
  }
  Join(Join&& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
    Construct(&f3_.pending, std::move(other.f3_.pending));
    Construct(&f4_.pending, std::move(other.f4_.pending));
    Construct(&f5_.pending, std::move(other.f5_.pending));
    Construct(&f6_.pending, std::move(other.f6_.pending));
    Construct(&f7_.pending, std::move(other.f7_.pending));
    Construct(&f8_.pending, std::move(other.f8_.pending));
    Construct(&f9_.pending, std::move(other.f9_.pending));
    Construct(&f10_.pending, std::move(other.f10_.pending));
    Construct(&f11_.pending, std::move(other.f11_.pending));
    Construct(&f12_.pending, std::move(other.f12_.pending));
    Construct(&f13_.pending, std::move(other.f13_.pending));
    Construct(&f14_.pending, std::move(other.f14_.pending));
    Construct(&f15_.pending, std::move(other.f15_.pending));
    Construct(&f16_.pending, std::move(other.f16_.pending));
  }
  ~Join() {
    f0_.CallDestruct((state_ & 1) != 0);
    f1_.CallDestruct((state_ & 2) != 0);
    f2_.CallDestruct((state_ & 4) != 0);
    f3_.CallDestruct((state_ & 8) != 0);
    f4_.CallDestruct((state_ & 16) != 0);
    f5_.CallDestruct((state_ & 32) != 0);
    f6_.CallDestruct((state_ & 64) != 0);
    f7_.CallDestruct((state_ & 128) != 0);
    f8_.CallDestruct((state_ & 256) != 0);
    f9_.CallDestruct((state_ & 512) != 0);
    f10_.CallDestruct((state_ & 1024) != 0);
    f11_.CallDestruct((state_ & 2048) != 0);
    f12_.CallDestruct((state_ & 4096) != 0);
    f13_.CallDestruct((state_ & 8192) != 0);
    f14_.CallDestruct((state_ & 16384) != 0);
    f15_.CallDestruct((state_ & 32768) != 0);
    f16_.CallDestruct((state_ & 65536) != 0);
  }
  Poll<std::tuple<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13,
                  R14, R15, R16>>
  operator()() {
    f0_.Poll(&state_, decltype(state_)(1));
    f1_.Poll(&state_, decltype(state_)(2));
    f2_.Poll(&state_, decltype(state_)(4));
    f3_.Poll(&state_, decltype(state_)(8));
    f4_.Poll(&state_, decltype(state_)(16));
    f5_.Poll(&state_, decltype(state_)(32));
    f6_.Poll(&state_, decltype(state_)(64));
    f7_.Poll(&state_, decltype(state_)(128));
    f8_.Poll(&state_, decltype(state_)(256));
    f9_.Poll(&state_, decltype(state_)(512));
    f10_.Poll(&state_, decltype(state_)(1024));
    f11_.Poll(&state_, decltype(state_)(2048));
    f12_.Poll(&state_, decltype(state_)(4096));
    f13_.Poll(&state_, decltype(state_)(8192));
    f14_.Poll(&state_, decltype(state_)(16384));
    f15_.Poll(&state_, decltype(state_)(32768));
    f16_.Poll(&state_, decltype(state_)(65536));
    if (state_ != 131071) return kPending;
    return ready(std::tuple<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11,
                            R12, R13, R14, R15, R16>(
        std::move(f0_.ready), std::move(f1_.ready), std::move(f2_.ready),
        std::move(f3_.ready), std::move(f4_.ready), std::move(f5_.ready),
        std::move(f6_.ready), std::move(f7_.ready), std::move(f8_.ready),
        std::move(f9_.ready), std::move(f10_.ready), std::move(f11_.ready),
        std::move(f12_.ready), std::move(f13_.ready), std::move(f14_.ready),
        std::move(f15_.ready), std::move(f16_.ready)));
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12, typename F13, typename F14,
          typename F15, typename F16, typename F17>
class Join<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
           F16, F17> {
 private:
  [[no_unique_address]] uint32_t state_ = 0;
  [[no_unique_address]] Fused<F0> f0_;
  using R0 = typename Fused<F0>::Result;
  [[no_unique_address]] Fused<F1> f1_;
  using R1 = typename Fused<F1>::Result;
  [[no_unique_address]] Fused<F2> f2_;
  using R2 = typename Fused<F2>::Result;
  [[no_unique_address]] Fused<F3> f3_;
  using R3 = typename Fused<F3>::Result;
  [[no_unique_address]] Fused<F4> f4_;
  using R4 = typename Fused<F4>::Result;
  [[no_unique_address]] Fused<F5> f5_;
  using R5 = typename Fused<F5>::Result;
  [[no_unique_address]] Fused<F6> f6_;
  using R6 = typename Fused<F6>::Result;
  [[no_unique_address]] Fused<F7> f7_;
  using R7 = typename Fused<F7>::Result;
  [[no_unique_address]] Fused<F8> f8_;
  using R8 = typename Fused<F8>::Result;
  [[no_unique_address]] Fused<F9> f9_;
  using R9 = typename Fused<F9>::Result;
  [[no_unique_address]] Fused<F10> f10_;
  using R10 = typename Fused<F10>::Result;
  [[no_unique_address]] Fused<F11> f11_;
  using R11 = typename Fused<F11>::Result;
  [[no_unique_address]] Fused<F12> f12_;
  using R12 = typename Fused<F12>::Result;
  [[no_unique_address]] Fused<F13> f13_;
  using R13 = typename Fused<F13>::Result;
  [[no_unique_address]] Fused<F14> f14_;
  using R14 = typename Fused<F14>::Result;
  [[no_unique_address]] Fused<F15> f15_;
  using R15 = typename Fused<F15>::Result;
  [[no_unique_address]] Fused<F16> f16_;
  using R16 = typename Fused<F16>::Result;
  [[no_unique_address]] Fused<F17> f17_;
  using R17 = typename Fused<F17>::Result;

 public:
  Join(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
       F10 f10, F11 f11, F12 f12, F13 f13, F14 f14, F15 f15, F16 f16, F17 f17) {
    Construct(&f0_.pending, std::move(f0));
    Construct(&f1_.pending, std::move(f1));
    Construct(&f2_.pending, std::move(f2));
    Construct(&f3_.pending, std::move(f3));
    Construct(&f4_.pending, std::move(f4));
    Construct(&f5_.pending, std::move(f5));
    Construct(&f6_.pending, std::move(f6));
    Construct(&f7_.pending, std::move(f7));
    Construct(&f8_.pending, std::move(f8));
    Construct(&f9_.pending, std::move(f9));
    Construct(&f10_.pending, std::move(f10));
    Construct(&f11_.pending, std::move(f11));
    Construct(&f12_.pending, std::move(f12));
    Construct(&f13_.pending, std::move(f13));
    Construct(&f14_.pending, std::move(f14));
    Construct(&f15_.pending, std::move(f15));
    Construct(&f16_.pending, std::move(f16));
    Construct(&f17_.pending, std::move(f17));
  }
  Join& operator=(const Join&) = delete;
  Join(const Join& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
    Construct(&f3_.pending, std::move(other.f3_.pending));
    Construct(&f4_.pending, std::move(other.f4_.pending));
    Construct(&f5_.pending, std::move(other.f5_.pending));
    Construct(&f6_.pending, std::move(other.f6_.pending));
    Construct(&f7_.pending, std::move(other.f7_.pending));
    Construct(&f8_.pending, std::move(other.f8_.pending));
    Construct(&f9_.pending, std::move(other.f9_.pending));
    Construct(&f10_.pending, std::move(other.f10_.pending));
    Construct(&f11_.pending, std::move(other.f11_.pending));
    Construct(&f12_.pending, std::move(other.f12_.pending));
    Construct(&f13_.pending, std::move(other.f13_.pending));
    Construct(&f14_.pending, std::move(other.f14_.pending));
    Construct(&f15_.pending, std::move(other.f15_.pending));
    Construct(&f16_.pending, std::move(other.f16_.pending));
    Construct(&f17_.pending, std::move(other.f17_.pending));
  }
  Join(Join&& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
    Construct(&f3_.pending, std::move(other.f3_.pending));
    Construct(&f4_.pending, std::move(other.f4_.pending));
    Construct(&f5_.pending, std::move(other.f5_.pending));
    Construct(&f6_.pending, std::move(other.f6_.pending));
    Construct(&f7_.pending, std::move(other.f7_.pending));
    Construct(&f8_.pending, std::move(other.f8_.pending));
    Construct(&f9_.pending, std::move(other.f9_.pending));
    Construct(&f10_.pending, std::move(other.f10_.pending));
    Construct(&f11_.pending, std::move(other.f11_.pending));
    Construct(&f12_.pending, std::move(other.f12_.pending));
    Construct(&f13_.pending, std::move(other.f13_.pending));
    Construct(&f14_.pending, std::move(other.f14_.pending));
    Construct(&f15_.pending, std::move(other.f15_.pending));
    Construct(&f16_.pending, std::move(other.f16_.pending));
    Construct(&f17_.pending, std::move(other.f17_.pending));
  }
  ~Join() {
    f0_.CallDestruct((state_ & 1) != 0);
    f1_.CallDestruct((state_ & 2) != 0);
    f2_.CallDestruct((state_ & 4) != 0);
    f3_.CallDestruct((state_ & 8) != 0);
    f4_.CallDestruct((state_ & 16) != 0);
    f5_.CallDestruct((state_ & 32) != 0);
    f6_.CallDestruct((state_ & 64) != 0);
    f7_.CallDestruct((state_ & 128) != 0);
    f8_.CallDestruct((state_ & 256) != 0);
    f9_.CallDestruct((state_ & 512) != 0);
    f10_.CallDestruct((state_ & 1024) != 0);
    f11_.CallDestruct((state_ & 2048) != 0);
    f12_.CallDestruct((state_ & 4096) != 0);
    f13_.CallDestruct((state_ & 8192) != 0);
    f14_.CallDestruct((state_ & 16384) != 0);
    f15_.CallDestruct((state_ & 32768) != 0);
    f16_.CallDestruct((state_ & 65536) != 0);
    f17_.CallDestruct((state_ & 131072) != 0);
  }
  Poll<std::tuple<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13,
                  R14, R15, R16, R17>>
  operator()() {
    f0_.Poll(&state_, decltype(state_)(1));
    f1_.Poll(&state_, decltype(state_)(2));
    f2_.Poll(&state_, decltype(state_)(4));
    f3_.Poll(&state_, decltype(state_)(8));
    f4_.Poll(&state_, decltype(state_)(16));
    f5_.Poll(&state_, decltype(state_)(32));
    f6_.Poll(&state_, decltype(state_)(64));
    f7_.Poll(&state_, decltype(state_)(128));
    f8_.Poll(&state_, decltype(state_)(256));
    f9_.Poll(&state_, decltype(state_)(512));
    f10_.Poll(&state_, decltype(state_)(1024));
    f11_.Poll(&state_, decltype(state_)(2048));
    f12_.Poll(&state_, decltype(state_)(4096));
    f13_.Poll(&state_, decltype(state_)(8192));
    f14_.Poll(&state_, decltype(state_)(16384));
    f15_.Poll(&state_, decltype(state_)(32768));
    f16_.Poll(&state_, decltype(state_)(65536));
    f17_.Poll(&state_, decltype(state_)(131072));
    if (state_ != 262143) return kPending;
    return ready(std::tuple<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11,
                            R12, R13, R14, R15, R16, R17>(
        std::move(f0_.ready), std::move(f1_.ready), std::move(f2_.ready),
        std::move(f3_.ready), std::move(f4_.ready), std::move(f5_.ready),
        std::move(f6_.ready), std::move(f7_.ready), std::move(f8_.ready),
        std::move(f9_.ready), std::move(f10_.ready), std::move(f11_.ready),
        std::move(f12_.ready), std::move(f13_.ready), std::move(f14_.ready),
        std::move(f15_.ready), std::move(f16_.ready), std::move(f17_.ready)));
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12, typename F13, typename F14,
          typename F15, typename F16, typename F17, typename F18>
class Join<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
           F16, F17, F18> {
 private:
  [[no_unique_address]] uint32_t state_ = 0;
  [[no_unique_address]] Fused<F0> f0_;
  using R0 = typename Fused<F0>::Result;
  [[no_unique_address]] Fused<F1> f1_;
  using R1 = typename Fused<F1>::Result;
  [[no_unique_address]] Fused<F2> f2_;
  using R2 = typename Fused<F2>::Result;
  [[no_unique_address]] Fused<F3> f3_;
  using R3 = typename Fused<F3>::Result;
  [[no_unique_address]] Fused<F4> f4_;
  using R4 = typename Fused<F4>::Result;
  [[no_unique_address]] Fused<F5> f5_;
  using R5 = typename Fused<F5>::Result;
  [[no_unique_address]] Fused<F6> f6_;
  using R6 = typename Fused<F6>::Result;
  [[no_unique_address]] Fused<F7> f7_;
  using R7 = typename Fused<F7>::Result;
  [[no_unique_address]] Fused<F8> f8_;
  using R8 = typename Fused<F8>::Result;
  [[no_unique_address]] Fused<F9> f9_;
  using R9 = typename Fused<F9>::Result;
  [[no_unique_address]] Fused<F10> f10_;
  using R10 = typename Fused<F10>::Result;
  [[no_unique_address]] Fused<F11> f11_;
  using R11 = typename Fused<F11>::Result;
  [[no_unique_address]] Fused<F12> f12_;
  using R12 = typename Fused<F12>::Result;
  [[no_unique_address]] Fused<F13> f13_;
  using R13 = typename Fused<F13>::Result;
  [[no_unique_address]] Fused<F14> f14_;
  using R14 = typename Fused<F14>::Result;
  [[no_unique_address]] Fused<F15> f15_;
  using R15 = typename Fused<F15>::Result;
  [[no_unique_address]] Fused<F16> f16_;
  using R16 = typename Fused<F16>::Result;
  [[no_unique_address]] Fused<F17> f17_;
  using R17 = typename Fused<F17>::Result;
  [[no_unique_address]] Fused<F18> f18_;
  using R18 = typename Fused<F18>::Result;

 public:
  Join(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
       F10 f10, F11 f11, F12 f12, F13 f13, F14 f14, F15 f15, F16 f16, F17 f17,
       F18 f18) {
    Construct(&f0_.pending, std::move(f0));
    Construct(&f1_.pending, std::move(f1));
    Construct(&f2_.pending, std::move(f2));
    Construct(&f3_.pending, std::move(f3));
    Construct(&f4_.pending, std::move(f4));
    Construct(&f5_.pending, std::move(f5));
    Construct(&f6_.pending, std::move(f6));
    Construct(&f7_.pending, std::move(f7));
    Construct(&f8_.pending, std::move(f8));
    Construct(&f9_.pending, std::move(f9));
    Construct(&f10_.pending, std::move(f10));
    Construct(&f11_.pending, std::move(f11));
    Construct(&f12_.pending, std::move(f12));
    Construct(&f13_.pending, std::move(f13));
    Construct(&f14_.pending, std::move(f14));
    Construct(&f15_.pending, std::move(f15));
    Construct(&f16_.pending, std::move(f16));
    Construct(&f17_.pending, std::move(f17));
    Construct(&f18_.pending, std::move(f18));
  }
  Join& operator=(const Join&) = delete;
  Join(const Join& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
    Construct(&f3_.pending, std::move(other.f3_.pending));
    Construct(&f4_.pending, std::move(other.f4_.pending));
    Construct(&f5_.pending, std::move(other.f5_.pending));
    Construct(&f6_.pending, std::move(other.f6_.pending));
    Construct(&f7_.pending, std::move(other.f7_.pending));
    Construct(&f8_.pending, std::move(other.f8_.pending));
    Construct(&f9_.pending, std::move(other.f9_.pending));
    Construct(&f10_.pending, std::move(other.f10_.pending));
    Construct(&f11_.pending, std::move(other.f11_.pending));
    Construct(&f12_.pending, std::move(other.f12_.pending));
    Construct(&f13_.pending, std::move(other.f13_.pending));
    Construct(&f14_.pending, std::move(other.f14_.pending));
    Construct(&f15_.pending, std::move(other.f15_.pending));
    Construct(&f16_.pending, std::move(other.f16_.pending));
    Construct(&f17_.pending, std::move(other.f17_.pending));
    Construct(&f18_.pending, std::move(other.f18_.pending));
  }
  Join(Join&& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
    Construct(&f3_.pending, std::move(other.f3_.pending));
    Construct(&f4_.pending, std::move(other.f4_.pending));
    Construct(&f5_.pending, std::move(other.f5_.pending));
    Construct(&f6_.pending, std::move(other.f6_.pending));
    Construct(&f7_.pending, std::move(other.f7_.pending));
    Construct(&f8_.pending, std::move(other.f8_.pending));
    Construct(&f9_.pending, std::move(other.f9_.pending));
    Construct(&f10_.pending, std::move(other.f10_.pending));
    Construct(&f11_.pending, std::move(other.f11_.pending));
    Construct(&f12_.pending, std::move(other.f12_.pending));
    Construct(&f13_.pending, std::move(other.f13_.pending));
    Construct(&f14_.pending, std::move(other.f14_.pending));
    Construct(&f15_.pending, std::move(other.f15_.pending));
    Construct(&f16_.pending, std::move(other.f16_.pending));
    Construct(&f17_.pending, std::move(other.f17_.pending));
    Construct(&f18_.pending, std::move(other.f18_.pending));
  }
  ~Join() {
    f0_.CallDestruct((state_ & 1) != 0);
    f1_.CallDestruct((state_ & 2) != 0);
    f2_.CallDestruct((state_ & 4) != 0);
    f3_.CallDestruct((state_ & 8) != 0);
    f4_.CallDestruct((state_ & 16) != 0);
    f5_.CallDestruct((state_ & 32) != 0);
    f6_.CallDestruct((state_ & 64) != 0);
    f7_.CallDestruct((state_ & 128) != 0);
    f8_.CallDestruct((state_ & 256) != 0);
    f9_.CallDestruct((state_ & 512) != 0);
    f10_.CallDestruct((state_ & 1024) != 0);
    f11_.CallDestruct((state_ & 2048) != 0);
    f12_.CallDestruct((state_ & 4096) != 0);
    f13_.CallDestruct((state_ & 8192) != 0);
    f14_.CallDestruct((state_ & 16384) != 0);
    f15_.CallDestruct((state_ & 32768) != 0);
    f16_.CallDestruct((state_ & 65536) != 0);
    f17_.CallDestruct((state_ & 131072) != 0);
    f18_.CallDestruct((state_ & 262144) != 0);
  }
  Poll<std::tuple<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13,
                  R14, R15, R16, R17, R18>>
  operator()() {
    f0_.Poll(&state_, decltype(state_)(1));
    f1_.Poll(&state_, decltype(state_)(2));
    f2_.Poll(&state_, decltype(state_)(4));
    f3_.Poll(&state_, decltype(state_)(8));
    f4_.Poll(&state_, decltype(state_)(16));
    f5_.Poll(&state_, decltype(state_)(32));
    f6_.Poll(&state_, decltype(state_)(64));
    f7_.Poll(&state_, decltype(state_)(128));
    f8_.Poll(&state_, decltype(state_)(256));
    f9_.Poll(&state_, decltype(state_)(512));
    f10_.Poll(&state_, decltype(state_)(1024));
    f11_.Poll(&state_, decltype(state_)(2048));
    f12_.Poll(&state_, decltype(state_)(4096));
    f13_.Poll(&state_, decltype(state_)(8192));
    f14_.Poll(&state_, decltype(state_)(16384));
    f15_.Poll(&state_, decltype(state_)(32768));
    f16_.Poll(&state_, decltype(state_)(65536));
    f17_.Poll(&state_, decltype(state_)(131072));
    f18_.Poll(&state_, decltype(state_)(262144));
    if (state_ != 524287) return kPending;
    return ready(std::tuple<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11,
                            R12, R13, R14, R15, R16, R17, R18>(
        std::move(f0_.ready), std::move(f1_.ready), std::move(f2_.ready),
        std::move(f3_.ready), std::move(f4_.ready), std::move(f5_.ready),
        std::move(f6_.ready), std::move(f7_.ready), std::move(f8_.ready),
        std::move(f9_.ready), std::move(f10_.ready), std::move(f11_.ready),
        std::move(f12_.ready), std::move(f13_.ready), std::move(f14_.ready),
        std::move(f15_.ready), std::move(f16_.ready), std::move(f17_.ready),
        std::move(f18_.ready)));
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12, typename F13, typename F14,
          typename F15, typename F16, typename F17, typename F18, typename F19>
class Join<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
           F16, F17, F18, F19> {
 private:
  [[no_unique_address]] uint32_t state_ = 0;
  [[no_unique_address]] Fused<F0> f0_;
  using R0 = typename Fused<F0>::Result;
  [[no_unique_address]] Fused<F1> f1_;
  using R1 = typename Fused<F1>::Result;
  [[no_unique_address]] Fused<F2> f2_;
  using R2 = typename Fused<F2>::Result;
  [[no_unique_address]] Fused<F3> f3_;
  using R3 = typename Fused<F3>::Result;
  [[no_unique_address]] Fused<F4> f4_;
  using R4 = typename Fused<F4>::Result;
  [[no_unique_address]] Fused<F5> f5_;
  using R5 = typename Fused<F5>::Result;
  [[no_unique_address]] Fused<F6> f6_;
  using R6 = typename Fused<F6>::Result;
  [[no_unique_address]] Fused<F7> f7_;
  using R7 = typename Fused<F7>::Result;
  [[no_unique_address]] Fused<F8> f8_;
  using R8 = typename Fused<F8>::Result;
  [[no_unique_address]] Fused<F9> f9_;
  using R9 = typename Fused<F9>::Result;
  [[no_unique_address]] Fused<F10> f10_;
  using R10 = typename Fused<F10>::Result;
  [[no_unique_address]] Fused<F11> f11_;
  using R11 = typename Fused<F11>::Result;
  [[no_unique_address]] Fused<F12> f12_;
  using R12 = typename Fused<F12>::Result;
  [[no_unique_address]] Fused<F13> f13_;
  using R13 = typename Fused<F13>::Result;
  [[no_unique_address]] Fused<F14> f14_;
  using R14 = typename Fused<F14>::Result;
  [[no_unique_address]] Fused<F15> f15_;
  using R15 = typename Fused<F15>::Result;
  [[no_unique_address]] Fused<F16> f16_;
  using R16 = typename Fused<F16>::Result;
  [[no_unique_address]] Fused<F17> f17_;
  using R17 = typename Fused<F17>::Result;
  [[no_unique_address]] Fused<F18> f18_;
  using R18 = typename Fused<F18>::Result;
  [[no_unique_address]] Fused<F19> f19_;
  using R19 = typename Fused<F19>::Result;

 public:
  Join(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
       F10 f10, F11 f11, F12 f12, F13 f13, F14 f14, F15 f15, F16 f16, F17 f17,
       F18 f18, F19 f19) {
    Construct(&f0_.pending, std::move(f0));
    Construct(&f1_.pending, std::move(f1));
    Construct(&f2_.pending, std::move(f2));
    Construct(&f3_.pending, std::move(f3));
    Construct(&f4_.pending, std::move(f4));
    Construct(&f5_.pending, std::move(f5));
    Construct(&f6_.pending, std::move(f6));
    Construct(&f7_.pending, std::move(f7));
    Construct(&f8_.pending, std::move(f8));
    Construct(&f9_.pending, std::move(f9));
    Construct(&f10_.pending, std::move(f10));
    Construct(&f11_.pending, std::move(f11));
    Construct(&f12_.pending, std::move(f12));
    Construct(&f13_.pending, std::move(f13));
    Construct(&f14_.pending, std::move(f14));
    Construct(&f15_.pending, std::move(f15));
    Construct(&f16_.pending, std::move(f16));
    Construct(&f17_.pending, std::move(f17));
    Construct(&f18_.pending, std::move(f18));
    Construct(&f19_.pending, std::move(f19));
  }
  Join& operator=(const Join&) = delete;
  Join(const Join& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
    Construct(&f3_.pending, std::move(other.f3_.pending));
    Construct(&f4_.pending, std::move(other.f4_.pending));
    Construct(&f5_.pending, std::move(other.f5_.pending));
    Construct(&f6_.pending, std::move(other.f6_.pending));
    Construct(&f7_.pending, std::move(other.f7_.pending));
    Construct(&f8_.pending, std::move(other.f8_.pending));
    Construct(&f9_.pending, std::move(other.f9_.pending));
    Construct(&f10_.pending, std::move(other.f10_.pending));
    Construct(&f11_.pending, std::move(other.f11_.pending));
    Construct(&f12_.pending, std::move(other.f12_.pending));
    Construct(&f13_.pending, std::move(other.f13_.pending));
    Construct(&f14_.pending, std::move(other.f14_.pending));
    Construct(&f15_.pending, std::move(other.f15_.pending));
    Construct(&f16_.pending, std::move(other.f16_.pending));
    Construct(&f17_.pending, std::move(other.f17_.pending));
    Construct(&f18_.pending, std::move(other.f18_.pending));
    Construct(&f19_.pending, std::move(other.f19_.pending));
  }
  Join(Join&& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
    Construct(&f3_.pending, std::move(other.f3_.pending));
    Construct(&f4_.pending, std::move(other.f4_.pending));
    Construct(&f5_.pending, std::move(other.f5_.pending));
    Construct(&f6_.pending, std::move(other.f6_.pending));
    Construct(&f7_.pending, std::move(other.f7_.pending));
    Construct(&f8_.pending, std::move(other.f8_.pending));
    Construct(&f9_.pending, std::move(other.f9_.pending));
    Construct(&f10_.pending, std::move(other.f10_.pending));
    Construct(&f11_.pending, std::move(other.f11_.pending));
    Construct(&f12_.pending, std::move(other.f12_.pending));
    Construct(&f13_.pending, std::move(other.f13_.pending));
    Construct(&f14_.pending, std::move(other.f14_.pending));
    Construct(&f15_.pending, std::move(other.f15_.pending));
    Construct(&f16_.pending, std::move(other.f16_.pending));
    Construct(&f17_.pending, std::move(other.f17_.pending));
    Construct(&f18_.pending, std::move(other.f18_.pending));
    Construct(&f19_.pending, std::move(other.f19_.pending));
  }
  ~Join() {
    f0_.CallDestruct((state_ & 1) != 0);
    f1_.CallDestruct((state_ & 2) != 0);
    f2_.CallDestruct((state_ & 4) != 0);
    f3_.CallDestruct((state_ & 8) != 0);
    f4_.CallDestruct((state_ & 16) != 0);
    f5_.CallDestruct((state_ & 32) != 0);
    f6_.CallDestruct((state_ & 64) != 0);
    f7_.CallDestruct((state_ & 128) != 0);
    f8_.CallDestruct((state_ & 256) != 0);
    f9_.CallDestruct((state_ & 512) != 0);
    f10_.CallDestruct((state_ & 1024) != 0);
    f11_.CallDestruct((state_ & 2048) != 0);
    f12_.CallDestruct((state_ & 4096) != 0);
    f13_.CallDestruct((state_ & 8192) != 0);
    f14_.CallDestruct((state_ & 16384) != 0);
    f15_.CallDestruct((state_ & 32768) != 0);
    f16_.CallDestruct((state_ & 65536) != 0);
    f17_.CallDestruct((state_ & 131072) != 0);
    f18_.CallDestruct((state_ & 262144) != 0);
    f19_.CallDestruct((state_ & 524288) != 0);
  }
  Poll<std::tuple<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13,
                  R14, R15, R16, R17, R18, R19>>
  operator()() {
    f0_.Poll(&state_, decltype(state_)(1));
    f1_.Poll(&state_, decltype(state_)(2));
    f2_.Poll(&state_, decltype(state_)(4));
    f3_.Poll(&state_, decltype(state_)(8));
    f4_.Poll(&state_, decltype(state_)(16));
    f5_.Poll(&state_, decltype(state_)(32));
    f6_.Poll(&state_, decltype(state_)(64));
    f7_.Poll(&state_, decltype(state_)(128));
    f8_.Poll(&state_, decltype(state_)(256));
    f9_.Poll(&state_, decltype(state_)(512));
    f10_.Poll(&state_, decltype(state_)(1024));
    f11_.Poll(&state_, decltype(state_)(2048));
    f12_.Poll(&state_, decltype(state_)(4096));
    f13_.Poll(&state_, decltype(state_)(8192));
    f14_.Poll(&state_, decltype(state_)(16384));
    f15_.Poll(&state_, decltype(state_)(32768));
    f16_.Poll(&state_, decltype(state_)(65536));
    f17_.Poll(&state_, decltype(state_)(131072));
    f18_.Poll(&state_, decltype(state_)(262144));
    f19_.Poll(&state_, decltype(state_)(524288));
    if (state_ != 1048575) return kPending;
    return ready(std::tuple<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11,
                            R12, R13, R14, R15, R16, R17, R18, R19>(
        std::move(f0_.ready), std::move(f1_.ready), std::move(f2_.ready),
        std::move(f3_.ready), std::move(f4_.ready), std::move(f5_.ready),
        std::move(f6_.ready), std::move(f7_.ready), std::move(f8_.ready),
        std::move(f9_.ready), std::move(f10_.ready), std::move(f11_.ready),
        std::move(f12_.ready), std::move(f13_.ready), std::move(f14_.ready),
        std::move(f15_.ready), std::move(f16_.ready), std::move(f17_.ready),
        std::move(f18_.ready), std::move(f19_.ready)));
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12, typename F13, typename F14,
          typename F15, typename F16, typename F17, typename F18, typename F19,
          typename F20>
class Join<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
           F16, F17, F18, F19, F20> {
 private:
  [[no_unique_address]] uint32_t state_ = 0;
  [[no_unique_address]] Fused<F0> f0_;
  using R0 = typename Fused<F0>::Result;
  [[no_unique_address]] Fused<F1> f1_;
  using R1 = typename Fused<F1>::Result;
  [[no_unique_address]] Fused<F2> f2_;
  using R2 = typename Fused<F2>::Result;
  [[no_unique_address]] Fused<F3> f3_;
  using R3 = typename Fused<F3>::Result;
  [[no_unique_address]] Fused<F4> f4_;
  using R4 = typename Fused<F4>::Result;
  [[no_unique_address]] Fused<F5> f5_;
  using R5 = typename Fused<F5>::Result;
  [[no_unique_address]] Fused<F6> f6_;
  using R6 = typename Fused<F6>::Result;
  [[no_unique_address]] Fused<F7> f7_;
  using R7 = typename Fused<F7>::Result;
  [[no_unique_address]] Fused<F8> f8_;
  using R8 = typename Fused<F8>::Result;
  [[no_unique_address]] Fused<F9> f9_;
  using R9 = typename Fused<F9>::Result;
  [[no_unique_address]] Fused<F10> f10_;
  using R10 = typename Fused<F10>::Result;
  [[no_unique_address]] Fused<F11> f11_;
  using R11 = typename Fused<F11>::Result;
  [[no_unique_address]] Fused<F12> f12_;
  using R12 = typename Fused<F12>::Result;
  [[no_unique_address]] Fused<F13> f13_;
  using R13 = typename Fused<F13>::Result;
  [[no_unique_address]] Fused<F14> f14_;
  using R14 = typename Fused<F14>::Result;
  [[no_unique_address]] Fused<F15> f15_;
  using R15 = typename Fused<F15>::Result;
  [[no_unique_address]] Fused<F16> f16_;
  using R16 = typename Fused<F16>::Result;
  [[no_unique_address]] Fused<F17> f17_;
  using R17 = typename Fused<F17>::Result;
  [[no_unique_address]] Fused<F18> f18_;
  using R18 = typename Fused<F18>::Result;
  [[no_unique_address]] Fused<F19> f19_;
  using R19 = typename Fused<F19>::Result;
  [[no_unique_address]] Fused<F20> f20_;
  using R20 = typename Fused<F20>::Result;

 public:
  Join(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
       F10 f10, F11 f11, F12 f12, F13 f13, F14 f14, F15 f15, F16 f16, F17 f17,
       F18 f18, F19 f19, F20 f20) {
    Construct(&f0_.pending, std::move(f0));
    Construct(&f1_.pending, std::move(f1));
    Construct(&f2_.pending, std::move(f2));
    Construct(&f3_.pending, std::move(f3));
    Construct(&f4_.pending, std::move(f4));
    Construct(&f5_.pending, std::move(f5));
    Construct(&f6_.pending, std::move(f6));
    Construct(&f7_.pending, std::move(f7));
    Construct(&f8_.pending, std::move(f8));
    Construct(&f9_.pending, std::move(f9));
    Construct(&f10_.pending, std::move(f10));
    Construct(&f11_.pending, std::move(f11));
    Construct(&f12_.pending, std::move(f12));
    Construct(&f13_.pending, std::move(f13));
    Construct(&f14_.pending, std::move(f14));
    Construct(&f15_.pending, std::move(f15));
    Construct(&f16_.pending, std::move(f16));
    Construct(&f17_.pending, std::move(f17));
    Construct(&f18_.pending, std::move(f18));
    Construct(&f19_.pending, std::move(f19));
    Construct(&f20_.pending, std::move(f20));
  }
  Join& operator=(const Join&) = delete;
  Join(const Join& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
    Construct(&f3_.pending, std::move(other.f3_.pending));
    Construct(&f4_.pending, std::move(other.f4_.pending));
    Construct(&f5_.pending, std::move(other.f5_.pending));
    Construct(&f6_.pending, std::move(other.f6_.pending));
    Construct(&f7_.pending, std::move(other.f7_.pending));
    Construct(&f8_.pending, std::move(other.f8_.pending));
    Construct(&f9_.pending, std::move(other.f9_.pending));
    Construct(&f10_.pending, std::move(other.f10_.pending));
    Construct(&f11_.pending, std::move(other.f11_.pending));
    Construct(&f12_.pending, std::move(other.f12_.pending));
    Construct(&f13_.pending, std::move(other.f13_.pending));
    Construct(&f14_.pending, std::move(other.f14_.pending));
    Construct(&f15_.pending, std::move(other.f15_.pending));
    Construct(&f16_.pending, std::move(other.f16_.pending));
    Construct(&f17_.pending, std::move(other.f17_.pending));
    Construct(&f18_.pending, std::move(other.f18_.pending));
    Construct(&f19_.pending, std::move(other.f19_.pending));
    Construct(&f20_.pending, std::move(other.f20_.pending));
  }
  Join(Join&& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
    Construct(&f3_.pending, std::move(other.f3_.pending));
    Construct(&f4_.pending, std::move(other.f4_.pending));
    Construct(&f5_.pending, std::move(other.f5_.pending));
    Construct(&f6_.pending, std::move(other.f6_.pending));
    Construct(&f7_.pending, std::move(other.f7_.pending));
    Construct(&f8_.pending, std::move(other.f8_.pending));
    Construct(&f9_.pending, std::move(other.f9_.pending));
    Construct(&f10_.pending, std::move(other.f10_.pending));
    Construct(&f11_.pending, std::move(other.f11_.pending));
    Construct(&f12_.pending, std::move(other.f12_.pending));
    Construct(&f13_.pending, std::move(other.f13_.pending));
    Construct(&f14_.pending, std::move(other.f14_.pending));
    Construct(&f15_.pending, std::move(other.f15_.pending));
    Construct(&f16_.pending, std::move(other.f16_.pending));
    Construct(&f17_.pending, std::move(other.f17_.pending));
    Construct(&f18_.pending, std::move(other.f18_.pending));
    Construct(&f19_.pending, std::move(other.f19_.pending));
    Construct(&f20_.pending, std::move(other.f20_.pending));
  }
  ~Join() {
    f0_.CallDestruct((state_ & 1) != 0);
    f1_.CallDestruct((state_ & 2) != 0);
    f2_.CallDestruct((state_ & 4) != 0);
    f3_.CallDestruct((state_ & 8) != 0);
    f4_.CallDestruct((state_ & 16) != 0);
    f5_.CallDestruct((state_ & 32) != 0);
    f6_.CallDestruct((state_ & 64) != 0);
    f7_.CallDestruct((state_ & 128) != 0);
    f8_.CallDestruct((state_ & 256) != 0);
    f9_.CallDestruct((state_ & 512) != 0);
    f10_.CallDestruct((state_ & 1024) != 0);
    f11_.CallDestruct((state_ & 2048) != 0);
    f12_.CallDestruct((state_ & 4096) != 0);
    f13_.CallDestruct((state_ & 8192) != 0);
    f14_.CallDestruct((state_ & 16384) != 0);
    f15_.CallDestruct((state_ & 32768) != 0);
    f16_.CallDestruct((state_ & 65536) != 0);
    f17_.CallDestruct((state_ & 131072) != 0);
    f18_.CallDestruct((state_ & 262144) != 0);
    f19_.CallDestruct((state_ & 524288) != 0);
    f20_.CallDestruct((state_ & 1048576) != 0);
  }
  Poll<std::tuple<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13,
                  R14, R15, R16, R17, R18, R19, R20>>
  operator()() {
    f0_.Poll(&state_, decltype(state_)(1));
    f1_.Poll(&state_, decltype(state_)(2));
    f2_.Poll(&state_, decltype(state_)(4));
    f3_.Poll(&state_, decltype(state_)(8));
    f4_.Poll(&state_, decltype(state_)(16));
    f5_.Poll(&state_, decltype(state_)(32));
    f6_.Poll(&state_, decltype(state_)(64));
    f7_.Poll(&state_, decltype(state_)(128));
    f8_.Poll(&state_, decltype(state_)(256));
    f9_.Poll(&state_, decltype(state_)(512));
    f10_.Poll(&state_, decltype(state_)(1024));
    f11_.Poll(&state_, decltype(state_)(2048));
    f12_.Poll(&state_, decltype(state_)(4096));
    f13_.Poll(&state_, decltype(state_)(8192));
    f14_.Poll(&state_, decltype(state_)(16384));
    f15_.Poll(&state_, decltype(state_)(32768));
    f16_.Poll(&state_, decltype(state_)(65536));
    f17_.Poll(&state_, decltype(state_)(131072));
    f18_.Poll(&state_, decltype(state_)(262144));
    f19_.Poll(&state_, decltype(state_)(524288));
    f20_.Poll(&state_, decltype(state_)(1048576));
    if (state_ != 2097151) return kPending;
    return ready(std::tuple<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11,
                            R12, R13, R14, R15, R16, R17, R18, R19, R20>(
        std::move(f0_.ready), std::move(f1_.ready), std::move(f2_.ready),
        std::move(f3_.ready), std::move(f4_.ready), std::move(f5_.ready),
        std::move(f6_.ready), std::move(f7_.ready), std::move(f8_.ready),
        std::move(f9_.ready), std::move(f10_.ready), std::move(f11_.ready),
        std::move(f12_.ready), std::move(f13_.ready), std::move(f14_.ready),
        std::move(f15_.ready), std::move(f16_.ready), std::move(f17_.ready),
        std::move(f18_.ready), std::move(f19_.ready), std::move(f20_.ready)));
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12, typename F13, typename F14,
          typename F15, typename F16, typename F17, typename F18, typename F19,
          typename F20, typename F21>
class Join<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
           F16, F17, F18, F19, F20, F21> {
 private:
  [[no_unique_address]] uint32_t state_ = 0;
  [[no_unique_address]] Fused<F0> f0_;
  using R0 = typename Fused<F0>::Result;
  [[no_unique_address]] Fused<F1> f1_;
  using R1 = typename Fused<F1>::Result;
  [[no_unique_address]] Fused<F2> f2_;
  using R2 = typename Fused<F2>::Result;
  [[no_unique_address]] Fused<F3> f3_;
  using R3 = typename Fused<F3>::Result;
  [[no_unique_address]] Fused<F4> f4_;
  using R4 = typename Fused<F4>::Result;
  [[no_unique_address]] Fused<F5> f5_;
  using R5 = typename Fused<F5>::Result;
  [[no_unique_address]] Fused<F6> f6_;
  using R6 = typename Fused<F6>::Result;
  [[no_unique_address]] Fused<F7> f7_;
  using R7 = typename Fused<F7>::Result;
  [[no_unique_address]] Fused<F8> f8_;
  using R8 = typename Fused<F8>::Result;
  [[no_unique_address]] Fused<F9> f9_;
  using R9 = typename Fused<F9>::Result;
  [[no_unique_address]] Fused<F10> f10_;
  using R10 = typename Fused<F10>::Result;
  [[no_unique_address]] Fused<F11> f11_;
  using R11 = typename Fused<F11>::Result;
  [[no_unique_address]] Fused<F12> f12_;
  using R12 = typename Fused<F12>::Result;
  [[no_unique_address]] Fused<F13> f13_;
  using R13 = typename Fused<F13>::Result;
  [[no_unique_address]] Fused<F14> f14_;
  using R14 = typename Fused<F14>::Result;
  [[no_unique_address]] Fused<F15> f15_;
  using R15 = typename Fused<F15>::Result;
  [[no_unique_address]] Fused<F16> f16_;
  using R16 = typename Fused<F16>::Result;
  [[no_unique_address]] Fused<F17> f17_;
  using R17 = typename Fused<F17>::Result;
  [[no_unique_address]] Fused<F18> f18_;
  using R18 = typename Fused<F18>::Result;
  [[no_unique_address]] Fused<F19> f19_;
  using R19 = typename Fused<F19>::Result;
  [[no_unique_address]] Fused<F20> f20_;
  using R20 = typename Fused<F20>::Result;
  [[no_unique_address]] Fused<F21> f21_;
  using R21 = typename Fused<F21>::Result;

 public:
  Join(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
       F10 f10, F11 f11, F12 f12, F13 f13, F14 f14, F15 f15, F16 f16, F17 f17,
       F18 f18, F19 f19, F20 f20, F21 f21) {
    Construct(&f0_.pending, std::move(f0));
    Construct(&f1_.pending, std::move(f1));
    Construct(&f2_.pending, std::move(f2));
    Construct(&f3_.pending, std::move(f3));
    Construct(&f4_.pending, std::move(f4));
    Construct(&f5_.pending, std::move(f5));
    Construct(&f6_.pending, std::move(f6));
    Construct(&f7_.pending, std::move(f7));
    Construct(&f8_.pending, std::move(f8));
    Construct(&f9_.pending, std::move(f9));
    Construct(&f10_.pending, std::move(f10));
    Construct(&f11_.pending, std::move(f11));
    Construct(&f12_.pending, std::move(f12));
    Construct(&f13_.pending, std::move(f13));
    Construct(&f14_.pending, std::move(f14));
    Construct(&f15_.pending, std::move(f15));
    Construct(&f16_.pending, std::move(f16));
    Construct(&f17_.pending, std::move(f17));
    Construct(&f18_.pending, std::move(f18));
    Construct(&f19_.pending, std::move(f19));
    Construct(&f20_.pending, std::move(f20));
    Construct(&f21_.pending, std::move(f21));
  }
  Join& operator=(const Join&) = delete;
  Join(const Join& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
    Construct(&f3_.pending, std::move(other.f3_.pending));
    Construct(&f4_.pending, std::move(other.f4_.pending));
    Construct(&f5_.pending, std::move(other.f5_.pending));
    Construct(&f6_.pending, std::move(other.f6_.pending));
    Construct(&f7_.pending, std::move(other.f7_.pending));
    Construct(&f8_.pending, std::move(other.f8_.pending));
    Construct(&f9_.pending, std::move(other.f9_.pending));
    Construct(&f10_.pending, std::move(other.f10_.pending));
    Construct(&f11_.pending, std::move(other.f11_.pending));
    Construct(&f12_.pending, std::move(other.f12_.pending));
    Construct(&f13_.pending, std::move(other.f13_.pending));
    Construct(&f14_.pending, std::move(other.f14_.pending));
    Construct(&f15_.pending, std::move(other.f15_.pending));
    Construct(&f16_.pending, std::move(other.f16_.pending));
    Construct(&f17_.pending, std::move(other.f17_.pending));
    Construct(&f18_.pending, std::move(other.f18_.pending));
    Construct(&f19_.pending, std::move(other.f19_.pending));
    Construct(&f20_.pending, std::move(other.f20_.pending));
    Construct(&f21_.pending, std::move(other.f21_.pending));
  }
  Join(Join&& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
    Construct(&f3_.pending, std::move(other.f3_.pending));
    Construct(&f4_.pending, std::move(other.f4_.pending));
    Construct(&f5_.pending, std::move(other.f5_.pending));
    Construct(&f6_.pending, std::move(other.f6_.pending));
    Construct(&f7_.pending, std::move(other.f7_.pending));
    Construct(&f8_.pending, std::move(other.f8_.pending));
    Construct(&f9_.pending, std::move(other.f9_.pending));
    Construct(&f10_.pending, std::move(other.f10_.pending));
    Construct(&f11_.pending, std::move(other.f11_.pending));
    Construct(&f12_.pending, std::move(other.f12_.pending));
    Construct(&f13_.pending, std::move(other.f13_.pending));
    Construct(&f14_.pending, std::move(other.f14_.pending));
    Construct(&f15_.pending, std::move(other.f15_.pending));
    Construct(&f16_.pending, std::move(other.f16_.pending));
    Construct(&f17_.pending, std::move(other.f17_.pending));
    Construct(&f18_.pending, std::move(other.f18_.pending));
    Construct(&f19_.pending, std::move(other.f19_.pending));
    Construct(&f20_.pending, std::move(other.f20_.pending));
    Construct(&f21_.pending, std::move(other.f21_.pending));
  }
  ~Join() {
    f0_.CallDestruct((state_ & 1) != 0);
    f1_.CallDestruct((state_ & 2) != 0);
    f2_.CallDestruct((state_ & 4) != 0);
    f3_.CallDestruct((state_ & 8) != 0);
    f4_.CallDestruct((state_ & 16) != 0);
    f5_.CallDestruct((state_ & 32) != 0);
    f6_.CallDestruct((state_ & 64) != 0);
    f7_.CallDestruct((state_ & 128) != 0);
    f8_.CallDestruct((state_ & 256) != 0);
    f9_.CallDestruct((state_ & 512) != 0);
    f10_.CallDestruct((state_ & 1024) != 0);
    f11_.CallDestruct((state_ & 2048) != 0);
    f12_.CallDestruct((state_ & 4096) != 0);
    f13_.CallDestruct((state_ & 8192) != 0);
    f14_.CallDestruct((state_ & 16384) != 0);
    f15_.CallDestruct((state_ & 32768) != 0);
    f16_.CallDestruct((state_ & 65536) != 0);
    f17_.CallDestruct((state_ & 131072) != 0);
    f18_.CallDestruct((state_ & 262144) != 0);
    f19_.CallDestruct((state_ & 524288) != 0);
    f20_.CallDestruct((state_ & 1048576) != 0);
    f21_.CallDestruct((state_ & 2097152) != 0);
  }
  Poll<std::tuple<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13,
                  R14, R15, R16, R17, R18, R19, R20, R21>>
  operator()() {
    f0_.Poll(&state_, decltype(state_)(1));
    f1_.Poll(&state_, decltype(state_)(2));
    f2_.Poll(&state_, decltype(state_)(4));
    f3_.Poll(&state_, decltype(state_)(8));
    f4_.Poll(&state_, decltype(state_)(16));
    f5_.Poll(&state_, decltype(state_)(32));
    f6_.Poll(&state_, decltype(state_)(64));
    f7_.Poll(&state_, decltype(state_)(128));
    f8_.Poll(&state_, decltype(state_)(256));
    f9_.Poll(&state_, decltype(state_)(512));
    f10_.Poll(&state_, decltype(state_)(1024));
    f11_.Poll(&state_, decltype(state_)(2048));
    f12_.Poll(&state_, decltype(state_)(4096));
    f13_.Poll(&state_, decltype(state_)(8192));
    f14_.Poll(&state_, decltype(state_)(16384));
    f15_.Poll(&state_, decltype(state_)(32768));
    f16_.Poll(&state_, decltype(state_)(65536));
    f17_.Poll(&state_, decltype(state_)(131072));
    f18_.Poll(&state_, decltype(state_)(262144));
    f19_.Poll(&state_, decltype(state_)(524288));
    f20_.Poll(&state_, decltype(state_)(1048576));
    f21_.Poll(&state_, decltype(state_)(2097152));
    if (state_ != 4194303) return kPending;
    return ready(std::tuple<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11,
                            R12, R13, R14, R15, R16, R17, R18, R19, R20, R21>(
        std::move(f0_.ready), std::move(f1_.ready), std::move(f2_.ready),
        std::move(f3_.ready), std::move(f4_.ready), std::move(f5_.ready),
        std::move(f6_.ready), std::move(f7_.ready), std::move(f8_.ready),
        std::move(f9_.ready), std::move(f10_.ready), std::move(f11_.ready),
        std::move(f12_.ready), std::move(f13_.ready), std::move(f14_.ready),
        std::move(f15_.ready), std::move(f16_.ready), std::move(f17_.ready),
        std::move(f18_.ready), std::move(f19_.ready), std::move(f20_.ready),
        std::move(f21_.ready)));
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12, typename F13, typename F14,
          typename F15, typename F16, typename F17, typename F18, typename F19,
          typename F20, typename F21, typename F22>
class Join<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
           F16, F17, F18, F19, F20, F21, F22> {
 private:
  [[no_unique_address]] uint32_t state_ = 0;
  [[no_unique_address]] Fused<F0> f0_;
  using R0 = typename Fused<F0>::Result;
  [[no_unique_address]] Fused<F1> f1_;
  using R1 = typename Fused<F1>::Result;
  [[no_unique_address]] Fused<F2> f2_;
  using R2 = typename Fused<F2>::Result;
  [[no_unique_address]] Fused<F3> f3_;
  using R3 = typename Fused<F3>::Result;
  [[no_unique_address]] Fused<F4> f4_;
  using R4 = typename Fused<F4>::Result;
  [[no_unique_address]] Fused<F5> f5_;
  using R5 = typename Fused<F5>::Result;
  [[no_unique_address]] Fused<F6> f6_;
  using R6 = typename Fused<F6>::Result;
  [[no_unique_address]] Fused<F7> f7_;
  using R7 = typename Fused<F7>::Result;
  [[no_unique_address]] Fused<F8> f8_;
  using R8 = typename Fused<F8>::Result;
  [[no_unique_address]] Fused<F9> f9_;
  using R9 = typename Fused<F9>::Result;
  [[no_unique_address]] Fused<F10> f10_;
  using R10 = typename Fused<F10>::Result;
  [[no_unique_address]] Fused<F11> f11_;
  using R11 = typename Fused<F11>::Result;
  [[no_unique_address]] Fused<F12> f12_;
  using R12 = typename Fused<F12>::Result;
  [[no_unique_address]] Fused<F13> f13_;
  using R13 = typename Fused<F13>::Result;
  [[no_unique_address]] Fused<F14> f14_;
  using R14 = typename Fused<F14>::Result;
  [[no_unique_address]] Fused<F15> f15_;
  using R15 = typename Fused<F15>::Result;
  [[no_unique_address]] Fused<F16> f16_;
  using R16 = typename Fused<F16>::Result;
  [[no_unique_address]] Fused<F17> f17_;
  using R17 = typename Fused<F17>::Result;
  [[no_unique_address]] Fused<F18> f18_;
  using R18 = typename Fused<F18>::Result;
  [[no_unique_address]] Fused<F19> f19_;
  using R19 = typename Fused<F19>::Result;
  [[no_unique_address]] Fused<F20> f20_;
  using R20 = typename Fused<F20>::Result;
  [[no_unique_address]] Fused<F21> f21_;
  using R21 = typename Fused<F21>::Result;
  [[no_unique_address]] Fused<F22> f22_;
  using R22 = typename Fused<F22>::Result;

 public:
  Join(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
       F10 f10, F11 f11, F12 f12, F13 f13, F14 f14, F15 f15, F16 f16, F17 f17,
       F18 f18, F19 f19, F20 f20, F21 f21, F22 f22) {
    Construct(&f0_.pending, std::move(f0));
    Construct(&f1_.pending, std::move(f1));
    Construct(&f2_.pending, std::move(f2));
    Construct(&f3_.pending, std::move(f3));
    Construct(&f4_.pending, std::move(f4));
    Construct(&f5_.pending, std::move(f5));
    Construct(&f6_.pending, std::move(f6));
    Construct(&f7_.pending, std::move(f7));
    Construct(&f8_.pending, std::move(f8));
    Construct(&f9_.pending, std::move(f9));
    Construct(&f10_.pending, std::move(f10));
    Construct(&f11_.pending, std::move(f11));
    Construct(&f12_.pending, std::move(f12));
    Construct(&f13_.pending, std::move(f13));
    Construct(&f14_.pending, std::move(f14));
    Construct(&f15_.pending, std::move(f15));
    Construct(&f16_.pending, std::move(f16));
    Construct(&f17_.pending, std::move(f17));
    Construct(&f18_.pending, std::move(f18));
    Construct(&f19_.pending, std::move(f19));
    Construct(&f20_.pending, std::move(f20));
    Construct(&f21_.pending, std::move(f21));
    Construct(&f22_.pending, std::move(f22));
  }
  Join& operator=(const Join&) = delete;
  Join(const Join& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
    Construct(&f3_.pending, std::move(other.f3_.pending));
    Construct(&f4_.pending, std::move(other.f4_.pending));
    Construct(&f5_.pending, std::move(other.f5_.pending));
    Construct(&f6_.pending, std::move(other.f6_.pending));
    Construct(&f7_.pending, std::move(other.f7_.pending));
    Construct(&f8_.pending, std::move(other.f8_.pending));
    Construct(&f9_.pending, std::move(other.f9_.pending));
    Construct(&f10_.pending, std::move(other.f10_.pending));
    Construct(&f11_.pending, std::move(other.f11_.pending));
    Construct(&f12_.pending, std::move(other.f12_.pending));
    Construct(&f13_.pending, std::move(other.f13_.pending));
    Construct(&f14_.pending, std::move(other.f14_.pending));
    Construct(&f15_.pending, std::move(other.f15_.pending));
    Construct(&f16_.pending, std::move(other.f16_.pending));
    Construct(&f17_.pending, std::move(other.f17_.pending));
    Construct(&f18_.pending, std::move(other.f18_.pending));
    Construct(&f19_.pending, std::move(other.f19_.pending));
    Construct(&f20_.pending, std::move(other.f20_.pending));
    Construct(&f21_.pending, std::move(other.f21_.pending));
    Construct(&f22_.pending, std::move(other.f22_.pending));
  }
  Join(Join&& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
    Construct(&f3_.pending, std::move(other.f3_.pending));
    Construct(&f4_.pending, std::move(other.f4_.pending));
    Construct(&f5_.pending, std::move(other.f5_.pending));
    Construct(&f6_.pending, std::move(other.f6_.pending));
    Construct(&f7_.pending, std::move(other.f7_.pending));
    Construct(&f8_.pending, std::move(other.f8_.pending));
    Construct(&f9_.pending, std::move(other.f9_.pending));
    Construct(&f10_.pending, std::move(other.f10_.pending));
    Construct(&f11_.pending, std::move(other.f11_.pending));
    Construct(&f12_.pending, std::move(other.f12_.pending));
    Construct(&f13_.pending, std::move(other.f13_.pending));
    Construct(&f14_.pending, std::move(other.f14_.pending));
    Construct(&f15_.pending, std::move(other.f15_.pending));
    Construct(&f16_.pending, std::move(other.f16_.pending));
    Construct(&f17_.pending, std::move(other.f17_.pending));
    Construct(&f18_.pending, std::move(other.f18_.pending));
    Construct(&f19_.pending, std::move(other.f19_.pending));
    Construct(&f20_.pending, std::move(other.f20_.pending));
    Construct(&f21_.pending, std::move(other.f21_.pending));
    Construct(&f22_.pending, std::move(other.f22_.pending));
  }
  ~Join() {
    f0_.CallDestruct((state_ & 1) != 0);
    f1_.CallDestruct((state_ & 2) != 0);
    f2_.CallDestruct((state_ & 4) != 0);
    f3_.CallDestruct((state_ & 8) != 0);
    f4_.CallDestruct((state_ & 16) != 0);
    f5_.CallDestruct((state_ & 32) != 0);
    f6_.CallDestruct((state_ & 64) != 0);
    f7_.CallDestruct((state_ & 128) != 0);
    f8_.CallDestruct((state_ & 256) != 0);
    f9_.CallDestruct((state_ & 512) != 0);
    f10_.CallDestruct((state_ & 1024) != 0);
    f11_.CallDestruct((state_ & 2048) != 0);
    f12_.CallDestruct((state_ & 4096) != 0);
    f13_.CallDestruct((state_ & 8192) != 0);
    f14_.CallDestruct((state_ & 16384) != 0);
    f15_.CallDestruct((state_ & 32768) != 0);
    f16_.CallDestruct((state_ & 65536) != 0);
    f17_.CallDestruct((state_ & 131072) != 0);
    f18_.CallDestruct((state_ & 262144) != 0);
    f19_.CallDestruct((state_ & 524288) != 0);
    f20_.CallDestruct((state_ & 1048576) != 0);
    f21_.CallDestruct((state_ & 2097152) != 0);
    f22_.CallDestruct((state_ & 4194304) != 0);
  }
  Poll<std::tuple<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13,
                  R14, R15, R16, R17, R18, R19, R20, R21, R22>>
  operator()() {
    f0_.Poll(&state_, decltype(state_)(1));
    f1_.Poll(&state_, decltype(state_)(2));
    f2_.Poll(&state_, decltype(state_)(4));
    f3_.Poll(&state_, decltype(state_)(8));
    f4_.Poll(&state_, decltype(state_)(16));
    f5_.Poll(&state_, decltype(state_)(32));
    f6_.Poll(&state_, decltype(state_)(64));
    f7_.Poll(&state_, decltype(state_)(128));
    f8_.Poll(&state_, decltype(state_)(256));
    f9_.Poll(&state_, decltype(state_)(512));
    f10_.Poll(&state_, decltype(state_)(1024));
    f11_.Poll(&state_, decltype(state_)(2048));
    f12_.Poll(&state_, decltype(state_)(4096));
    f13_.Poll(&state_, decltype(state_)(8192));
    f14_.Poll(&state_, decltype(state_)(16384));
    f15_.Poll(&state_, decltype(state_)(32768));
    f16_.Poll(&state_, decltype(state_)(65536));
    f17_.Poll(&state_, decltype(state_)(131072));
    f18_.Poll(&state_, decltype(state_)(262144));
    f19_.Poll(&state_, decltype(state_)(524288));
    f20_.Poll(&state_, decltype(state_)(1048576));
    f21_.Poll(&state_, decltype(state_)(2097152));
    f22_.Poll(&state_, decltype(state_)(4194304));
    if (state_ != 8388607) return kPending;
    return ready(
        std::tuple<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13,
                   R14, R15, R16, R17, R18, R19, R20, R21, R22>(
            std::move(f0_.ready), std::move(f1_.ready), std::move(f2_.ready),
            std::move(f3_.ready), std::move(f4_.ready), std::move(f5_.ready),
            std::move(f6_.ready), std::move(f7_.ready), std::move(f8_.ready),
            std::move(f9_.ready), std::move(f10_.ready), std::move(f11_.ready),
            std::move(f12_.ready), std::move(f13_.ready), std::move(f14_.ready),
            std::move(f15_.ready), std::move(f16_.ready), std::move(f17_.ready),
            std::move(f18_.ready), std::move(f19_.ready), std::move(f20_.ready),
            std::move(f21_.ready), std::move(f22_.ready)));
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12, typename F13, typename F14,
          typename F15, typename F16, typename F17, typename F18, typename F19,
          typename F20, typename F21, typename F22, typename F23>
class Join<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
           F16, F17, F18, F19, F20, F21, F22, F23> {
 private:
  [[no_unique_address]] uint32_t state_ = 0;
  [[no_unique_address]] Fused<F0> f0_;
  using R0 = typename Fused<F0>::Result;
  [[no_unique_address]] Fused<F1> f1_;
  using R1 = typename Fused<F1>::Result;
  [[no_unique_address]] Fused<F2> f2_;
  using R2 = typename Fused<F2>::Result;
  [[no_unique_address]] Fused<F3> f3_;
  using R3 = typename Fused<F3>::Result;
  [[no_unique_address]] Fused<F4> f4_;
  using R4 = typename Fused<F4>::Result;
  [[no_unique_address]] Fused<F5> f5_;
  using R5 = typename Fused<F5>::Result;
  [[no_unique_address]] Fused<F6> f6_;
  using R6 = typename Fused<F6>::Result;
  [[no_unique_address]] Fused<F7> f7_;
  using R7 = typename Fused<F7>::Result;
  [[no_unique_address]] Fused<F8> f8_;
  using R8 = typename Fused<F8>::Result;
  [[no_unique_address]] Fused<F9> f9_;
  using R9 = typename Fused<F9>::Result;
  [[no_unique_address]] Fused<F10> f10_;
  using R10 = typename Fused<F10>::Result;
  [[no_unique_address]] Fused<F11> f11_;
  using R11 = typename Fused<F11>::Result;
  [[no_unique_address]] Fused<F12> f12_;
  using R12 = typename Fused<F12>::Result;
  [[no_unique_address]] Fused<F13> f13_;
  using R13 = typename Fused<F13>::Result;
  [[no_unique_address]] Fused<F14> f14_;
  using R14 = typename Fused<F14>::Result;
  [[no_unique_address]] Fused<F15> f15_;
  using R15 = typename Fused<F15>::Result;
  [[no_unique_address]] Fused<F16> f16_;
  using R16 = typename Fused<F16>::Result;
  [[no_unique_address]] Fused<F17> f17_;
  using R17 = typename Fused<F17>::Result;
  [[no_unique_address]] Fused<F18> f18_;
  using R18 = typename Fused<F18>::Result;
  [[no_unique_address]] Fused<F19> f19_;
  using R19 = typename Fused<F19>::Result;
  [[no_unique_address]] Fused<F20> f20_;
  using R20 = typename Fused<F20>::Result;
  [[no_unique_address]] Fused<F21> f21_;
  using R21 = typename Fused<F21>::Result;
  [[no_unique_address]] Fused<F22> f22_;
  using R22 = typename Fused<F22>::Result;
  [[no_unique_address]] Fused<F23> f23_;
  using R23 = typename Fused<F23>::Result;

 public:
  Join(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
       F10 f10, F11 f11, F12 f12, F13 f13, F14 f14, F15 f15, F16 f16, F17 f17,
       F18 f18, F19 f19, F20 f20, F21 f21, F22 f22, F23 f23) {
    Construct(&f0_.pending, std::move(f0));
    Construct(&f1_.pending, std::move(f1));
    Construct(&f2_.pending, std::move(f2));
    Construct(&f3_.pending, std::move(f3));
    Construct(&f4_.pending, std::move(f4));
    Construct(&f5_.pending, std::move(f5));
    Construct(&f6_.pending, std::move(f6));
    Construct(&f7_.pending, std::move(f7));
    Construct(&f8_.pending, std::move(f8));
    Construct(&f9_.pending, std::move(f9));
    Construct(&f10_.pending, std::move(f10));
    Construct(&f11_.pending, std::move(f11));
    Construct(&f12_.pending, std::move(f12));
    Construct(&f13_.pending, std::move(f13));
    Construct(&f14_.pending, std::move(f14));
    Construct(&f15_.pending, std::move(f15));
    Construct(&f16_.pending, std::move(f16));
    Construct(&f17_.pending, std::move(f17));
    Construct(&f18_.pending, std::move(f18));
    Construct(&f19_.pending, std::move(f19));
    Construct(&f20_.pending, std::move(f20));
    Construct(&f21_.pending, std::move(f21));
    Construct(&f22_.pending, std::move(f22));
    Construct(&f23_.pending, std::move(f23));
  }
  Join& operator=(const Join&) = delete;
  Join(const Join& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
    Construct(&f3_.pending, std::move(other.f3_.pending));
    Construct(&f4_.pending, std::move(other.f4_.pending));
    Construct(&f5_.pending, std::move(other.f5_.pending));
    Construct(&f6_.pending, std::move(other.f6_.pending));
    Construct(&f7_.pending, std::move(other.f7_.pending));
    Construct(&f8_.pending, std::move(other.f8_.pending));
    Construct(&f9_.pending, std::move(other.f9_.pending));
    Construct(&f10_.pending, std::move(other.f10_.pending));
    Construct(&f11_.pending, std::move(other.f11_.pending));
    Construct(&f12_.pending, std::move(other.f12_.pending));
    Construct(&f13_.pending, std::move(other.f13_.pending));
    Construct(&f14_.pending, std::move(other.f14_.pending));
    Construct(&f15_.pending, std::move(other.f15_.pending));
    Construct(&f16_.pending, std::move(other.f16_.pending));
    Construct(&f17_.pending, std::move(other.f17_.pending));
    Construct(&f18_.pending, std::move(other.f18_.pending));
    Construct(&f19_.pending, std::move(other.f19_.pending));
    Construct(&f20_.pending, std::move(other.f20_.pending));
    Construct(&f21_.pending, std::move(other.f21_.pending));
    Construct(&f22_.pending, std::move(other.f22_.pending));
    Construct(&f23_.pending, std::move(other.f23_.pending));
  }
  Join(Join&& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
    Construct(&f3_.pending, std::move(other.f3_.pending));
    Construct(&f4_.pending, std::move(other.f4_.pending));
    Construct(&f5_.pending, std::move(other.f5_.pending));
    Construct(&f6_.pending, std::move(other.f6_.pending));
    Construct(&f7_.pending, std::move(other.f7_.pending));
    Construct(&f8_.pending, std::move(other.f8_.pending));
    Construct(&f9_.pending, std::move(other.f9_.pending));
    Construct(&f10_.pending, std::move(other.f10_.pending));
    Construct(&f11_.pending, std::move(other.f11_.pending));
    Construct(&f12_.pending, std::move(other.f12_.pending));
    Construct(&f13_.pending, std::move(other.f13_.pending));
    Construct(&f14_.pending, std::move(other.f14_.pending));
    Construct(&f15_.pending, std::move(other.f15_.pending));
    Construct(&f16_.pending, std::move(other.f16_.pending));
    Construct(&f17_.pending, std::move(other.f17_.pending));
    Construct(&f18_.pending, std::move(other.f18_.pending));
    Construct(&f19_.pending, std::move(other.f19_.pending));
    Construct(&f20_.pending, std::move(other.f20_.pending));
    Construct(&f21_.pending, std::move(other.f21_.pending));
    Construct(&f22_.pending, std::move(other.f22_.pending));
    Construct(&f23_.pending, std::move(other.f23_.pending));
  }
  ~Join() {
    f0_.CallDestruct((state_ & 1) != 0);
    f1_.CallDestruct((state_ & 2) != 0);
    f2_.CallDestruct((state_ & 4) != 0);
    f3_.CallDestruct((state_ & 8) != 0);
    f4_.CallDestruct((state_ & 16) != 0);
    f5_.CallDestruct((state_ & 32) != 0);
    f6_.CallDestruct((state_ & 64) != 0);
    f7_.CallDestruct((state_ & 128) != 0);
    f8_.CallDestruct((state_ & 256) != 0);
    f9_.CallDestruct((state_ & 512) != 0);
    f10_.CallDestruct((state_ & 1024) != 0);
    f11_.CallDestruct((state_ & 2048) != 0);
    f12_.CallDestruct((state_ & 4096) != 0);
    f13_.CallDestruct((state_ & 8192) != 0);
    f14_.CallDestruct((state_ & 16384) != 0);
    f15_.CallDestruct((state_ & 32768) != 0);
    f16_.CallDestruct((state_ & 65536) != 0);
    f17_.CallDestruct((state_ & 131072) != 0);
    f18_.CallDestruct((state_ & 262144) != 0);
    f19_.CallDestruct((state_ & 524288) != 0);
    f20_.CallDestruct((state_ & 1048576) != 0);
    f21_.CallDestruct((state_ & 2097152) != 0);
    f22_.CallDestruct((state_ & 4194304) != 0);
    f23_.CallDestruct((state_ & 8388608) != 0);
  }
  Poll<std::tuple<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13,
                  R14, R15, R16, R17, R18, R19, R20, R21, R22, R23>>
  operator()() {
    f0_.Poll(&state_, decltype(state_)(1));
    f1_.Poll(&state_, decltype(state_)(2));
    f2_.Poll(&state_, decltype(state_)(4));
    f3_.Poll(&state_, decltype(state_)(8));
    f4_.Poll(&state_, decltype(state_)(16));
    f5_.Poll(&state_, decltype(state_)(32));
    f6_.Poll(&state_, decltype(state_)(64));
    f7_.Poll(&state_, decltype(state_)(128));
    f8_.Poll(&state_, decltype(state_)(256));
    f9_.Poll(&state_, decltype(state_)(512));
    f10_.Poll(&state_, decltype(state_)(1024));
    f11_.Poll(&state_, decltype(state_)(2048));
    f12_.Poll(&state_, decltype(state_)(4096));
    f13_.Poll(&state_, decltype(state_)(8192));
    f14_.Poll(&state_, decltype(state_)(16384));
    f15_.Poll(&state_, decltype(state_)(32768));
    f16_.Poll(&state_, decltype(state_)(65536));
    f17_.Poll(&state_, decltype(state_)(131072));
    f18_.Poll(&state_, decltype(state_)(262144));
    f19_.Poll(&state_, decltype(state_)(524288));
    f20_.Poll(&state_, decltype(state_)(1048576));
    f21_.Poll(&state_, decltype(state_)(2097152));
    f22_.Poll(&state_, decltype(state_)(4194304));
    f23_.Poll(&state_, decltype(state_)(8388608));
    if (state_ != 16777215) return kPending;
    return ready(
        std::tuple<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13,
                   R14, R15, R16, R17, R18, R19, R20, R21, R22, R23>(
            std::move(f0_.ready), std::move(f1_.ready), std::move(f2_.ready),
            std::move(f3_.ready), std::move(f4_.ready), std::move(f5_.ready),
            std::move(f6_.ready), std::move(f7_.ready), std::move(f8_.ready),
            std::move(f9_.ready), std::move(f10_.ready), std::move(f11_.ready),
            std::move(f12_.ready), std::move(f13_.ready), std::move(f14_.ready),
            std::move(f15_.ready), std::move(f16_.ready), std::move(f17_.ready),
            std::move(f18_.ready), std::move(f19_.ready), std::move(f20_.ready),
            std::move(f21_.ready), std::move(f22_.ready),
            std::move(f23_.ready)));
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12, typename F13, typename F14,
          typename F15, typename F16, typename F17, typename F18, typename F19,
          typename F20, typename F21, typename F22, typename F23, typename F24>
class Join<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
           F16, F17, F18, F19, F20, F21, F22, F23, F24> {
 private:
  [[no_unique_address]] uint32_t state_ = 0;
  [[no_unique_address]] Fused<F0> f0_;
  using R0 = typename Fused<F0>::Result;
  [[no_unique_address]] Fused<F1> f1_;
  using R1 = typename Fused<F1>::Result;
  [[no_unique_address]] Fused<F2> f2_;
  using R2 = typename Fused<F2>::Result;
  [[no_unique_address]] Fused<F3> f3_;
  using R3 = typename Fused<F3>::Result;
  [[no_unique_address]] Fused<F4> f4_;
  using R4 = typename Fused<F4>::Result;
  [[no_unique_address]] Fused<F5> f5_;
  using R5 = typename Fused<F5>::Result;
  [[no_unique_address]] Fused<F6> f6_;
  using R6 = typename Fused<F6>::Result;
  [[no_unique_address]] Fused<F7> f7_;
  using R7 = typename Fused<F7>::Result;
  [[no_unique_address]] Fused<F8> f8_;
  using R8 = typename Fused<F8>::Result;
  [[no_unique_address]] Fused<F9> f9_;
  using R9 = typename Fused<F9>::Result;
  [[no_unique_address]] Fused<F10> f10_;
  using R10 = typename Fused<F10>::Result;
  [[no_unique_address]] Fused<F11> f11_;
  using R11 = typename Fused<F11>::Result;
  [[no_unique_address]] Fused<F12> f12_;
  using R12 = typename Fused<F12>::Result;
  [[no_unique_address]] Fused<F13> f13_;
  using R13 = typename Fused<F13>::Result;
  [[no_unique_address]] Fused<F14> f14_;
  using R14 = typename Fused<F14>::Result;
  [[no_unique_address]] Fused<F15> f15_;
  using R15 = typename Fused<F15>::Result;
  [[no_unique_address]] Fused<F16> f16_;
  using R16 = typename Fused<F16>::Result;
  [[no_unique_address]] Fused<F17> f17_;
  using R17 = typename Fused<F17>::Result;
  [[no_unique_address]] Fused<F18> f18_;
  using R18 = typename Fused<F18>::Result;
  [[no_unique_address]] Fused<F19> f19_;
  using R19 = typename Fused<F19>::Result;
  [[no_unique_address]] Fused<F20> f20_;
  using R20 = typename Fused<F20>::Result;
  [[no_unique_address]] Fused<F21> f21_;
  using R21 = typename Fused<F21>::Result;
  [[no_unique_address]] Fused<F22> f22_;
  using R22 = typename Fused<F22>::Result;
  [[no_unique_address]] Fused<F23> f23_;
  using R23 = typename Fused<F23>::Result;
  [[no_unique_address]] Fused<F24> f24_;
  using R24 = typename Fused<F24>::Result;

 public:
  Join(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
       F10 f10, F11 f11, F12 f12, F13 f13, F14 f14, F15 f15, F16 f16, F17 f17,
       F18 f18, F19 f19, F20 f20, F21 f21, F22 f22, F23 f23, F24 f24) {
    Construct(&f0_.pending, std::move(f0));
    Construct(&f1_.pending, std::move(f1));
    Construct(&f2_.pending, std::move(f2));
    Construct(&f3_.pending, std::move(f3));
    Construct(&f4_.pending, std::move(f4));
    Construct(&f5_.pending, std::move(f5));
    Construct(&f6_.pending, std::move(f6));
    Construct(&f7_.pending, std::move(f7));
    Construct(&f8_.pending, std::move(f8));
    Construct(&f9_.pending, std::move(f9));
    Construct(&f10_.pending, std::move(f10));
    Construct(&f11_.pending, std::move(f11));
    Construct(&f12_.pending, std::move(f12));
    Construct(&f13_.pending, std::move(f13));
    Construct(&f14_.pending, std::move(f14));
    Construct(&f15_.pending, std::move(f15));
    Construct(&f16_.pending, std::move(f16));
    Construct(&f17_.pending, std::move(f17));
    Construct(&f18_.pending, std::move(f18));
    Construct(&f19_.pending, std::move(f19));
    Construct(&f20_.pending, std::move(f20));
    Construct(&f21_.pending, std::move(f21));
    Construct(&f22_.pending, std::move(f22));
    Construct(&f23_.pending, std::move(f23));
    Construct(&f24_.pending, std::move(f24));
  }
  Join& operator=(const Join&) = delete;
  Join(const Join& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
    Construct(&f3_.pending, std::move(other.f3_.pending));
    Construct(&f4_.pending, std::move(other.f4_.pending));
    Construct(&f5_.pending, std::move(other.f5_.pending));
    Construct(&f6_.pending, std::move(other.f6_.pending));
    Construct(&f7_.pending, std::move(other.f7_.pending));
    Construct(&f8_.pending, std::move(other.f8_.pending));
    Construct(&f9_.pending, std::move(other.f9_.pending));
    Construct(&f10_.pending, std::move(other.f10_.pending));
    Construct(&f11_.pending, std::move(other.f11_.pending));
    Construct(&f12_.pending, std::move(other.f12_.pending));
    Construct(&f13_.pending, std::move(other.f13_.pending));
    Construct(&f14_.pending, std::move(other.f14_.pending));
    Construct(&f15_.pending, std::move(other.f15_.pending));
    Construct(&f16_.pending, std::move(other.f16_.pending));
    Construct(&f17_.pending, std::move(other.f17_.pending));
    Construct(&f18_.pending, std::move(other.f18_.pending));
    Construct(&f19_.pending, std::move(other.f19_.pending));
    Construct(&f20_.pending, std::move(other.f20_.pending));
    Construct(&f21_.pending, std::move(other.f21_.pending));
    Construct(&f22_.pending, std::move(other.f22_.pending));
    Construct(&f23_.pending, std::move(other.f23_.pending));
    Construct(&f24_.pending, std::move(other.f24_.pending));
  }
  Join(Join&& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
    Construct(&f3_.pending, std::move(other.f3_.pending));
    Construct(&f4_.pending, std::move(other.f4_.pending));
    Construct(&f5_.pending, std::move(other.f5_.pending));
    Construct(&f6_.pending, std::move(other.f6_.pending));
    Construct(&f7_.pending, std::move(other.f7_.pending));
    Construct(&f8_.pending, std::move(other.f8_.pending));
    Construct(&f9_.pending, std::move(other.f9_.pending));
    Construct(&f10_.pending, std::move(other.f10_.pending));
    Construct(&f11_.pending, std::move(other.f11_.pending));
    Construct(&f12_.pending, std::move(other.f12_.pending));
    Construct(&f13_.pending, std::move(other.f13_.pending));
    Construct(&f14_.pending, std::move(other.f14_.pending));
    Construct(&f15_.pending, std::move(other.f15_.pending));
    Construct(&f16_.pending, std::move(other.f16_.pending));
    Construct(&f17_.pending, std::move(other.f17_.pending));
    Construct(&f18_.pending, std::move(other.f18_.pending));
    Construct(&f19_.pending, std::move(other.f19_.pending));
    Construct(&f20_.pending, std::move(other.f20_.pending));
    Construct(&f21_.pending, std::move(other.f21_.pending));
    Construct(&f22_.pending, std::move(other.f22_.pending));
    Construct(&f23_.pending, std::move(other.f23_.pending));
    Construct(&f24_.pending, std::move(other.f24_.pending));
  }
  ~Join() {
    f0_.CallDestruct((state_ & 1) != 0);
    f1_.CallDestruct((state_ & 2) != 0);
    f2_.CallDestruct((state_ & 4) != 0);
    f3_.CallDestruct((state_ & 8) != 0);
    f4_.CallDestruct((state_ & 16) != 0);
    f5_.CallDestruct((state_ & 32) != 0);
    f6_.CallDestruct((state_ & 64) != 0);
    f7_.CallDestruct((state_ & 128) != 0);
    f8_.CallDestruct((state_ & 256) != 0);
    f9_.CallDestruct((state_ & 512) != 0);
    f10_.CallDestruct((state_ & 1024) != 0);
    f11_.CallDestruct((state_ & 2048) != 0);
    f12_.CallDestruct((state_ & 4096) != 0);
    f13_.CallDestruct((state_ & 8192) != 0);
    f14_.CallDestruct((state_ & 16384) != 0);
    f15_.CallDestruct((state_ & 32768) != 0);
    f16_.CallDestruct((state_ & 65536) != 0);
    f17_.CallDestruct((state_ & 131072) != 0);
    f18_.CallDestruct((state_ & 262144) != 0);
    f19_.CallDestruct((state_ & 524288) != 0);
    f20_.CallDestruct((state_ & 1048576) != 0);
    f21_.CallDestruct((state_ & 2097152) != 0);
    f22_.CallDestruct((state_ & 4194304) != 0);
    f23_.CallDestruct((state_ & 8388608) != 0);
    f24_.CallDestruct((state_ & 16777216) != 0);
  }
  Poll<std::tuple<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13,
                  R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24>>
  operator()() {
    f0_.Poll(&state_, decltype(state_)(1));
    f1_.Poll(&state_, decltype(state_)(2));
    f2_.Poll(&state_, decltype(state_)(4));
    f3_.Poll(&state_, decltype(state_)(8));
    f4_.Poll(&state_, decltype(state_)(16));
    f5_.Poll(&state_, decltype(state_)(32));
    f6_.Poll(&state_, decltype(state_)(64));
    f7_.Poll(&state_, decltype(state_)(128));
    f8_.Poll(&state_, decltype(state_)(256));
    f9_.Poll(&state_, decltype(state_)(512));
    f10_.Poll(&state_, decltype(state_)(1024));
    f11_.Poll(&state_, decltype(state_)(2048));
    f12_.Poll(&state_, decltype(state_)(4096));
    f13_.Poll(&state_, decltype(state_)(8192));
    f14_.Poll(&state_, decltype(state_)(16384));
    f15_.Poll(&state_, decltype(state_)(32768));
    f16_.Poll(&state_, decltype(state_)(65536));
    f17_.Poll(&state_, decltype(state_)(131072));
    f18_.Poll(&state_, decltype(state_)(262144));
    f19_.Poll(&state_, decltype(state_)(524288));
    f20_.Poll(&state_, decltype(state_)(1048576));
    f21_.Poll(&state_, decltype(state_)(2097152));
    f22_.Poll(&state_, decltype(state_)(4194304));
    f23_.Poll(&state_, decltype(state_)(8388608));
    f24_.Poll(&state_, decltype(state_)(16777216));
    if (state_ != 33554431) return kPending;
    return ready(
        std::tuple<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13,
                   R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24>(
            std::move(f0_.ready), std::move(f1_.ready), std::move(f2_.ready),
            std::move(f3_.ready), std::move(f4_.ready), std::move(f5_.ready),
            std::move(f6_.ready), std::move(f7_.ready), std::move(f8_.ready),
            std::move(f9_.ready), std::move(f10_.ready), std::move(f11_.ready),
            std::move(f12_.ready), std::move(f13_.ready), std::move(f14_.ready),
            std::move(f15_.ready), std::move(f16_.ready), std::move(f17_.ready),
            std::move(f18_.ready), std::move(f19_.ready), std::move(f20_.ready),
            std::move(f21_.ready), std::move(f22_.ready), std::move(f23_.ready),
            std::move(f24_.ready)));
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12, typename F13, typename F14,
          typename F15, typename F16, typename F17, typename F18, typename F19,
          typename F20, typename F21, typename F22, typename F23, typename F24,
          typename F25>
class Join<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
           F16, F17, F18, F19, F20, F21, F22, F23, F24, F25> {
 private:
  [[no_unique_address]] uint32_t state_ = 0;
  [[no_unique_address]] Fused<F0> f0_;
  using R0 = typename Fused<F0>::Result;
  [[no_unique_address]] Fused<F1> f1_;
  using R1 = typename Fused<F1>::Result;
  [[no_unique_address]] Fused<F2> f2_;
  using R2 = typename Fused<F2>::Result;
  [[no_unique_address]] Fused<F3> f3_;
  using R3 = typename Fused<F3>::Result;
  [[no_unique_address]] Fused<F4> f4_;
  using R4 = typename Fused<F4>::Result;
  [[no_unique_address]] Fused<F5> f5_;
  using R5 = typename Fused<F5>::Result;
  [[no_unique_address]] Fused<F6> f6_;
  using R6 = typename Fused<F6>::Result;
  [[no_unique_address]] Fused<F7> f7_;
  using R7 = typename Fused<F7>::Result;
  [[no_unique_address]] Fused<F8> f8_;
  using R8 = typename Fused<F8>::Result;
  [[no_unique_address]] Fused<F9> f9_;
  using R9 = typename Fused<F9>::Result;
  [[no_unique_address]] Fused<F10> f10_;
  using R10 = typename Fused<F10>::Result;
  [[no_unique_address]] Fused<F11> f11_;
  using R11 = typename Fused<F11>::Result;
  [[no_unique_address]] Fused<F12> f12_;
  using R12 = typename Fused<F12>::Result;
  [[no_unique_address]] Fused<F13> f13_;
  using R13 = typename Fused<F13>::Result;
  [[no_unique_address]] Fused<F14> f14_;
  using R14 = typename Fused<F14>::Result;
  [[no_unique_address]] Fused<F15> f15_;
  using R15 = typename Fused<F15>::Result;
  [[no_unique_address]] Fused<F16> f16_;
  using R16 = typename Fused<F16>::Result;
  [[no_unique_address]] Fused<F17> f17_;
  using R17 = typename Fused<F17>::Result;
  [[no_unique_address]] Fused<F18> f18_;
  using R18 = typename Fused<F18>::Result;
  [[no_unique_address]] Fused<F19> f19_;
  using R19 = typename Fused<F19>::Result;
  [[no_unique_address]] Fused<F20> f20_;
  using R20 = typename Fused<F20>::Result;
  [[no_unique_address]] Fused<F21> f21_;
  using R21 = typename Fused<F21>::Result;
  [[no_unique_address]] Fused<F22> f22_;
  using R22 = typename Fused<F22>::Result;
  [[no_unique_address]] Fused<F23> f23_;
  using R23 = typename Fused<F23>::Result;
  [[no_unique_address]] Fused<F24> f24_;
  using R24 = typename Fused<F24>::Result;
  [[no_unique_address]] Fused<F25> f25_;
  using R25 = typename Fused<F25>::Result;

 public:
  Join(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
       F10 f10, F11 f11, F12 f12, F13 f13, F14 f14, F15 f15, F16 f16, F17 f17,
       F18 f18, F19 f19, F20 f20, F21 f21, F22 f22, F23 f23, F24 f24, F25 f25) {
    Construct(&f0_.pending, std::move(f0));
    Construct(&f1_.pending, std::move(f1));
    Construct(&f2_.pending, std::move(f2));
    Construct(&f3_.pending, std::move(f3));
    Construct(&f4_.pending, std::move(f4));
    Construct(&f5_.pending, std::move(f5));
    Construct(&f6_.pending, std::move(f6));
    Construct(&f7_.pending, std::move(f7));
    Construct(&f8_.pending, std::move(f8));
    Construct(&f9_.pending, std::move(f9));
    Construct(&f10_.pending, std::move(f10));
    Construct(&f11_.pending, std::move(f11));
    Construct(&f12_.pending, std::move(f12));
    Construct(&f13_.pending, std::move(f13));
    Construct(&f14_.pending, std::move(f14));
    Construct(&f15_.pending, std::move(f15));
    Construct(&f16_.pending, std::move(f16));
    Construct(&f17_.pending, std::move(f17));
    Construct(&f18_.pending, std::move(f18));
    Construct(&f19_.pending, std::move(f19));
    Construct(&f20_.pending, std::move(f20));
    Construct(&f21_.pending, std::move(f21));
    Construct(&f22_.pending, std::move(f22));
    Construct(&f23_.pending, std::move(f23));
    Construct(&f24_.pending, std::move(f24));
    Construct(&f25_.pending, std::move(f25));
  }
  Join& operator=(const Join&) = delete;
  Join(const Join& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
    Construct(&f3_.pending, std::move(other.f3_.pending));
    Construct(&f4_.pending, std::move(other.f4_.pending));
    Construct(&f5_.pending, std::move(other.f5_.pending));
    Construct(&f6_.pending, std::move(other.f6_.pending));
    Construct(&f7_.pending, std::move(other.f7_.pending));
    Construct(&f8_.pending, std::move(other.f8_.pending));
    Construct(&f9_.pending, std::move(other.f9_.pending));
    Construct(&f10_.pending, std::move(other.f10_.pending));
    Construct(&f11_.pending, std::move(other.f11_.pending));
    Construct(&f12_.pending, std::move(other.f12_.pending));
    Construct(&f13_.pending, std::move(other.f13_.pending));
    Construct(&f14_.pending, std::move(other.f14_.pending));
    Construct(&f15_.pending, std::move(other.f15_.pending));
    Construct(&f16_.pending, std::move(other.f16_.pending));
    Construct(&f17_.pending, std::move(other.f17_.pending));
    Construct(&f18_.pending, std::move(other.f18_.pending));
    Construct(&f19_.pending, std::move(other.f19_.pending));
    Construct(&f20_.pending, std::move(other.f20_.pending));
    Construct(&f21_.pending, std::move(other.f21_.pending));
    Construct(&f22_.pending, std::move(other.f22_.pending));
    Construct(&f23_.pending, std::move(other.f23_.pending));
    Construct(&f24_.pending, std::move(other.f24_.pending));
    Construct(&f25_.pending, std::move(other.f25_.pending));
  }
  Join(Join&& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
    Construct(&f3_.pending, std::move(other.f3_.pending));
    Construct(&f4_.pending, std::move(other.f4_.pending));
    Construct(&f5_.pending, std::move(other.f5_.pending));
    Construct(&f6_.pending, std::move(other.f6_.pending));
    Construct(&f7_.pending, std::move(other.f7_.pending));
    Construct(&f8_.pending, std::move(other.f8_.pending));
    Construct(&f9_.pending, std::move(other.f9_.pending));
    Construct(&f10_.pending, std::move(other.f10_.pending));
    Construct(&f11_.pending, std::move(other.f11_.pending));
    Construct(&f12_.pending, std::move(other.f12_.pending));
    Construct(&f13_.pending, std::move(other.f13_.pending));
    Construct(&f14_.pending, std::move(other.f14_.pending));
    Construct(&f15_.pending, std::move(other.f15_.pending));
    Construct(&f16_.pending, std::move(other.f16_.pending));
    Construct(&f17_.pending, std::move(other.f17_.pending));
    Construct(&f18_.pending, std::move(other.f18_.pending));
    Construct(&f19_.pending, std::move(other.f19_.pending));
    Construct(&f20_.pending, std::move(other.f20_.pending));
    Construct(&f21_.pending, std::move(other.f21_.pending));
    Construct(&f22_.pending, std::move(other.f22_.pending));
    Construct(&f23_.pending, std::move(other.f23_.pending));
    Construct(&f24_.pending, std::move(other.f24_.pending));
    Construct(&f25_.pending, std::move(other.f25_.pending));
  }
  ~Join() {
    f0_.CallDestruct((state_ & 1) != 0);
    f1_.CallDestruct((state_ & 2) != 0);
    f2_.CallDestruct((state_ & 4) != 0);
    f3_.CallDestruct((state_ & 8) != 0);
    f4_.CallDestruct((state_ & 16) != 0);
    f5_.CallDestruct((state_ & 32) != 0);
    f6_.CallDestruct((state_ & 64) != 0);
    f7_.CallDestruct((state_ & 128) != 0);
    f8_.CallDestruct((state_ & 256) != 0);
    f9_.CallDestruct((state_ & 512) != 0);
    f10_.CallDestruct((state_ & 1024) != 0);
    f11_.CallDestruct((state_ & 2048) != 0);
    f12_.CallDestruct((state_ & 4096) != 0);
    f13_.CallDestruct((state_ & 8192) != 0);
    f14_.CallDestruct((state_ & 16384) != 0);
    f15_.CallDestruct((state_ & 32768) != 0);
    f16_.CallDestruct((state_ & 65536) != 0);
    f17_.CallDestruct((state_ & 131072) != 0);
    f18_.CallDestruct((state_ & 262144) != 0);
    f19_.CallDestruct((state_ & 524288) != 0);
    f20_.CallDestruct((state_ & 1048576) != 0);
    f21_.CallDestruct((state_ & 2097152) != 0);
    f22_.CallDestruct((state_ & 4194304) != 0);
    f23_.CallDestruct((state_ & 8388608) != 0);
    f24_.CallDestruct((state_ & 16777216) != 0);
    f25_.CallDestruct((state_ & 33554432) != 0);
  }
  Poll<std::tuple<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13,
                  R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24, R25>>
  operator()() {
    f0_.Poll(&state_, decltype(state_)(1));
    f1_.Poll(&state_, decltype(state_)(2));
    f2_.Poll(&state_, decltype(state_)(4));
    f3_.Poll(&state_, decltype(state_)(8));
    f4_.Poll(&state_, decltype(state_)(16));
    f5_.Poll(&state_, decltype(state_)(32));
    f6_.Poll(&state_, decltype(state_)(64));
    f7_.Poll(&state_, decltype(state_)(128));
    f8_.Poll(&state_, decltype(state_)(256));
    f9_.Poll(&state_, decltype(state_)(512));
    f10_.Poll(&state_, decltype(state_)(1024));
    f11_.Poll(&state_, decltype(state_)(2048));
    f12_.Poll(&state_, decltype(state_)(4096));
    f13_.Poll(&state_, decltype(state_)(8192));
    f14_.Poll(&state_, decltype(state_)(16384));
    f15_.Poll(&state_, decltype(state_)(32768));
    f16_.Poll(&state_, decltype(state_)(65536));
    f17_.Poll(&state_, decltype(state_)(131072));
    f18_.Poll(&state_, decltype(state_)(262144));
    f19_.Poll(&state_, decltype(state_)(524288));
    f20_.Poll(&state_, decltype(state_)(1048576));
    f21_.Poll(&state_, decltype(state_)(2097152));
    f22_.Poll(&state_, decltype(state_)(4194304));
    f23_.Poll(&state_, decltype(state_)(8388608));
    f24_.Poll(&state_, decltype(state_)(16777216));
    f25_.Poll(&state_, decltype(state_)(33554432));
    if (state_ != 67108863) return kPending;
    return ready(
        std::tuple<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13,
                   R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24, R25>(
            std::move(f0_.ready), std::move(f1_.ready), std::move(f2_.ready),
            std::move(f3_.ready), std::move(f4_.ready), std::move(f5_.ready),
            std::move(f6_.ready), std::move(f7_.ready), std::move(f8_.ready),
            std::move(f9_.ready), std::move(f10_.ready), std::move(f11_.ready),
            std::move(f12_.ready), std::move(f13_.ready), std::move(f14_.ready),
            std::move(f15_.ready), std::move(f16_.ready), std::move(f17_.ready),
            std::move(f18_.ready), std::move(f19_.ready), std::move(f20_.ready),
            std::move(f21_.ready), std::move(f22_.ready), std::move(f23_.ready),
            std::move(f24_.ready), std::move(f25_.ready)));
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12, typename F13, typename F14,
          typename F15, typename F16, typename F17, typename F18, typename F19,
          typename F20, typename F21, typename F22, typename F23, typename F24,
          typename F25, typename F26>
class Join<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
           F16, F17, F18, F19, F20, F21, F22, F23, F24, F25, F26> {
 private:
  [[no_unique_address]] uint32_t state_ = 0;
  [[no_unique_address]] Fused<F0> f0_;
  using R0 = typename Fused<F0>::Result;
  [[no_unique_address]] Fused<F1> f1_;
  using R1 = typename Fused<F1>::Result;
  [[no_unique_address]] Fused<F2> f2_;
  using R2 = typename Fused<F2>::Result;
  [[no_unique_address]] Fused<F3> f3_;
  using R3 = typename Fused<F3>::Result;
  [[no_unique_address]] Fused<F4> f4_;
  using R4 = typename Fused<F4>::Result;
  [[no_unique_address]] Fused<F5> f5_;
  using R5 = typename Fused<F5>::Result;
  [[no_unique_address]] Fused<F6> f6_;
  using R6 = typename Fused<F6>::Result;
  [[no_unique_address]] Fused<F7> f7_;
  using R7 = typename Fused<F7>::Result;
  [[no_unique_address]] Fused<F8> f8_;
  using R8 = typename Fused<F8>::Result;
  [[no_unique_address]] Fused<F9> f9_;
  using R9 = typename Fused<F9>::Result;
  [[no_unique_address]] Fused<F10> f10_;
  using R10 = typename Fused<F10>::Result;
  [[no_unique_address]] Fused<F11> f11_;
  using R11 = typename Fused<F11>::Result;
  [[no_unique_address]] Fused<F12> f12_;
  using R12 = typename Fused<F12>::Result;
  [[no_unique_address]] Fused<F13> f13_;
  using R13 = typename Fused<F13>::Result;
  [[no_unique_address]] Fused<F14> f14_;
  using R14 = typename Fused<F14>::Result;
  [[no_unique_address]] Fused<F15> f15_;
  using R15 = typename Fused<F15>::Result;
  [[no_unique_address]] Fused<F16> f16_;
  using R16 = typename Fused<F16>::Result;
  [[no_unique_address]] Fused<F17> f17_;
  using R17 = typename Fused<F17>::Result;
  [[no_unique_address]] Fused<F18> f18_;
  using R18 = typename Fused<F18>::Result;
  [[no_unique_address]] Fused<F19> f19_;
  using R19 = typename Fused<F19>::Result;
  [[no_unique_address]] Fused<F20> f20_;
  using R20 = typename Fused<F20>::Result;
  [[no_unique_address]] Fused<F21> f21_;
  using R21 = typename Fused<F21>::Result;
  [[no_unique_address]] Fused<F22> f22_;
  using R22 = typename Fused<F22>::Result;
  [[no_unique_address]] Fused<F23> f23_;
  using R23 = typename Fused<F23>::Result;
  [[no_unique_address]] Fused<F24> f24_;
  using R24 = typename Fused<F24>::Result;
  [[no_unique_address]] Fused<F25> f25_;
  using R25 = typename Fused<F25>::Result;
  [[no_unique_address]] Fused<F26> f26_;
  using R26 = typename Fused<F26>::Result;

 public:
  Join(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
       F10 f10, F11 f11, F12 f12, F13 f13, F14 f14, F15 f15, F16 f16, F17 f17,
       F18 f18, F19 f19, F20 f20, F21 f21, F22 f22, F23 f23, F24 f24, F25 f25,
       F26 f26) {
    Construct(&f0_.pending, std::move(f0));
    Construct(&f1_.pending, std::move(f1));
    Construct(&f2_.pending, std::move(f2));
    Construct(&f3_.pending, std::move(f3));
    Construct(&f4_.pending, std::move(f4));
    Construct(&f5_.pending, std::move(f5));
    Construct(&f6_.pending, std::move(f6));
    Construct(&f7_.pending, std::move(f7));
    Construct(&f8_.pending, std::move(f8));
    Construct(&f9_.pending, std::move(f9));
    Construct(&f10_.pending, std::move(f10));
    Construct(&f11_.pending, std::move(f11));
    Construct(&f12_.pending, std::move(f12));
    Construct(&f13_.pending, std::move(f13));
    Construct(&f14_.pending, std::move(f14));
    Construct(&f15_.pending, std::move(f15));
    Construct(&f16_.pending, std::move(f16));
    Construct(&f17_.pending, std::move(f17));
    Construct(&f18_.pending, std::move(f18));
    Construct(&f19_.pending, std::move(f19));
    Construct(&f20_.pending, std::move(f20));
    Construct(&f21_.pending, std::move(f21));
    Construct(&f22_.pending, std::move(f22));
    Construct(&f23_.pending, std::move(f23));
    Construct(&f24_.pending, std::move(f24));
    Construct(&f25_.pending, std::move(f25));
    Construct(&f26_.pending, std::move(f26));
  }
  Join& operator=(const Join&) = delete;
  Join(const Join& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
    Construct(&f3_.pending, std::move(other.f3_.pending));
    Construct(&f4_.pending, std::move(other.f4_.pending));
    Construct(&f5_.pending, std::move(other.f5_.pending));
    Construct(&f6_.pending, std::move(other.f6_.pending));
    Construct(&f7_.pending, std::move(other.f7_.pending));
    Construct(&f8_.pending, std::move(other.f8_.pending));
    Construct(&f9_.pending, std::move(other.f9_.pending));
    Construct(&f10_.pending, std::move(other.f10_.pending));
    Construct(&f11_.pending, std::move(other.f11_.pending));
    Construct(&f12_.pending, std::move(other.f12_.pending));
    Construct(&f13_.pending, std::move(other.f13_.pending));
    Construct(&f14_.pending, std::move(other.f14_.pending));
    Construct(&f15_.pending, std::move(other.f15_.pending));
    Construct(&f16_.pending, std::move(other.f16_.pending));
    Construct(&f17_.pending, std::move(other.f17_.pending));
    Construct(&f18_.pending, std::move(other.f18_.pending));
    Construct(&f19_.pending, std::move(other.f19_.pending));
    Construct(&f20_.pending, std::move(other.f20_.pending));
    Construct(&f21_.pending, std::move(other.f21_.pending));
    Construct(&f22_.pending, std::move(other.f22_.pending));
    Construct(&f23_.pending, std::move(other.f23_.pending));
    Construct(&f24_.pending, std::move(other.f24_.pending));
    Construct(&f25_.pending, std::move(other.f25_.pending));
    Construct(&f26_.pending, std::move(other.f26_.pending));
  }
  Join(Join&& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
    Construct(&f3_.pending, std::move(other.f3_.pending));
    Construct(&f4_.pending, std::move(other.f4_.pending));
    Construct(&f5_.pending, std::move(other.f5_.pending));
    Construct(&f6_.pending, std::move(other.f6_.pending));
    Construct(&f7_.pending, std::move(other.f7_.pending));
    Construct(&f8_.pending, std::move(other.f8_.pending));
    Construct(&f9_.pending, std::move(other.f9_.pending));
    Construct(&f10_.pending, std::move(other.f10_.pending));
    Construct(&f11_.pending, std::move(other.f11_.pending));
    Construct(&f12_.pending, std::move(other.f12_.pending));
    Construct(&f13_.pending, std::move(other.f13_.pending));
    Construct(&f14_.pending, std::move(other.f14_.pending));
    Construct(&f15_.pending, std::move(other.f15_.pending));
    Construct(&f16_.pending, std::move(other.f16_.pending));
    Construct(&f17_.pending, std::move(other.f17_.pending));
    Construct(&f18_.pending, std::move(other.f18_.pending));
    Construct(&f19_.pending, std::move(other.f19_.pending));
    Construct(&f20_.pending, std::move(other.f20_.pending));
    Construct(&f21_.pending, std::move(other.f21_.pending));
    Construct(&f22_.pending, std::move(other.f22_.pending));
    Construct(&f23_.pending, std::move(other.f23_.pending));
    Construct(&f24_.pending, std::move(other.f24_.pending));
    Construct(&f25_.pending, std::move(other.f25_.pending));
    Construct(&f26_.pending, std::move(other.f26_.pending));
  }
  ~Join() {
    f0_.CallDestruct((state_ & 1) != 0);
    f1_.CallDestruct((state_ & 2) != 0);
    f2_.CallDestruct((state_ & 4) != 0);
    f3_.CallDestruct((state_ & 8) != 0);
    f4_.CallDestruct((state_ & 16) != 0);
    f5_.CallDestruct((state_ & 32) != 0);
    f6_.CallDestruct((state_ & 64) != 0);
    f7_.CallDestruct((state_ & 128) != 0);
    f8_.CallDestruct((state_ & 256) != 0);
    f9_.CallDestruct((state_ & 512) != 0);
    f10_.CallDestruct((state_ & 1024) != 0);
    f11_.CallDestruct((state_ & 2048) != 0);
    f12_.CallDestruct((state_ & 4096) != 0);
    f13_.CallDestruct((state_ & 8192) != 0);
    f14_.CallDestruct((state_ & 16384) != 0);
    f15_.CallDestruct((state_ & 32768) != 0);
    f16_.CallDestruct((state_ & 65536) != 0);
    f17_.CallDestruct((state_ & 131072) != 0);
    f18_.CallDestruct((state_ & 262144) != 0);
    f19_.CallDestruct((state_ & 524288) != 0);
    f20_.CallDestruct((state_ & 1048576) != 0);
    f21_.CallDestruct((state_ & 2097152) != 0);
    f22_.CallDestruct((state_ & 4194304) != 0);
    f23_.CallDestruct((state_ & 8388608) != 0);
    f24_.CallDestruct((state_ & 16777216) != 0);
    f25_.CallDestruct((state_ & 33554432) != 0);
    f26_.CallDestruct((state_ & 67108864) != 0);
  }
  Poll<std::tuple<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13,
                  R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24, R25,
                  R26>>
  operator()() {
    f0_.Poll(&state_, decltype(state_)(1));
    f1_.Poll(&state_, decltype(state_)(2));
    f2_.Poll(&state_, decltype(state_)(4));
    f3_.Poll(&state_, decltype(state_)(8));
    f4_.Poll(&state_, decltype(state_)(16));
    f5_.Poll(&state_, decltype(state_)(32));
    f6_.Poll(&state_, decltype(state_)(64));
    f7_.Poll(&state_, decltype(state_)(128));
    f8_.Poll(&state_, decltype(state_)(256));
    f9_.Poll(&state_, decltype(state_)(512));
    f10_.Poll(&state_, decltype(state_)(1024));
    f11_.Poll(&state_, decltype(state_)(2048));
    f12_.Poll(&state_, decltype(state_)(4096));
    f13_.Poll(&state_, decltype(state_)(8192));
    f14_.Poll(&state_, decltype(state_)(16384));
    f15_.Poll(&state_, decltype(state_)(32768));
    f16_.Poll(&state_, decltype(state_)(65536));
    f17_.Poll(&state_, decltype(state_)(131072));
    f18_.Poll(&state_, decltype(state_)(262144));
    f19_.Poll(&state_, decltype(state_)(524288));
    f20_.Poll(&state_, decltype(state_)(1048576));
    f21_.Poll(&state_, decltype(state_)(2097152));
    f22_.Poll(&state_, decltype(state_)(4194304));
    f23_.Poll(&state_, decltype(state_)(8388608));
    f24_.Poll(&state_, decltype(state_)(16777216));
    f25_.Poll(&state_, decltype(state_)(33554432));
    f26_.Poll(&state_, decltype(state_)(67108864));
    if (state_ != 134217727) return kPending;
    return ready(std::tuple<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11,
                            R12, R13, R14, R15, R16, R17, R18, R19, R20, R21,
                            R22, R23, R24, R25, R26>(
        std::move(f0_.ready), std::move(f1_.ready), std::move(f2_.ready),
        std::move(f3_.ready), std::move(f4_.ready), std::move(f5_.ready),
        std::move(f6_.ready), std::move(f7_.ready), std::move(f8_.ready),
        std::move(f9_.ready), std::move(f10_.ready), std::move(f11_.ready),
        std::move(f12_.ready), std::move(f13_.ready), std::move(f14_.ready),
        std::move(f15_.ready), std::move(f16_.ready), std::move(f17_.ready),
        std::move(f18_.ready), std::move(f19_.ready), std::move(f20_.ready),
        std::move(f21_.ready), std::move(f22_.ready), std::move(f23_.ready),
        std::move(f24_.ready), std::move(f25_.ready), std::move(f26_.ready)));
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12, typename F13, typename F14,
          typename F15, typename F16, typename F17, typename F18, typename F19,
          typename F20, typename F21, typename F22, typename F23, typename F24,
          typename F25, typename F26, typename F27>
class Join<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
           F16, F17, F18, F19, F20, F21, F22, F23, F24, F25, F26, F27> {
 private:
  [[no_unique_address]] uint32_t state_ = 0;
  [[no_unique_address]] Fused<F0> f0_;
  using R0 = typename Fused<F0>::Result;
  [[no_unique_address]] Fused<F1> f1_;
  using R1 = typename Fused<F1>::Result;
  [[no_unique_address]] Fused<F2> f2_;
  using R2 = typename Fused<F2>::Result;
  [[no_unique_address]] Fused<F3> f3_;
  using R3 = typename Fused<F3>::Result;
  [[no_unique_address]] Fused<F4> f4_;
  using R4 = typename Fused<F4>::Result;
  [[no_unique_address]] Fused<F5> f5_;
  using R5 = typename Fused<F5>::Result;
  [[no_unique_address]] Fused<F6> f6_;
  using R6 = typename Fused<F6>::Result;
  [[no_unique_address]] Fused<F7> f7_;
  using R7 = typename Fused<F7>::Result;
  [[no_unique_address]] Fused<F8> f8_;
  using R8 = typename Fused<F8>::Result;
  [[no_unique_address]] Fused<F9> f9_;
  using R9 = typename Fused<F9>::Result;
  [[no_unique_address]] Fused<F10> f10_;
  using R10 = typename Fused<F10>::Result;
  [[no_unique_address]] Fused<F11> f11_;
  using R11 = typename Fused<F11>::Result;
  [[no_unique_address]] Fused<F12> f12_;
  using R12 = typename Fused<F12>::Result;
  [[no_unique_address]] Fused<F13> f13_;
  using R13 = typename Fused<F13>::Result;
  [[no_unique_address]] Fused<F14> f14_;
  using R14 = typename Fused<F14>::Result;
  [[no_unique_address]] Fused<F15> f15_;
  using R15 = typename Fused<F15>::Result;
  [[no_unique_address]] Fused<F16> f16_;
  using R16 = typename Fused<F16>::Result;
  [[no_unique_address]] Fused<F17> f17_;
  using R17 = typename Fused<F17>::Result;
  [[no_unique_address]] Fused<F18> f18_;
  using R18 = typename Fused<F18>::Result;
  [[no_unique_address]] Fused<F19> f19_;
  using R19 = typename Fused<F19>::Result;
  [[no_unique_address]] Fused<F20> f20_;
  using R20 = typename Fused<F20>::Result;
  [[no_unique_address]] Fused<F21> f21_;
  using R21 = typename Fused<F21>::Result;
  [[no_unique_address]] Fused<F22> f22_;
  using R22 = typename Fused<F22>::Result;
  [[no_unique_address]] Fused<F23> f23_;
  using R23 = typename Fused<F23>::Result;
  [[no_unique_address]] Fused<F24> f24_;
  using R24 = typename Fused<F24>::Result;
  [[no_unique_address]] Fused<F25> f25_;
  using R25 = typename Fused<F25>::Result;
  [[no_unique_address]] Fused<F26> f26_;
  using R26 = typename Fused<F26>::Result;
  [[no_unique_address]] Fused<F27> f27_;
  using R27 = typename Fused<F27>::Result;

 public:
  Join(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
       F10 f10, F11 f11, F12 f12, F13 f13, F14 f14, F15 f15, F16 f16, F17 f17,
       F18 f18, F19 f19, F20 f20, F21 f21, F22 f22, F23 f23, F24 f24, F25 f25,
       F26 f26, F27 f27) {
    Construct(&f0_.pending, std::move(f0));
    Construct(&f1_.pending, std::move(f1));
    Construct(&f2_.pending, std::move(f2));
    Construct(&f3_.pending, std::move(f3));
    Construct(&f4_.pending, std::move(f4));
    Construct(&f5_.pending, std::move(f5));
    Construct(&f6_.pending, std::move(f6));
    Construct(&f7_.pending, std::move(f7));
    Construct(&f8_.pending, std::move(f8));
    Construct(&f9_.pending, std::move(f9));
    Construct(&f10_.pending, std::move(f10));
    Construct(&f11_.pending, std::move(f11));
    Construct(&f12_.pending, std::move(f12));
    Construct(&f13_.pending, std::move(f13));
    Construct(&f14_.pending, std::move(f14));
    Construct(&f15_.pending, std::move(f15));
    Construct(&f16_.pending, std::move(f16));
    Construct(&f17_.pending, std::move(f17));
    Construct(&f18_.pending, std::move(f18));
    Construct(&f19_.pending, std::move(f19));
    Construct(&f20_.pending, std::move(f20));
    Construct(&f21_.pending, std::move(f21));
    Construct(&f22_.pending, std::move(f22));
    Construct(&f23_.pending, std::move(f23));
    Construct(&f24_.pending, std::move(f24));
    Construct(&f25_.pending, std::move(f25));
    Construct(&f26_.pending, std::move(f26));
    Construct(&f27_.pending, std::move(f27));
  }
  Join& operator=(const Join&) = delete;
  Join(const Join& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
    Construct(&f3_.pending, std::move(other.f3_.pending));
    Construct(&f4_.pending, std::move(other.f4_.pending));
    Construct(&f5_.pending, std::move(other.f5_.pending));
    Construct(&f6_.pending, std::move(other.f6_.pending));
    Construct(&f7_.pending, std::move(other.f7_.pending));
    Construct(&f8_.pending, std::move(other.f8_.pending));
    Construct(&f9_.pending, std::move(other.f9_.pending));
    Construct(&f10_.pending, std::move(other.f10_.pending));
    Construct(&f11_.pending, std::move(other.f11_.pending));
    Construct(&f12_.pending, std::move(other.f12_.pending));
    Construct(&f13_.pending, std::move(other.f13_.pending));
    Construct(&f14_.pending, std::move(other.f14_.pending));
    Construct(&f15_.pending, std::move(other.f15_.pending));
    Construct(&f16_.pending, std::move(other.f16_.pending));
    Construct(&f17_.pending, std::move(other.f17_.pending));
    Construct(&f18_.pending, std::move(other.f18_.pending));
    Construct(&f19_.pending, std::move(other.f19_.pending));
    Construct(&f20_.pending, std::move(other.f20_.pending));
    Construct(&f21_.pending, std::move(other.f21_.pending));
    Construct(&f22_.pending, std::move(other.f22_.pending));
    Construct(&f23_.pending, std::move(other.f23_.pending));
    Construct(&f24_.pending, std::move(other.f24_.pending));
    Construct(&f25_.pending, std::move(other.f25_.pending));
    Construct(&f26_.pending, std::move(other.f26_.pending));
    Construct(&f27_.pending, std::move(other.f27_.pending));
  }
  Join(Join&& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
    Construct(&f3_.pending, std::move(other.f3_.pending));
    Construct(&f4_.pending, std::move(other.f4_.pending));
    Construct(&f5_.pending, std::move(other.f5_.pending));
    Construct(&f6_.pending, std::move(other.f6_.pending));
    Construct(&f7_.pending, std::move(other.f7_.pending));
    Construct(&f8_.pending, std::move(other.f8_.pending));
    Construct(&f9_.pending, std::move(other.f9_.pending));
    Construct(&f10_.pending, std::move(other.f10_.pending));
    Construct(&f11_.pending, std::move(other.f11_.pending));
    Construct(&f12_.pending, std::move(other.f12_.pending));
    Construct(&f13_.pending, std::move(other.f13_.pending));
    Construct(&f14_.pending, std::move(other.f14_.pending));
    Construct(&f15_.pending, std::move(other.f15_.pending));
    Construct(&f16_.pending, std::move(other.f16_.pending));
    Construct(&f17_.pending, std::move(other.f17_.pending));
    Construct(&f18_.pending, std::move(other.f18_.pending));
    Construct(&f19_.pending, std::move(other.f19_.pending));
    Construct(&f20_.pending, std::move(other.f20_.pending));
    Construct(&f21_.pending, std::move(other.f21_.pending));
    Construct(&f22_.pending, std::move(other.f22_.pending));
    Construct(&f23_.pending, std::move(other.f23_.pending));
    Construct(&f24_.pending, std::move(other.f24_.pending));
    Construct(&f25_.pending, std::move(other.f25_.pending));
    Construct(&f26_.pending, std::move(other.f26_.pending));
    Construct(&f27_.pending, std::move(other.f27_.pending));
  }
  ~Join() {
    f0_.CallDestruct((state_ & 1) != 0);
    f1_.CallDestruct((state_ & 2) != 0);
    f2_.CallDestruct((state_ & 4) != 0);
    f3_.CallDestruct((state_ & 8) != 0);
    f4_.CallDestruct((state_ & 16) != 0);
    f5_.CallDestruct((state_ & 32) != 0);
    f6_.CallDestruct((state_ & 64) != 0);
    f7_.CallDestruct((state_ & 128) != 0);
    f8_.CallDestruct((state_ & 256) != 0);
    f9_.CallDestruct((state_ & 512) != 0);
    f10_.CallDestruct((state_ & 1024) != 0);
    f11_.CallDestruct((state_ & 2048) != 0);
    f12_.CallDestruct((state_ & 4096) != 0);
    f13_.CallDestruct((state_ & 8192) != 0);
    f14_.CallDestruct((state_ & 16384) != 0);
    f15_.CallDestruct((state_ & 32768) != 0);
    f16_.CallDestruct((state_ & 65536) != 0);
    f17_.CallDestruct((state_ & 131072) != 0);
    f18_.CallDestruct((state_ & 262144) != 0);
    f19_.CallDestruct((state_ & 524288) != 0);
    f20_.CallDestruct((state_ & 1048576) != 0);
    f21_.CallDestruct((state_ & 2097152) != 0);
    f22_.CallDestruct((state_ & 4194304) != 0);
    f23_.CallDestruct((state_ & 8388608) != 0);
    f24_.CallDestruct((state_ & 16777216) != 0);
    f25_.CallDestruct((state_ & 33554432) != 0);
    f26_.CallDestruct((state_ & 67108864) != 0);
    f27_.CallDestruct((state_ & 134217728) != 0);
  }
  Poll<std::tuple<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13,
                  R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24, R25,
                  R26, R27>>
  operator()() {
    f0_.Poll(&state_, decltype(state_)(1));
    f1_.Poll(&state_, decltype(state_)(2));
    f2_.Poll(&state_, decltype(state_)(4));
    f3_.Poll(&state_, decltype(state_)(8));
    f4_.Poll(&state_, decltype(state_)(16));
    f5_.Poll(&state_, decltype(state_)(32));
    f6_.Poll(&state_, decltype(state_)(64));
    f7_.Poll(&state_, decltype(state_)(128));
    f8_.Poll(&state_, decltype(state_)(256));
    f9_.Poll(&state_, decltype(state_)(512));
    f10_.Poll(&state_, decltype(state_)(1024));
    f11_.Poll(&state_, decltype(state_)(2048));
    f12_.Poll(&state_, decltype(state_)(4096));
    f13_.Poll(&state_, decltype(state_)(8192));
    f14_.Poll(&state_, decltype(state_)(16384));
    f15_.Poll(&state_, decltype(state_)(32768));
    f16_.Poll(&state_, decltype(state_)(65536));
    f17_.Poll(&state_, decltype(state_)(131072));
    f18_.Poll(&state_, decltype(state_)(262144));
    f19_.Poll(&state_, decltype(state_)(524288));
    f20_.Poll(&state_, decltype(state_)(1048576));
    f21_.Poll(&state_, decltype(state_)(2097152));
    f22_.Poll(&state_, decltype(state_)(4194304));
    f23_.Poll(&state_, decltype(state_)(8388608));
    f24_.Poll(&state_, decltype(state_)(16777216));
    f25_.Poll(&state_, decltype(state_)(33554432));
    f26_.Poll(&state_, decltype(state_)(67108864));
    f27_.Poll(&state_, decltype(state_)(134217728));
    if (state_ != 268435455) return kPending;
    return ready(std::tuple<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11,
                            R12, R13, R14, R15, R16, R17, R18, R19, R20, R21,
                            R22, R23, R24, R25, R26, R27>(
        std::move(f0_.ready), std::move(f1_.ready), std::move(f2_.ready),
        std::move(f3_.ready), std::move(f4_.ready), std::move(f5_.ready),
        std::move(f6_.ready), std::move(f7_.ready), std::move(f8_.ready),
        std::move(f9_.ready), std::move(f10_.ready), std::move(f11_.ready),
        std::move(f12_.ready), std::move(f13_.ready), std::move(f14_.ready),
        std::move(f15_.ready), std::move(f16_.ready), std::move(f17_.ready),
        std::move(f18_.ready), std::move(f19_.ready), std::move(f20_.ready),
        std::move(f21_.ready), std::move(f22_.ready), std::move(f23_.ready),
        std::move(f24_.ready), std::move(f25_.ready), std::move(f26_.ready),
        std::move(f27_.ready)));
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12, typename F13, typename F14,
          typename F15, typename F16, typename F17, typename F18, typename F19,
          typename F20, typename F21, typename F22, typename F23, typename F24,
          typename F25, typename F26, typename F27, typename F28>
class Join<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
           F16, F17, F18, F19, F20, F21, F22, F23, F24, F25, F26, F27, F28> {
 private:
  [[no_unique_address]] uint32_t state_ = 0;
  [[no_unique_address]] Fused<F0> f0_;
  using R0 = typename Fused<F0>::Result;
  [[no_unique_address]] Fused<F1> f1_;
  using R1 = typename Fused<F1>::Result;
  [[no_unique_address]] Fused<F2> f2_;
  using R2 = typename Fused<F2>::Result;
  [[no_unique_address]] Fused<F3> f3_;
  using R3 = typename Fused<F3>::Result;
  [[no_unique_address]] Fused<F4> f4_;
  using R4 = typename Fused<F4>::Result;
  [[no_unique_address]] Fused<F5> f5_;
  using R5 = typename Fused<F5>::Result;
  [[no_unique_address]] Fused<F6> f6_;
  using R6 = typename Fused<F6>::Result;
  [[no_unique_address]] Fused<F7> f7_;
  using R7 = typename Fused<F7>::Result;
  [[no_unique_address]] Fused<F8> f8_;
  using R8 = typename Fused<F8>::Result;
  [[no_unique_address]] Fused<F9> f9_;
  using R9 = typename Fused<F9>::Result;
  [[no_unique_address]] Fused<F10> f10_;
  using R10 = typename Fused<F10>::Result;
  [[no_unique_address]] Fused<F11> f11_;
  using R11 = typename Fused<F11>::Result;
  [[no_unique_address]] Fused<F12> f12_;
  using R12 = typename Fused<F12>::Result;
  [[no_unique_address]] Fused<F13> f13_;
  using R13 = typename Fused<F13>::Result;
  [[no_unique_address]] Fused<F14> f14_;
  using R14 = typename Fused<F14>::Result;
  [[no_unique_address]] Fused<F15> f15_;
  using R15 = typename Fused<F15>::Result;
  [[no_unique_address]] Fused<F16> f16_;
  using R16 = typename Fused<F16>::Result;
  [[no_unique_address]] Fused<F17> f17_;
  using R17 = typename Fused<F17>::Result;
  [[no_unique_address]] Fused<F18> f18_;
  using R18 = typename Fused<F18>::Result;
  [[no_unique_address]] Fused<F19> f19_;
  using R19 = typename Fused<F19>::Result;
  [[no_unique_address]] Fused<F20> f20_;
  using R20 = typename Fused<F20>::Result;
  [[no_unique_address]] Fused<F21> f21_;
  using R21 = typename Fused<F21>::Result;
  [[no_unique_address]] Fused<F22> f22_;
  using R22 = typename Fused<F22>::Result;
  [[no_unique_address]] Fused<F23> f23_;
  using R23 = typename Fused<F23>::Result;
  [[no_unique_address]] Fused<F24> f24_;
  using R24 = typename Fused<F24>::Result;
  [[no_unique_address]] Fused<F25> f25_;
  using R25 = typename Fused<F25>::Result;
  [[no_unique_address]] Fused<F26> f26_;
  using R26 = typename Fused<F26>::Result;
  [[no_unique_address]] Fused<F27> f27_;
  using R27 = typename Fused<F27>::Result;
  [[no_unique_address]] Fused<F28> f28_;
  using R28 = typename Fused<F28>::Result;

 public:
  Join(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
       F10 f10, F11 f11, F12 f12, F13 f13, F14 f14, F15 f15, F16 f16, F17 f17,
       F18 f18, F19 f19, F20 f20, F21 f21, F22 f22, F23 f23, F24 f24, F25 f25,
       F26 f26, F27 f27, F28 f28) {
    Construct(&f0_.pending, std::move(f0));
    Construct(&f1_.pending, std::move(f1));
    Construct(&f2_.pending, std::move(f2));
    Construct(&f3_.pending, std::move(f3));
    Construct(&f4_.pending, std::move(f4));
    Construct(&f5_.pending, std::move(f5));
    Construct(&f6_.pending, std::move(f6));
    Construct(&f7_.pending, std::move(f7));
    Construct(&f8_.pending, std::move(f8));
    Construct(&f9_.pending, std::move(f9));
    Construct(&f10_.pending, std::move(f10));
    Construct(&f11_.pending, std::move(f11));
    Construct(&f12_.pending, std::move(f12));
    Construct(&f13_.pending, std::move(f13));
    Construct(&f14_.pending, std::move(f14));
    Construct(&f15_.pending, std::move(f15));
    Construct(&f16_.pending, std::move(f16));
    Construct(&f17_.pending, std::move(f17));
    Construct(&f18_.pending, std::move(f18));
    Construct(&f19_.pending, std::move(f19));
    Construct(&f20_.pending, std::move(f20));
    Construct(&f21_.pending, std::move(f21));
    Construct(&f22_.pending, std::move(f22));
    Construct(&f23_.pending, std::move(f23));
    Construct(&f24_.pending, std::move(f24));
    Construct(&f25_.pending, std::move(f25));
    Construct(&f26_.pending, std::move(f26));
    Construct(&f27_.pending, std::move(f27));
    Construct(&f28_.pending, std::move(f28));
  }
  Join& operator=(const Join&) = delete;
  Join(const Join& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
    Construct(&f3_.pending, std::move(other.f3_.pending));
    Construct(&f4_.pending, std::move(other.f4_.pending));
    Construct(&f5_.pending, std::move(other.f5_.pending));
    Construct(&f6_.pending, std::move(other.f6_.pending));
    Construct(&f7_.pending, std::move(other.f7_.pending));
    Construct(&f8_.pending, std::move(other.f8_.pending));
    Construct(&f9_.pending, std::move(other.f9_.pending));
    Construct(&f10_.pending, std::move(other.f10_.pending));
    Construct(&f11_.pending, std::move(other.f11_.pending));
    Construct(&f12_.pending, std::move(other.f12_.pending));
    Construct(&f13_.pending, std::move(other.f13_.pending));
    Construct(&f14_.pending, std::move(other.f14_.pending));
    Construct(&f15_.pending, std::move(other.f15_.pending));
    Construct(&f16_.pending, std::move(other.f16_.pending));
    Construct(&f17_.pending, std::move(other.f17_.pending));
    Construct(&f18_.pending, std::move(other.f18_.pending));
    Construct(&f19_.pending, std::move(other.f19_.pending));
    Construct(&f20_.pending, std::move(other.f20_.pending));
    Construct(&f21_.pending, std::move(other.f21_.pending));
    Construct(&f22_.pending, std::move(other.f22_.pending));
    Construct(&f23_.pending, std::move(other.f23_.pending));
    Construct(&f24_.pending, std::move(other.f24_.pending));
    Construct(&f25_.pending, std::move(other.f25_.pending));
    Construct(&f26_.pending, std::move(other.f26_.pending));
    Construct(&f27_.pending, std::move(other.f27_.pending));
    Construct(&f28_.pending, std::move(other.f28_.pending));
  }
  Join(Join&& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
    Construct(&f3_.pending, std::move(other.f3_.pending));
    Construct(&f4_.pending, std::move(other.f4_.pending));
    Construct(&f5_.pending, std::move(other.f5_.pending));
    Construct(&f6_.pending, std::move(other.f6_.pending));
    Construct(&f7_.pending, std::move(other.f7_.pending));
    Construct(&f8_.pending, std::move(other.f8_.pending));
    Construct(&f9_.pending, std::move(other.f9_.pending));
    Construct(&f10_.pending, std::move(other.f10_.pending));
    Construct(&f11_.pending, std::move(other.f11_.pending));
    Construct(&f12_.pending, std::move(other.f12_.pending));
    Construct(&f13_.pending, std::move(other.f13_.pending));
    Construct(&f14_.pending, std::move(other.f14_.pending));
    Construct(&f15_.pending, std::move(other.f15_.pending));
    Construct(&f16_.pending, std::move(other.f16_.pending));
    Construct(&f17_.pending, std::move(other.f17_.pending));
    Construct(&f18_.pending, std::move(other.f18_.pending));
    Construct(&f19_.pending, std::move(other.f19_.pending));
    Construct(&f20_.pending, std::move(other.f20_.pending));
    Construct(&f21_.pending, std::move(other.f21_.pending));
    Construct(&f22_.pending, std::move(other.f22_.pending));
    Construct(&f23_.pending, std::move(other.f23_.pending));
    Construct(&f24_.pending, std::move(other.f24_.pending));
    Construct(&f25_.pending, std::move(other.f25_.pending));
    Construct(&f26_.pending, std::move(other.f26_.pending));
    Construct(&f27_.pending, std::move(other.f27_.pending));
    Construct(&f28_.pending, std::move(other.f28_.pending));
  }
  ~Join() {
    f0_.CallDestruct((state_ & 1) != 0);
    f1_.CallDestruct((state_ & 2) != 0);
    f2_.CallDestruct((state_ & 4) != 0);
    f3_.CallDestruct((state_ & 8) != 0);
    f4_.CallDestruct((state_ & 16) != 0);
    f5_.CallDestruct((state_ & 32) != 0);
    f6_.CallDestruct((state_ & 64) != 0);
    f7_.CallDestruct((state_ & 128) != 0);
    f8_.CallDestruct((state_ & 256) != 0);
    f9_.CallDestruct((state_ & 512) != 0);
    f10_.CallDestruct((state_ & 1024) != 0);
    f11_.CallDestruct((state_ & 2048) != 0);
    f12_.CallDestruct((state_ & 4096) != 0);
    f13_.CallDestruct((state_ & 8192) != 0);
    f14_.CallDestruct((state_ & 16384) != 0);
    f15_.CallDestruct((state_ & 32768) != 0);
    f16_.CallDestruct((state_ & 65536) != 0);
    f17_.CallDestruct((state_ & 131072) != 0);
    f18_.CallDestruct((state_ & 262144) != 0);
    f19_.CallDestruct((state_ & 524288) != 0);
    f20_.CallDestruct((state_ & 1048576) != 0);
    f21_.CallDestruct((state_ & 2097152) != 0);
    f22_.CallDestruct((state_ & 4194304) != 0);
    f23_.CallDestruct((state_ & 8388608) != 0);
    f24_.CallDestruct((state_ & 16777216) != 0);
    f25_.CallDestruct((state_ & 33554432) != 0);
    f26_.CallDestruct((state_ & 67108864) != 0);
    f27_.CallDestruct((state_ & 134217728) != 0);
    f28_.CallDestruct((state_ & 268435456) != 0);
  }
  Poll<std::tuple<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13,
                  R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24, R25,
                  R26, R27, R28>>
  operator()() {
    f0_.Poll(&state_, decltype(state_)(1));
    f1_.Poll(&state_, decltype(state_)(2));
    f2_.Poll(&state_, decltype(state_)(4));
    f3_.Poll(&state_, decltype(state_)(8));
    f4_.Poll(&state_, decltype(state_)(16));
    f5_.Poll(&state_, decltype(state_)(32));
    f6_.Poll(&state_, decltype(state_)(64));
    f7_.Poll(&state_, decltype(state_)(128));
    f8_.Poll(&state_, decltype(state_)(256));
    f9_.Poll(&state_, decltype(state_)(512));
    f10_.Poll(&state_, decltype(state_)(1024));
    f11_.Poll(&state_, decltype(state_)(2048));
    f12_.Poll(&state_, decltype(state_)(4096));
    f13_.Poll(&state_, decltype(state_)(8192));
    f14_.Poll(&state_, decltype(state_)(16384));
    f15_.Poll(&state_, decltype(state_)(32768));
    f16_.Poll(&state_, decltype(state_)(65536));
    f17_.Poll(&state_, decltype(state_)(131072));
    f18_.Poll(&state_, decltype(state_)(262144));
    f19_.Poll(&state_, decltype(state_)(524288));
    f20_.Poll(&state_, decltype(state_)(1048576));
    f21_.Poll(&state_, decltype(state_)(2097152));
    f22_.Poll(&state_, decltype(state_)(4194304));
    f23_.Poll(&state_, decltype(state_)(8388608));
    f24_.Poll(&state_, decltype(state_)(16777216));
    f25_.Poll(&state_, decltype(state_)(33554432));
    f26_.Poll(&state_, decltype(state_)(67108864));
    f27_.Poll(&state_, decltype(state_)(134217728));
    f28_.Poll(&state_, decltype(state_)(268435456));
    if (state_ != 536870911) return kPending;
    return ready(std::tuple<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11,
                            R12, R13, R14, R15, R16, R17, R18, R19, R20, R21,
                            R22, R23, R24, R25, R26, R27, R28>(
        std::move(f0_.ready), std::move(f1_.ready), std::move(f2_.ready),
        std::move(f3_.ready), std::move(f4_.ready), std::move(f5_.ready),
        std::move(f6_.ready), std::move(f7_.ready), std::move(f8_.ready),
        std::move(f9_.ready), std::move(f10_.ready), std::move(f11_.ready),
        std::move(f12_.ready), std::move(f13_.ready), std::move(f14_.ready),
        std::move(f15_.ready), std::move(f16_.ready), std::move(f17_.ready),
        std::move(f18_.ready), std::move(f19_.ready), std::move(f20_.ready),
        std::move(f21_.ready), std::move(f22_.ready), std::move(f23_.ready),
        std::move(f24_.ready), std::move(f25_.ready), std::move(f26_.ready),
        std::move(f27_.ready), std::move(f28_.ready)));
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12, typename F13, typename F14,
          typename F15, typename F16, typename F17, typename F18, typename F19,
          typename F20, typename F21, typename F22, typename F23, typename F24,
          typename F25, typename F26, typename F27, typename F28, typename F29>
class Join<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
           F16, F17, F18, F19, F20, F21, F22, F23, F24, F25, F26, F27, F28,
           F29> {
 private:
  [[no_unique_address]] uint32_t state_ = 0;
  [[no_unique_address]] Fused<F0> f0_;
  using R0 = typename Fused<F0>::Result;
  [[no_unique_address]] Fused<F1> f1_;
  using R1 = typename Fused<F1>::Result;
  [[no_unique_address]] Fused<F2> f2_;
  using R2 = typename Fused<F2>::Result;
  [[no_unique_address]] Fused<F3> f3_;
  using R3 = typename Fused<F3>::Result;
  [[no_unique_address]] Fused<F4> f4_;
  using R4 = typename Fused<F4>::Result;
  [[no_unique_address]] Fused<F5> f5_;
  using R5 = typename Fused<F5>::Result;
  [[no_unique_address]] Fused<F6> f6_;
  using R6 = typename Fused<F6>::Result;
  [[no_unique_address]] Fused<F7> f7_;
  using R7 = typename Fused<F7>::Result;
  [[no_unique_address]] Fused<F8> f8_;
  using R8 = typename Fused<F8>::Result;
  [[no_unique_address]] Fused<F9> f9_;
  using R9 = typename Fused<F9>::Result;
  [[no_unique_address]] Fused<F10> f10_;
  using R10 = typename Fused<F10>::Result;
  [[no_unique_address]] Fused<F11> f11_;
  using R11 = typename Fused<F11>::Result;
  [[no_unique_address]] Fused<F12> f12_;
  using R12 = typename Fused<F12>::Result;
  [[no_unique_address]] Fused<F13> f13_;
  using R13 = typename Fused<F13>::Result;
  [[no_unique_address]] Fused<F14> f14_;
  using R14 = typename Fused<F14>::Result;
  [[no_unique_address]] Fused<F15> f15_;
  using R15 = typename Fused<F15>::Result;
  [[no_unique_address]] Fused<F16> f16_;
  using R16 = typename Fused<F16>::Result;
  [[no_unique_address]] Fused<F17> f17_;
  using R17 = typename Fused<F17>::Result;
  [[no_unique_address]] Fused<F18> f18_;
  using R18 = typename Fused<F18>::Result;
  [[no_unique_address]] Fused<F19> f19_;
  using R19 = typename Fused<F19>::Result;
  [[no_unique_address]] Fused<F20> f20_;
  using R20 = typename Fused<F20>::Result;
  [[no_unique_address]] Fused<F21> f21_;
  using R21 = typename Fused<F21>::Result;
  [[no_unique_address]] Fused<F22> f22_;
  using R22 = typename Fused<F22>::Result;
  [[no_unique_address]] Fused<F23> f23_;
  using R23 = typename Fused<F23>::Result;
  [[no_unique_address]] Fused<F24> f24_;
  using R24 = typename Fused<F24>::Result;
  [[no_unique_address]] Fused<F25> f25_;
  using R25 = typename Fused<F25>::Result;
  [[no_unique_address]] Fused<F26> f26_;
  using R26 = typename Fused<F26>::Result;
  [[no_unique_address]] Fused<F27> f27_;
  using R27 = typename Fused<F27>::Result;
  [[no_unique_address]] Fused<F28> f28_;
  using R28 = typename Fused<F28>::Result;
  [[no_unique_address]] Fused<F29> f29_;
  using R29 = typename Fused<F29>::Result;

 public:
  Join(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
       F10 f10, F11 f11, F12 f12, F13 f13, F14 f14, F15 f15, F16 f16, F17 f17,
       F18 f18, F19 f19, F20 f20, F21 f21, F22 f22, F23 f23, F24 f24, F25 f25,
       F26 f26, F27 f27, F28 f28, F29 f29) {
    Construct(&f0_.pending, std::move(f0));
    Construct(&f1_.pending, std::move(f1));
    Construct(&f2_.pending, std::move(f2));
    Construct(&f3_.pending, std::move(f3));
    Construct(&f4_.pending, std::move(f4));
    Construct(&f5_.pending, std::move(f5));
    Construct(&f6_.pending, std::move(f6));
    Construct(&f7_.pending, std::move(f7));
    Construct(&f8_.pending, std::move(f8));
    Construct(&f9_.pending, std::move(f9));
    Construct(&f10_.pending, std::move(f10));
    Construct(&f11_.pending, std::move(f11));
    Construct(&f12_.pending, std::move(f12));
    Construct(&f13_.pending, std::move(f13));
    Construct(&f14_.pending, std::move(f14));
    Construct(&f15_.pending, std::move(f15));
    Construct(&f16_.pending, std::move(f16));
    Construct(&f17_.pending, std::move(f17));
    Construct(&f18_.pending, std::move(f18));
    Construct(&f19_.pending, std::move(f19));
    Construct(&f20_.pending, std::move(f20));
    Construct(&f21_.pending, std::move(f21));
    Construct(&f22_.pending, std::move(f22));
    Construct(&f23_.pending, std::move(f23));
    Construct(&f24_.pending, std::move(f24));
    Construct(&f25_.pending, std::move(f25));
    Construct(&f26_.pending, std::move(f26));
    Construct(&f27_.pending, std::move(f27));
    Construct(&f28_.pending, std::move(f28));
    Construct(&f29_.pending, std::move(f29));
  }
  Join& operator=(const Join&) = delete;
  Join(const Join& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
    Construct(&f3_.pending, std::move(other.f3_.pending));
    Construct(&f4_.pending, std::move(other.f4_.pending));
    Construct(&f5_.pending, std::move(other.f5_.pending));
    Construct(&f6_.pending, std::move(other.f6_.pending));
    Construct(&f7_.pending, std::move(other.f7_.pending));
    Construct(&f8_.pending, std::move(other.f8_.pending));
    Construct(&f9_.pending, std::move(other.f9_.pending));
    Construct(&f10_.pending, std::move(other.f10_.pending));
    Construct(&f11_.pending, std::move(other.f11_.pending));
    Construct(&f12_.pending, std::move(other.f12_.pending));
    Construct(&f13_.pending, std::move(other.f13_.pending));
    Construct(&f14_.pending, std::move(other.f14_.pending));
    Construct(&f15_.pending, std::move(other.f15_.pending));
    Construct(&f16_.pending, std::move(other.f16_.pending));
    Construct(&f17_.pending, std::move(other.f17_.pending));
    Construct(&f18_.pending, std::move(other.f18_.pending));
    Construct(&f19_.pending, std::move(other.f19_.pending));
    Construct(&f20_.pending, std::move(other.f20_.pending));
    Construct(&f21_.pending, std::move(other.f21_.pending));
    Construct(&f22_.pending, std::move(other.f22_.pending));
    Construct(&f23_.pending, std::move(other.f23_.pending));
    Construct(&f24_.pending, std::move(other.f24_.pending));
    Construct(&f25_.pending, std::move(other.f25_.pending));
    Construct(&f26_.pending, std::move(other.f26_.pending));
    Construct(&f27_.pending, std::move(other.f27_.pending));
    Construct(&f28_.pending, std::move(other.f28_.pending));
    Construct(&f29_.pending, std::move(other.f29_.pending));
  }
  Join(Join&& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
    Construct(&f3_.pending, std::move(other.f3_.pending));
    Construct(&f4_.pending, std::move(other.f4_.pending));
    Construct(&f5_.pending, std::move(other.f5_.pending));
    Construct(&f6_.pending, std::move(other.f6_.pending));
    Construct(&f7_.pending, std::move(other.f7_.pending));
    Construct(&f8_.pending, std::move(other.f8_.pending));
    Construct(&f9_.pending, std::move(other.f9_.pending));
    Construct(&f10_.pending, std::move(other.f10_.pending));
    Construct(&f11_.pending, std::move(other.f11_.pending));
    Construct(&f12_.pending, std::move(other.f12_.pending));
    Construct(&f13_.pending, std::move(other.f13_.pending));
    Construct(&f14_.pending, std::move(other.f14_.pending));
    Construct(&f15_.pending, std::move(other.f15_.pending));
    Construct(&f16_.pending, std::move(other.f16_.pending));
    Construct(&f17_.pending, std::move(other.f17_.pending));
    Construct(&f18_.pending, std::move(other.f18_.pending));
    Construct(&f19_.pending, std::move(other.f19_.pending));
    Construct(&f20_.pending, std::move(other.f20_.pending));
    Construct(&f21_.pending, std::move(other.f21_.pending));
    Construct(&f22_.pending, std::move(other.f22_.pending));
    Construct(&f23_.pending, std::move(other.f23_.pending));
    Construct(&f24_.pending, std::move(other.f24_.pending));
    Construct(&f25_.pending, std::move(other.f25_.pending));
    Construct(&f26_.pending, std::move(other.f26_.pending));
    Construct(&f27_.pending, std::move(other.f27_.pending));
    Construct(&f28_.pending, std::move(other.f28_.pending));
    Construct(&f29_.pending, std::move(other.f29_.pending));
  }
  ~Join() {
    f0_.CallDestruct((state_ & 1) != 0);
    f1_.CallDestruct((state_ & 2) != 0);
    f2_.CallDestruct((state_ & 4) != 0);
    f3_.CallDestruct((state_ & 8) != 0);
    f4_.CallDestruct((state_ & 16) != 0);
    f5_.CallDestruct((state_ & 32) != 0);
    f6_.CallDestruct((state_ & 64) != 0);
    f7_.CallDestruct((state_ & 128) != 0);
    f8_.CallDestruct((state_ & 256) != 0);
    f9_.CallDestruct((state_ & 512) != 0);
    f10_.CallDestruct((state_ & 1024) != 0);
    f11_.CallDestruct((state_ & 2048) != 0);
    f12_.CallDestruct((state_ & 4096) != 0);
    f13_.CallDestruct((state_ & 8192) != 0);
    f14_.CallDestruct((state_ & 16384) != 0);
    f15_.CallDestruct((state_ & 32768) != 0);
    f16_.CallDestruct((state_ & 65536) != 0);
    f17_.CallDestruct((state_ & 131072) != 0);
    f18_.CallDestruct((state_ & 262144) != 0);
    f19_.CallDestruct((state_ & 524288) != 0);
    f20_.CallDestruct((state_ & 1048576) != 0);
    f21_.CallDestruct((state_ & 2097152) != 0);
    f22_.CallDestruct((state_ & 4194304) != 0);
    f23_.CallDestruct((state_ & 8388608) != 0);
    f24_.CallDestruct((state_ & 16777216) != 0);
    f25_.CallDestruct((state_ & 33554432) != 0);
    f26_.CallDestruct((state_ & 67108864) != 0);
    f27_.CallDestruct((state_ & 134217728) != 0);
    f28_.CallDestruct((state_ & 268435456) != 0);
    f29_.CallDestruct((state_ & 536870912) != 0);
  }
  Poll<std::tuple<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13,
                  R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24, R25,
                  R26, R27, R28, R29>>
  operator()() {
    f0_.Poll(&state_, decltype(state_)(1));
    f1_.Poll(&state_, decltype(state_)(2));
    f2_.Poll(&state_, decltype(state_)(4));
    f3_.Poll(&state_, decltype(state_)(8));
    f4_.Poll(&state_, decltype(state_)(16));
    f5_.Poll(&state_, decltype(state_)(32));
    f6_.Poll(&state_, decltype(state_)(64));
    f7_.Poll(&state_, decltype(state_)(128));
    f8_.Poll(&state_, decltype(state_)(256));
    f9_.Poll(&state_, decltype(state_)(512));
    f10_.Poll(&state_, decltype(state_)(1024));
    f11_.Poll(&state_, decltype(state_)(2048));
    f12_.Poll(&state_, decltype(state_)(4096));
    f13_.Poll(&state_, decltype(state_)(8192));
    f14_.Poll(&state_, decltype(state_)(16384));
    f15_.Poll(&state_, decltype(state_)(32768));
    f16_.Poll(&state_, decltype(state_)(65536));
    f17_.Poll(&state_, decltype(state_)(131072));
    f18_.Poll(&state_, decltype(state_)(262144));
    f19_.Poll(&state_, decltype(state_)(524288));
    f20_.Poll(&state_, decltype(state_)(1048576));
    f21_.Poll(&state_, decltype(state_)(2097152));
    f22_.Poll(&state_, decltype(state_)(4194304));
    f23_.Poll(&state_, decltype(state_)(8388608));
    f24_.Poll(&state_, decltype(state_)(16777216));
    f25_.Poll(&state_, decltype(state_)(33554432));
    f26_.Poll(&state_, decltype(state_)(67108864));
    f27_.Poll(&state_, decltype(state_)(134217728));
    f28_.Poll(&state_, decltype(state_)(268435456));
    f29_.Poll(&state_, decltype(state_)(536870912));
    if (state_ != 1073741823) return kPending;
    return ready(std::tuple<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11,
                            R12, R13, R14, R15, R16, R17, R18, R19, R20, R21,
                            R22, R23, R24, R25, R26, R27, R28, R29>(
        std::move(f0_.ready), std::move(f1_.ready), std::move(f2_.ready),
        std::move(f3_.ready), std::move(f4_.ready), std::move(f5_.ready),
        std::move(f6_.ready), std::move(f7_.ready), std::move(f8_.ready),
        std::move(f9_.ready), std::move(f10_.ready), std::move(f11_.ready),
        std::move(f12_.ready), std::move(f13_.ready), std::move(f14_.ready),
        std::move(f15_.ready), std::move(f16_.ready), std::move(f17_.ready),
        std::move(f18_.ready), std::move(f19_.ready), std::move(f20_.ready),
        std::move(f21_.ready), std::move(f22_.ready), std::move(f23_.ready),
        std::move(f24_.ready), std::move(f25_.ready), std::move(f26_.ready),
        std::move(f27_.ready), std::move(f28_.ready), std::move(f29_.ready)));
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12, typename F13, typename F14,
          typename F15, typename F16, typename F17, typename F18, typename F19,
          typename F20, typename F21, typename F22, typename F23, typename F24,
          typename F25, typename F26, typename F27, typename F28, typename F29,
          typename F30>
class Join<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
           F16, F17, F18, F19, F20, F21, F22, F23, F24, F25, F26, F27, F28, F29,
           F30> {
 private:
  [[no_unique_address]] uint32_t state_ = 0;
  [[no_unique_address]] Fused<F0> f0_;
  using R0 = typename Fused<F0>::Result;
  [[no_unique_address]] Fused<F1> f1_;
  using R1 = typename Fused<F1>::Result;
  [[no_unique_address]] Fused<F2> f2_;
  using R2 = typename Fused<F2>::Result;
  [[no_unique_address]] Fused<F3> f3_;
  using R3 = typename Fused<F3>::Result;
  [[no_unique_address]] Fused<F4> f4_;
  using R4 = typename Fused<F4>::Result;
  [[no_unique_address]] Fused<F5> f5_;
  using R5 = typename Fused<F5>::Result;
  [[no_unique_address]] Fused<F6> f6_;
  using R6 = typename Fused<F6>::Result;
  [[no_unique_address]] Fused<F7> f7_;
  using R7 = typename Fused<F7>::Result;
  [[no_unique_address]] Fused<F8> f8_;
  using R8 = typename Fused<F8>::Result;
  [[no_unique_address]] Fused<F9> f9_;
  using R9 = typename Fused<F9>::Result;
  [[no_unique_address]] Fused<F10> f10_;
  using R10 = typename Fused<F10>::Result;
  [[no_unique_address]] Fused<F11> f11_;
  using R11 = typename Fused<F11>::Result;
  [[no_unique_address]] Fused<F12> f12_;
  using R12 = typename Fused<F12>::Result;
  [[no_unique_address]] Fused<F13> f13_;
  using R13 = typename Fused<F13>::Result;
  [[no_unique_address]] Fused<F14> f14_;
  using R14 = typename Fused<F14>::Result;
  [[no_unique_address]] Fused<F15> f15_;
  using R15 = typename Fused<F15>::Result;
  [[no_unique_address]] Fused<F16> f16_;
  using R16 = typename Fused<F16>::Result;
  [[no_unique_address]] Fused<F17> f17_;
  using R17 = typename Fused<F17>::Result;
  [[no_unique_address]] Fused<F18> f18_;
  using R18 = typename Fused<F18>::Result;
  [[no_unique_address]] Fused<F19> f19_;
  using R19 = typename Fused<F19>::Result;
  [[no_unique_address]] Fused<F20> f20_;
  using R20 = typename Fused<F20>::Result;
  [[no_unique_address]] Fused<F21> f21_;
  using R21 = typename Fused<F21>::Result;
  [[no_unique_address]] Fused<F22> f22_;
  using R22 = typename Fused<F22>::Result;
  [[no_unique_address]] Fused<F23> f23_;
  using R23 = typename Fused<F23>::Result;
  [[no_unique_address]] Fused<F24> f24_;
  using R24 = typename Fused<F24>::Result;
  [[no_unique_address]] Fused<F25> f25_;
  using R25 = typename Fused<F25>::Result;
  [[no_unique_address]] Fused<F26> f26_;
  using R26 = typename Fused<F26>::Result;
  [[no_unique_address]] Fused<F27> f27_;
  using R27 = typename Fused<F27>::Result;
  [[no_unique_address]] Fused<F28> f28_;
  using R28 = typename Fused<F28>::Result;
  [[no_unique_address]] Fused<F29> f29_;
  using R29 = typename Fused<F29>::Result;
  [[no_unique_address]] Fused<F30> f30_;
  using R30 = typename Fused<F30>::Result;

 public:
  Join(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
       F10 f10, F11 f11, F12 f12, F13 f13, F14 f14, F15 f15, F16 f16, F17 f17,
       F18 f18, F19 f19, F20 f20, F21 f21, F22 f22, F23 f23, F24 f24, F25 f25,
       F26 f26, F27 f27, F28 f28, F29 f29, F30 f30) {
    Construct(&f0_.pending, std::move(f0));
    Construct(&f1_.pending, std::move(f1));
    Construct(&f2_.pending, std::move(f2));
    Construct(&f3_.pending, std::move(f3));
    Construct(&f4_.pending, std::move(f4));
    Construct(&f5_.pending, std::move(f5));
    Construct(&f6_.pending, std::move(f6));
    Construct(&f7_.pending, std::move(f7));
    Construct(&f8_.pending, std::move(f8));
    Construct(&f9_.pending, std::move(f9));
    Construct(&f10_.pending, std::move(f10));
    Construct(&f11_.pending, std::move(f11));
    Construct(&f12_.pending, std::move(f12));
    Construct(&f13_.pending, std::move(f13));
    Construct(&f14_.pending, std::move(f14));
    Construct(&f15_.pending, std::move(f15));
    Construct(&f16_.pending, std::move(f16));
    Construct(&f17_.pending, std::move(f17));
    Construct(&f18_.pending, std::move(f18));
    Construct(&f19_.pending, std::move(f19));
    Construct(&f20_.pending, std::move(f20));
    Construct(&f21_.pending, std::move(f21));
    Construct(&f22_.pending, std::move(f22));
    Construct(&f23_.pending, std::move(f23));
    Construct(&f24_.pending, std::move(f24));
    Construct(&f25_.pending, std::move(f25));
    Construct(&f26_.pending, std::move(f26));
    Construct(&f27_.pending, std::move(f27));
    Construct(&f28_.pending, std::move(f28));
    Construct(&f29_.pending, std::move(f29));
    Construct(&f30_.pending, std::move(f30));
  }
  Join& operator=(const Join&) = delete;
  Join(const Join& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
    Construct(&f3_.pending, std::move(other.f3_.pending));
    Construct(&f4_.pending, std::move(other.f4_.pending));
    Construct(&f5_.pending, std::move(other.f5_.pending));
    Construct(&f6_.pending, std::move(other.f6_.pending));
    Construct(&f7_.pending, std::move(other.f7_.pending));
    Construct(&f8_.pending, std::move(other.f8_.pending));
    Construct(&f9_.pending, std::move(other.f9_.pending));
    Construct(&f10_.pending, std::move(other.f10_.pending));
    Construct(&f11_.pending, std::move(other.f11_.pending));
    Construct(&f12_.pending, std::move(other.f12_.pending));
    Construct(&f13_.pending, std::move(other.f13_.pending));
    Construct(&f14_.pending, std::move(other.f14_.pending));
    Construct(&f15_.pending, std::move(other.f15_.pending));
    Construct(&f16_.pending, std::move(other.f16_.pending));
    Construct(&f17_.pending, std::move(other.f17_.pending));
    Construct(&f18_.pending, std::move(other.f18_.pending));
    Construct(&f19_.pending, std::move(other.f19_.pending));
    Construct(&f20_.pending, std::move(other.f20_.pending));
    Construct(&f21_.pending, std::move(other.f21_.pending));
    Construct(&f22_.pending, std::move(other.f22_.pending));
    Construct(&f23_.pending, std::move(other.f23_.pending));
    Construct(&f24_.pending, std::move(other.f24_.pending));
    Construct(&f25_.pending, std::move(other.f25_.pending));
    Construct(&f26_.pending, std::move(other.f26_.pending));
    Construct(&f27_.pending, std::move(other.f27_.pending));
    Construct(&f28_.pending, std::move(other.f28_.pending));
    Construct(&f29_.pending, std::move(other.f29_.pending));
    Construct(&f30_.pending, std::move(other.f30_.pending));
  }
  Join(Join&& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
    Construct(&f3_.pending, std::move(other.f3_.pending));
    Construct(&f4_.pending, std::move(other.f4_.pending));
    Construct(&f5_.pending, std::move(other.f5_.pending));
    Construct(&f6_.pending, std::move(other.f6_.pending));
    Construct(&f7_.pending, std::move(other.f7_.pending));
    Construct(&f8_.pending, std::move(other.f8_.pending));
    Construct(&f9_.pending, std::move(other.f9_.pending));
    Construct(&f10_.pending, std::move(other.f10_.pending));
    Construct(&f11_.pending, std::move(other.f11_.pending));
    Construct(&f12_.pending, std::move(other.f12_.pending));
    Construct(&f13_.pending, std::move(other.f13_.pending));
    Construct(&f14_.pending, std::move(other.f14_.pending));
    Construct(&f15_.pending, std::move(other.f15_.pending));
    Construct(&f16_.pending, std::move(other.f16_.pending));
    Construct(&f17_.pending, std::move(other.f17_.pending));
    Construct(&f18_.pending, std::move(other.f18_.pending));
    Construct(&f19_.pending, std::move(other.f19_.pending));
    Construct(&f20_.pending, std::move(other.f20_.pending));
    Construct(&f21_.pending, std::move(other.f21_.pending));
    Construct(&f22_.pending, std::move(other.f22_.pending));
    Construct(&f23_.pending, std::move(other.f23_.pending));
    Construct(&f24_.pending, std::move(other.f24_.pending));
    Construct(&f25_.pending, std::move(other.f25_.pending));
    Construct(&f26_.pending, std::move(other.f26_.pending));
    Construct(&f27_.pending, std::move(other.f27_.pending));
    Construct(&f28_.pending, std::move(other.f28_.pending));
    Construct(&f29_.pending, std::move(other.f29_.pending));
    Construct(&f30_.pending, std::move(other.f30_.pending));
  }
  ~Join() {
    f0_.CallDestruct((state_ & 1) != 0);
    f1_.CallDestruct((state_ & 2) != 0);
    f2_.CallDestruct((state_ & 4) != 0);
    f3_.CallDestruct((state_ & 8) != 0);
    f4_.CallDestruct((state_ & 16) != 0);
    f5_.CallDestruct((state_ & 32) != 0);
    f6_.CallDestruct((state_ & 64) != 0);
    f7_.CallDestruct((state_ & 128) != 0);
    f8_.CallDestruct((state_ & 256) != 0);
    f9_.CallDestruct((state_ & 512) != 0);
    f10_.CallDestruct((state_ & 1024) != 0);
    f11_.CallDestruct((state_ & 2048) != 0);
    f12_.CallDestruct((state_ & 4096) != 0);
    f13_.CallDestruct((state_ & 8192) != 0);
    f14_.CallDestruct((state_ & 16384) != 0);
    f15_.CallDestruct((state_ & 32768) != 0);
    f16_.CallDestruct((state_ & 65536) != 0);
    f17_.CallDestruct((state_ & 131072) != 0);
    f18_.CallDestruct((state_ & 262144) != 0);
    f19_.CallDestruct((state_ & 524288) != 0);
    f20_.CallDestruct((state_ & 1048576) != 0);
    f21_.CallDestruct((state_ & 2097152) != 0);
    f22_.CallDestruct((state_ & 4194304) != 0);
    f23_.CallDestruct((state_ & 8388608) != 0);
    f24_.CallDestruct((state_ & 16777216) != 0);
    f25_.CallDestruct((state_ & 33554432) != 0);
    f26_.CallDestruct((state_ & 67108864) != 0);
    f27_.CallDestruct((state_ & 134217728) != 0);
    f28_.CallDestruct((state_ & 268435456) != 0);
    f29_.CallDestruct((state_ & 536870912) != 0);
    f30_.CallDestruct((state_ & 1073741824) != 0);
  }
  Poll<std::tuple<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13,
                  R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24, R25,
                  R26, R27, R28, R29, R30>>
  operator()() {
    f0_.Poll(&state_, decltype(state_)(1));
    f1_.Poll(&state_, decltype(state_)(2));
    f2_.Poll(&state_, decltype(state_)(4));
    f3_.Poll(&state_, decltype(state_)(8));
    f4_.Poll(&state_, decltype(state_)(16));
    f5_.Poll(&state_, decltype(state_)(32));
    f6_.Poll(&state_, decltype(state_)(64));
    f7_.Poll(&state_, decltype(state_)(128));
    f8_.Poll(&state_, decltype(state_)(256));
    f9_.Poll(&state_, decltype(state_)(512));
    f10_.Poll(&state_, decltype(state_)(1024));
    f11_.Poll(&state_, decltype(state_)(2048));
    f12_.Poll(&state_, decltype(state_)(4096));
    f13_.Poll(&state_, decltype(state_)(8192));
    f14_.Poll(&state_, decltype(state_)(16384));
    f15_.Poll(&state_, decltype(state_)(32768));
    f16_.Poll(&state_, decltype(state_)(65536));
    f17_.Poll(&state_, decltype(state_)(131072));
    f18_.Poll(&state_, decltype(state_)(262144));
    f19_.Poll(&state_, decltype(state_)(524288));
    f20_.Poll(&state_, decltype(state_)(1048576));
    f21_.Poll(&state_, decltype(state_)(2097152));
    f22_.Poll(&state_, decltype(state_)(4194304));
    f23_.Poll(&state_, decltype(state_)(8388608));
    f24_.Poll(&state_, decltype(state_)(16777216));
    f25_.Poll(&state_, decltype(state_)(33554432));
    f26_.Poll(&state_, decltype(state_)(67108864));
    f27_.Poll(&state_, decltype(state_)(134217728));
    f28_.Poll(&state_, decltype(state_)(268435456));
    f29_.Poll(&state_, decltype(state_)(536870912));
    f30_.Poll(&state_, decltype(state_)(1073741824));
    if (state_ != 2147483647) return kPending;
    return ready(std::tuple<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11,
                            R12, R13, R14, R15, R16, R17, R18, R19, R20, R21,
                            R22, R23, R24, R25, R26, R27, R28, R29, R30>(
        std::move(f0_.ready), std::move(f1_.ready), std::move(f2_.ready),
        std::move(f3_.ready), std::move(f4_.ready), std::move(f5_.ready),
        std::move(f6_.ready), std::move(f7_.ready), std::move(f8_.ready),
        std::move(f9_.ready), std::move(f10_.ready), std::move(f11_.ready),
        std::move(f12_.ready), std::move(f13_.ready), std::move(f14_.ready),
        std::move(f15_.ready), std::move(f16_.ready), std::move(f17_.ready),
        std::move(f18_.ready), std::move(f19_.ready), std::move(f20_.ready),
        std::move(f21_.ready), std::move(f22_.ready), std::move(f23_.ready),
        std::move(f24_.ready), std::move(f25_.ready), std::move(f26_.ready),
        std::move(f27_.ready), std::move(f28_.ready), std::move(f29_.ready),
        std::move(f30_.ready)));
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12, typename F13, typename F14,
          typename F15, typename F16, typename F17, typename F18, typename F19,
          typename F20, typename F21, typename F22, typename F23, typename F24,
          typename F25, typename F26, typename F27, typename F28, typename F29,
          typename F30, typename F31>
class Join<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
           F16, F17, F18, F19, F20, F21, F22, F23, F24, F25, F26, F27, F28, F29,
           F30, F31> {
 private:
  [[no_unique_address]] uint32_t state_ = 0;
  [[no_unique_address]] Fused<F0> f0_;
  using R0 = typename Fused<F0>::Result;
  [[no_unique_address]] Fused<F1> f1_;
  using R1 = typename Fused<F1>::Result;
  [[no_unique_address]] Fused<F2> f2_;
  using R2 = typename Fused<F2>::Result;
  [[no_unique_address]] Fused<F3> f3_;
  using R3 = typename Fused<F3>::Result;
  [[no_unique_address]] Fused<F4> f4_;
  using R4 = typename Fused<F4>::Result;
  [[no_unique_address]] Fused<F5> f5_;
  using R5 = typename Fused<F5>::Result;
  [[no_unique_address]] Fused<F6> f6_;
  using R6 = typename Fused<F6>::Result;
  [[no_unique_address]] Fused<F7> f7_;
  using R7 = typename Fused<F7>::Result;
  [[no_unique_address]] Fused<F8> f8_;
  using R8 = typename Fused<F8>::Result;
  [[no_unique_address]] Fused<F9> f9_;
  using R9 = typename Fused<F9>::Result;
  [[no_unique_address]] Fused<F10> f10_;
  using R10 = typename Fused<F10>::Result;
  [[no_unique_address]] Fused<F11> f11_;
  using R11 = typename Fused<F11>::Result;
  [[no_unique_address]] Fused<F12> f12_;
  using R12 = typename Fused<F12>::Result;
  [[no_unique_address]] Fused<F13> f13_;
  using R13 = typename Fused<F13>::Result;
  [[no_unique_address]] Fused<F14> f14_;
  using R14 = typename Fused<F14>::Result;
  [[no_unique_address]] Fused<F15> f15_;
  using R15 = typename Fused<F15>::Result;
  [[no_unique_address]] Fused<F16> f16_;
  using R16 = typename Fused<F16>::Result;
  [[no_unique_address]] Fused<F17> f17_;
  using R17 = typename Fused<F17>::Result;
  [[no_unique_address]] Fused<F18> f18_;
  using R18 = typename Fused<F18>::Result;
  [[no_unique_address]] Fused<F19> f19_;
  using R19 = typename Fused<F19>::Result;
  [[no_unique_address]] Fused<F20> f20_;
  using R20 = typename Fused<F20>::Result;
  [[no_unique_address]] Fused<F21> f21_;
  using R21 = typename Fused<F21>::Result;
  [[no_unique_address]] Fused<F22> f22_;
  using R22 = typename Fused<F22>::Result;
  [[no_unique_address]] Fused<F23> f23_;
  using R23 = typename Fused<F23>::Result;
  [[no_unique_address]] Fused<F24> f24_;
  using R24 = typename Fused<F24>::Result;
  [[no_unique_address]] Fused<F25> f25_;
  using R25 = typename Fused<F25>::Result;
  [[no_unique_address]] Fused<F26> f26_;
  using R26 = typename Fused<F26>::Result;
  [[no_unique_address]] Fused<F27> f27_;
  using R27 = typename Fused<F27>::Result;
  [[no_unique_address]] Fused<F28> f28_;
  using R28 = typename Fused<F28>::Result;
  [[no_unique_address]] Fused<F29> f29_;
  using R29 = typename Fused<F29>::Result;
  [[no_unique_address]] Fused<F30> f30_;
  using R30 = typename Fused<F30>::Result;
  [[no_unique_address]] Fused<F31> f31_;
  using R31 = typename Fused<F31>::Result;

 public:
  Join(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
       F10 f10, F11 f11, F12 f12, F13 f13, F14 f14, F15 f15, F16 f16, F17 f17,
       F18 f18, F19 f19, F20 f20, F21 f21, F22 f22, F23 f23, F24 f24, F25 f25,
       F26 f26, F27 f27, F28 f28, F29 f29, F30 f30, F31 f31) {
    Construct(&f0_.pending, std::move(f0));
    Construct(&f1_.pending, std::move(f1));
    Construct(&f2_.pending, std::move(f2));
    Construct(&f3_.pending, std::move(f3));
    Construct(&f4_.pending, std::move(f4));
    Construct(&f5_.pending, std::move(f5));
    Construct(&f6_.pending, std::move(f6));
    Construct(&f7_.pending, std::move(f7));
    Construct(&f8_.pending, std::move(f8));
    Construct(&f9_.pending, std::move(f9));
    Construct(&f10_.pending, std::move(f10));
    Construct(&f11_.pending, std::move(f11));
    Construct(&f12_.pending, std::move(f12));
    Construct(&f13_.pending, std::move(f13));
    Construct(&f14_.pending, std::move(f14));
    Construct(&f15_.pending, std::move(f15));
    Construct(&f16_.pending, std::move(f16));
    Construct(&f17_.pending, std::move(f17));
    Construct(&f18_.pending, std::move(f18));
    Construct(&f19_.pending, std::move(f19));
    Construct(&f20_.pending, std::move(f20));
    Construct(&f21_.pending, std::move(f21));
    Construct(&f22_.pending, std::move(f22));
    Construct(&f23_.pending, std::move(f23));
    Construct(&f24_.pending, std::move(f24));
    Construct(&f25_.pending, std::move(f25));
    Construct(&f26_.pending, std::move(f26));
    Construct(&f27_.pending, std::move(f27));
    Construct(&f28_.pending, std::move(f28));
    Construct(&f29_.pending, std::move(f29));
    Construct(&f30_.pending, std::move(f30));
    Construct(&f31_.pending, std::move(f31));
  }
  Join& operator=(const Join&) = delete;
  Join(const Join& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
    Construct(&f3_.pending, std::move(other.f3_.pending));
    Construct(&f4_.pending, std::move(other.f4_.pending));
    Construct(&f5_.pending, std::move(other.f5_.pending));
    Construct(&f6_.pending, std::move(other.f6_.pending));
    Construct(&f7_.pending, std::move(other.f7_.pending));
    Construct(&f8_.pending, std::move(other.f8_.pending));
    Construct(&f9_.pending, std::move(other.f9_.pending));
    Construct(&f10_.pending, std::move(other.f10_.pending));
    Construct(&f11_.pending, std::move(other.f11_.pending));
    Construct(&f12_.pending, std::move(other.f12_.pending));
    Construct(&f13_.pending, std::move(other.f13_.pending));
    Construct(&f14_.pending, std::move(other.f14_.pending));
    Construct(&f15_.pending, std::move(other.f15_.pending));
    Construct(&f16_.pending, std::move(other.f16_.pending));
    Construct(&f17_.pending, std::move(other.f17_.pending));
    Construct(&f18_.pending, std::move(other.f18_.pending));
    Construct(&f19_.pending, std::move(other.f19_.pending));
    Construct(&f20_.pending, std::move(other.f20_.pending));
    Construct(&f21_.pending, std::move(other.f21_.pending));
    Construct(&f22_.pending, std::move(other.f22_.pending));
    Construct(&f23_.pending, std::move(other.f23_.pending));
    Construct(&f24_.pending, std::move(other.f24_.pending));
    Construct(&f25_.pending, std::move(other.f25_.pending));
    Construct(&f26_.pending, std::move(other.f26_.pending));
    Construct(&f27_.pending, std::move(other.f27_.pending));
    Construct(&f28_.pending, std::move(other.f28_.pending));
    Construct(&f29_.pending, std::move(other.f29_.pending));
    Construct(&f30_.pending, std::move(other.f30_.pending));
    Construct(&f31_.pending, std::move(other.f31_.pending));
  }
  Join(Join&& other) {
    assert(other.state_ == 0);
    Construct(&f0_.pending, std::move(other.f0_.pending));
    Construct(&f1_.pending, std::move(other.f1_.pending));
    Construct(&f2_.pending, std::move(other.f2_.pending));
    Construct(&f3_.pending, std::move(other.f3_.pending));
    Construct(&f4_.pending, std::move(other.f4_.pending));
    Construct(&f5_.pending, std::move(other.f5_.pending));
    Construct(&f6_.pending, std::move(other.f6_.pending));
    Construct(&f7_.pending, std::move(other.f7_.pending));
    Construct(&f8_.pending, std::move(other.f8_.pending));
    Construct(&f9_.pending, std::move(other.f9_.pending));
    Construct(&f10_.pending, std::move(other.f10_.pending));
    Construct(&f11_.pending, std::move(other.f11_.pending));
    Construct(&f12_.pending, std::move(other.f12_.pending));
    Construct(&f13_.pending, std::move(other.f13_.pending));
    Construct(&f14_.pending, std::move(other.f14_.pending));
    Construct(&f15_.pending, std::move(other.f15_.pending));
    Construct(&f16_.pending, std::move(other.f16_.pending));
    Construct(&f17_.pending, std::move(other.f17_.pending));
    Construct(&f18_.pending, std::move(other.f18_.pending));
    Construct(&f19_.pending, std::move(other.f19_.pending));
    Construct(&f20_.pending, std::move(other.f20_.pending));
    Construct(&f21_.pending, std::move(other.f21_.pending));
    Construct(&f22_.pending, std::move(other.f22_.pending));
    Construct(&f23_.pending, std::move(other.f23_.pending));
    Construct(&f24_.pending, std::move(other.f24_.pending));
    Construct(&f25_.pending, std::move(other.f25_.pending));
    Construct(&f26_.pending, std::move(other.f26_.pending));
    Construct(&f27_.pending, std::move(other.f27_.pending));
    Construct(&f28_.pending, std::move(other.f28_.pending));
    Construct(&f29_.pending, std::move(other.f29_.pending));
    Construct(&f30_.pending, std::move(other.f30_.pending));
    Construct(&f31_.pending, std::move(other.f31_.pending));
  }
  ~Join() {
    f0_.CallDestruct((state_ & 1) != 0);
    f1_.CallDestruct((state_ & 2) != 0);
    f2_.CallDestruct((state_ & 4) != 0);
    f3_.CallDestruct((state_ & 8) != 0);
    f4_.CallDestruct((state_ & 16) != 0);
    f5_.CallDestruct((state_ & 32) != 0);
    f6_.CallDestruct((state_ & 64) != 0);
    f7_.CallDestruct((state_ & 128) != 0);
    f8_.CallDestruct((state_ & 256) != 0);
    f9_.CallDestruct((state_ & 512) != 0);
    f10_.CallDestruct((state_ & 1024) != 0);
    f11_.CallDestruct((state_ & 2048) != 0);
    f12_.CallDestruct((state_ & 4096) != 0);
    f13_.CallDestruct((state_ & 8192) != 0);
    f14_.CallDestruct((state_ & 16384) != 0);
    f15_.CallDestruct((state_ & 32768) != 0);
    f16_.CallDestruct((state_ & 65536) != 0);
    f17_.CallDestruct((state_ & 131072) != 0);
    f18_.CallDestruct((state_ & 262144) != 0);
    f19_.CallDestruct((state_ & 524288) != 0);
    f20_.CallDestruct((state_ & 1048576) != 0);
    f21_.CallDestruct((state_ & 2097152) != 0);
    f22_.CallDestruct((state_ & 4194304) != 0);
    f23_.CallDestruct((state_ & 8388608) != 0);
    f24_.CallDestruct((state_ & 16777216) != 0);
    f25_.CallDestruct((state_ & 33554432) != 0);
    f26_.CallDestruct((state_ & 67108864) != 0);
    f27_.CallDestruct((state_ & 134217728) != 0);
    f28_.CallDestruct((state_ & 268435456) != 0);
    f29_.CallDestruct((state_ & 536870912) != 0);
    f30_.CallDestruct((state_ & 1073741824) != 0);
    f31_.CallDestruct((state_ & 2147483648) != 0);
  }
  Poll<std::tuple<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13,
                  R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24, R25,
                  R26, R27, R28, R29, R30, R31>>
  operator()() {
    f0_.Poll(&state_, decltype(state_)(1));
    f1_.Poll(&state_, decltype(state_)(2));
    f2_.Poll(&state_, decltype(state_)(4));
    f3_.Poll(&state_, decltype(state_)(8));
    f4_.Poll(&state_, decltype(state_)(16));
    f5_.Poll(&state_, decltype(state_)(32));
    f6_.Poll(&state_, decltype(state_)(64));
    f7_.Poll(&state_, decltype(state_)(128));
    f8_.Poll(&state_, decltype(state_)(256));
    f9_.Poll(&state_, decltype(state_)(512));
    f10_.Poll(&state_, decltype(state_)(1024));
    f11_.Poll(&state_, decltype(state_)(2048));
    f12_.Poll(&state_, decltype(state_)(4096));
    f13_.Poll(&state_, decltype(state_)(8192));
    f14_.Poll(&state_, decltype(state_)(16384));
    f15_.Poll(&state_, decltype(state_)(32768));
    f16_.Poll(&state_, decltype(state_)(65536));
    f17_.Poll(&state_, decltype(state_)(131072));
    f18_.Poll(&state_, decltype(state_)(262144));
    f19_.Poll(&state_, decltype(state_)(524288));
    f20_.Poll(&state_, decltype(state_)(1048576));
    f21_.Poll(&state_, decltype(state_)(2097152));
    f22_.Poll(&state_, decltype(state_)(4194304));
    f23_.Poll(&state_, decltype(state_)(8388608));
    f24_.Poll(&state_, decltype(state_)(16777216));
    f25_.Poll(&state_, decltype(state_)(33554432));
    f26_.Poll(&state_, decltype(state_)(67108864));
    f27_.Poll(&state_, decltype(state_)(134217728));
    f28_.Poll(&state_, decltype(state_)(268435456));
    f29_.Poll(&state_, decltype(state_)(536870912));
    f30_.Poll(&state_, decltype(state_)(1073741824));
    f31_.Poll(&state_, decltype(state_)(2147483648));
    if (state_ != 4294967295) return kPending;
    return ready(std::tuple<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11,
                            R12, R13, R14, R15, R16, R17, R18, R19, R20, R21,
                            R22, R23, R24, R25, R26, R27, R28, R29, R30, R31>(
        std::move(f0_.ready), std::move(f1_.ready), std::move(f2_.ready),
        std::move(f3_.ready), std::move(f4_.ready), std::move(f5_.ready),
        std::move(f6_.ready), std::move(f7_.ready), std::move(f8_.ready),
        std::move(f9_.ready), std::move(f10_.ready), std::move(f11_.ready),
        std::move(f12_.ready), std::move(f13_.ready), std::move(f14_.ready),
        std::move(f15_.ready), std::move(f16_.ready), std::move(f17_.ready),
        std::move(f18_.ready), std::move(f19_.ready), std::move(f20_.ready),
        std::move(f21_.ready), std::move(f22_.ready), std::move(f23_.ready),
        std::move(f24_.ready), std::move(f25_.ready), std::move(f26_.ready),
        std::move(f27_.ready), std::move(f28_.ready), std::move(f29_.ready),
        std::move(f30_.ready), std::move(f31_.ready)));
  }
};
