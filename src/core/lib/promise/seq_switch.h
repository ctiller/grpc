/*
 * Copyright 2021 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Automatically generated by tools/codegen/core/gen_seq_switch.py
 */

template <typename F0, typename F1>
class Seq<F0, F1> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using FLast = typename State0::Next::Promise;
  union {
    [[no_unique_address]] State0 prior_;
    [[no_unique_address]] FLast f_;
  };

 public:
  Seq(F0 f0, F1 f1) : prior_(std::move(f0), std::move(f1)) {}
  Seq& operator=(const Seq&) = delete;
  Seq(const Seq& other) {
    assert(other.state_ == 0);
    new (&prior_) State0(other.prior_);
  }
  Seq(Seq&& other) {
    assert(other.state_ == 0);
    new (&prior_) State0(std::move(other.prior_));
  }
  ~Seq() {
    switch (state_) {
      case 0:
        Destruct(&prior_.f);
        goto fin0;
      case 1:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(&prior_.next);
  }
  decltype(std::declval<typename State0::Next::Promise>()()) operator()() {
    switch (state_) {
      case 0:
        if (StepSeq(&prior_, &f_)) break;
        state_ = 1;
      case 1:
        return f_();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2>
class Seq<F0, F1, F2> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using FLast = typename State1::Next::Promise;
  union {
    [[no_unique_address]] State1 prior_;
    [[no_unique_address]] FLast f_;
  };

 public:
  Seq(F0 f0, F1 f1, F2 f2)
      : prior_(std::move(f0), std::move(f1), std::move(f2)) {}
  Seq& operator=(const Seq&) = delete;
  Seq(const Seq& other) {
    assert(other.state_ == 0);
    new (&prior_) State1(other.prior_);
  }
  Seq(Seq&& other) {
    assert(other.state_ == 0);
    new (&prior_) State1(std::move(other.prior_));
  }
  ~Seq() {
    switch (state_) {
      case 0:
        Destruct(&prior_.prior.f);
        goto fin0;
      case 1:
        Destruct(&prior_.f);
        goto fin1;
      case 2:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(&prior_.prior.next);
  fin1:
    Destruct(&prior_.next);
  }
  decltype(std::declval<typename State1::Next::Promise>()()) operator()() {
    switch (state_) {
      case 0:
        if (StepSeq(&prior_.prior, &prior_.f)) break;
        state_ = 1;
      case 1:
        if (StepSeq(&prior_, &f_)) break;
        state_ = 2;
      case 2:
        return f_();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2, typename F3>
class Seq<F0, F1, F2, F3> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using State2 = IntermediateState<State1, F3, F0, F1, F2>;
  using FLast = typename State2::Next::Promise;
  union {
    [[no_unique_address]] State2 prior_;
    [[no_unique_address]] FLast f_;
  };

 public:
  Seq(F0 f0, F1 f1, F2 f2, F3 f3)
      : prior_(std::move(f0), std::move(f1), std::move(f2), std::move(f3)) {}
  Seq& operator=(const Seq&) = delete;
  Seq(const Seq& other) {
    assert(other.state_ == 0);
    new (&prior_) State2(other.prior_);
  }
  Seq(Seq&& other) {
    assert(other.state_ == 0);
    new (&prior_) State2(std::move(other.prior_));
  }
  ~Seq() {
    switch (state_) {
      case 0:
        Destruct(&prior_.prior.prior.f);
        goto fin0;
      case 1:
        Destruct(&prior_.prior.f);
        goto fin1;
      case 2:
        Destruct(&prior_.f);
        goto fin2;
      case 3:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(&prior_.prior.prior.next);
  fin1:
    Destruct(&prior_.prior.next);
  fin2:
    Destruct(&prior_.next);
  }
  decltype(std::declval<typename State2::Next::Promise>()()) operator()() {
    switch (state_) {
      case 0:
        if (StepSeq(&prior_.prior.prior, &prior_.prior.f)) break;
        state_ = 1;
      case 1:
        if (StepSeq(&prior_.prior, &prior_.f)) break;
        state_ = 2;
      case 2:
        if (StepSeq(&prior_, &f_)) break;
        state_ = 3;
      case 3:
        return f_();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4>
class Seq<F0, F1, F2, F3, F4> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using State2 = IntermediateState<State1, F3, F0, F1, F2>;
  using State3 = IntermediateState<State2, F4, F0, F1, F2, F3>;
  using FLast = typename State3::Next::Promise;
  union {
    [[no_unique_address]] State3 prior_;
    [[no_unique_address]] FLast f_;
  };

 public:
  Seq(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4)
      : prior_(std::move(f0), std::move(f1), std::move(f2), std::move(f3),
               std::move(f4)) {}
  Seq& operator=(const Seq&) = delete;
  Seq(const Seq& other) {
    assert(other.state_ == 0);
    new (&prior_) State3(other.prior_);
  }
  Seq(Seq&& other) {
    assert(other.state_ == 0);
    new (&prior_) State3(std::move(other.prior_));
  }
  ~Seq() {
    switch (state_) {
      case 0:
        Destruct(&prior_.prior.prior.prior.f);
        goto fin0;
      case 1:
        Destruct(&prior_.prior.prior.f);
        goto fin1;
      case 2:
        Destruct(&prior_.prior.f);
        goto fin2;
      case 3:
        Destruct(&prior_.f);
        goto fin3;
      case 4:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(&prior_.prior.prior.prior.next);
  fin1:
    Destruct(&prior_.prior.prior.next);
  fin2:
    Destruct(&prior_.prior.next);
  fin3:
    Destruct(&prior_.next);
  }
  decltype(std::declval<typename State3::Next::Promise>()()) operator()() {
    switch (state_) {
      case 0:
        if (StepSeq(&prior_.prior.prior.prior, &prior_.prior.prior.f)) break;
        state_ = 1;
      case 1:
        if (StepSeq(&prior_.prior.prior, &prior_.prior.f)) break;
        state_ = 2;
      case 2:
        if (StepSeq(&prior_.prior, &prior_.f)) break;
        state_ = 3;
      case 3:
        if (StepSeq(&prior_, &f_)) break;
        state_ = 4;
      case 4:
        return f_();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5>
class Seq<F0, F1, F2, F3, F4, F5> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using State2 = IntermediateState<State1, F3, F0, F1, F2>;
  using State3 = IntermediateState<State2, F4, F0, F1, F2, F3>;
  using State4 = IntermediateState<State3, F5, F0, F1, F2, F3, F4>;
  using FLast = typename State4::Next::Promise;
  union {
    [[no_unique_address]] State4 prior_;
    [[no_unique_address]] FLast f_;
  };

 public:
  Seq(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5)
      : prior_(std::move(f0), std::move(f1), std::move(f2), std::move(f3),
               std::move(f4), std::move(f5)) {}
  Seq& operator=(const Seq&) = delete;
  Seq(const Seq& other) {
    assert(other.state_ == 0);
    new (&prior_) State4(other.prior_);
  }
  Seq(Seq&& other) {
    assert(other.state_ == 0);
    new (&prior_) State4(std::move(other.prior_));
  }
  ~Seq() {
    switch (state_) {
      case 0:
        Destruct(&prior_.prior.prior.prior.prior.f);
        goto fin0;
      case 1:
        Destruct(&prior_.prior.prior.prior.f);
        goto fin1;
      case 2:
        Destruct(&prior_.prior.prior.f);
        goto fin2;
      case 3:
        Destruct(&prior_.prior.f);
        goto fin3;
      case 4:
        Destruct(&prior_.f);
        goto fin4;
      case 5:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(&prior_.prior.prior.prior.prior.next);
  fin1:
    Destruct(&prior_.prior.prior.prior.next);
  fin2:
    Destruct(&prior_.prior.prior.next);
  fin3:
    Destruct(&prior_.prior.next);
  fin4:
    Destruct(&prior_.next);
  }
  decltype(std::declval<typename State4::Next::Promise>()()) operator()() {
    switch (state_) {
      case 0:
        if (StepSeq(&prior_.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.f))
          break;
        state_ = 1;
      case 1:
        if (StepSeq(&prior_.prior.prior.prior, &prior_.prior.prior.f)) break;
        state_ = 2;
      case 2:
        if (StepSeq(&prior_.prior.prior, &prior_.prior.f)) break;
        state_ = 3;
      case 3:
        if (StepSeq(&prior_.prior, &prior_.f)) break;
        state_ = 4;
      case 4:
        if (StepSeq(&prior_, &f_)) break;
        state_ = 5;
      case 5:
        return f_();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6>
class Seq<F0, F1, F2, F3, F4, F5, F6> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using State2 = IntermediateState<State1, F3, F0, F1, F2>;
  using State3 = IntermediateState<State2, F4, F0, F1, F2, F3>;
  using State4 = IntermediateState<State3, F5, F0, F1, F2, F3, F4>;
  using State5 = IntermediateState<State4, F6, F0, F1, F2, F3, F4, F5>;
  using FLast = typename State5::Next::Promise;
  union {
    [[no_unique_address]] State5 prior_;
    [[no_unique_address]] FLast f_;
  };

 public:
  Seq(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6)
      : prior_(std::move(f0), std::move(f1), std::move(f2), std::move(f3),
               std::move(f4), std::move(f5), std::move(f6)) {}
  Seq& operator=(const Seq&) = delete;
  Seq(const Seq& other) {
    assert(other.state_ == 0);
    new (&prior_) State5(other.prior_);
  }
  Seq(Seq&& other) {
    assert(other.state_ == 0);
    new (&prior_) State5(std::move(other.prior_));
  }
  ~Seq() {
    switch (state_) {
      case 0:
        Destruct(&prior_.prior.prior.prior.prior.prior.f);
        goto fin0;
      case 1:
        Destruct(&prior_.prior.prior.prior.prior.f);
        goto fin1;
      case 2:
        Destruct(&prior_.prior.prior.prior.f);
        goto fin2;
      case 3:
        Destruct(&prior_.prior.prior.f);
        goto fin3;
      case 4:
        Destruct(&prior_.prior.f);
        goto fin4;
      case 5:
        Destruct(&prior_.f);
        goto fin5;
      case 6:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(&prior_.prior.prior.prior.prior.prior.next);
  fin1:
    Destruct(&prior_.prior.prior.prior.prior.next);
  fin2:
    Destruct(&prior_.prior.prior.prior.next);
  fin3:
    Destruct(&prior_.prior.prior.next);
  fin4:
    Destruct(&prior_.prior.next);
  fin5:
    Destruct(&prior_.next);
  }
  decltype(std::declval<typename State5::Next::Promise>()()) operator()() {
    switch (state_) {
      case 0:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.f))
          break;
        state_ = 1;
      case 1:
        if (StepSeq(&prior_.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.f))
          break;
        state_ = 2;
      case 2:
        if (StepSeq(&prior_.prior.prior.prior, &prior_.prior.prior.f)) break;
        state_ = 3;
      case 3:
        if (StepSeq(&prior_.prior.prior, &prior_.prior.f)) break;
        state_ = 4;
      case 4:
        if (StepSeq(&prior_.prior, &prior_.f)) break;
        state_ = 5;
      case 5:
        if (StepSeq(&prior_, &f_)) break;
        state_ = 6;
      case 6:
        return f_();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7>
class Seq<F0, F1, F2, F3, F4, F5, F6, F7> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using State2 = IntermediateState<State1, F3, F0, F1, F2>;
  using State3 = IntermediateState<State2, F4, F0, F1, F2, F3>;
  using State4 = IntermediateState<State3, F5, F0, F1, F2, F3, F4>;
  using State5 = IntermediateState<State4, F6, F0, F1, F2, F3, F4, F5>;
  using State6 = IntermediateState<State5, F7, F0, F1, F2, F3, F4, F5, F6>;
  using FLast = typename State6::Next::Promise;
  union {
    [[no_unique_address]] State6 prior_;
    [[no_unique_address]] FLast f_;
  };

 public:
  Seq(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7)
      : prior_(std::move(f0), std::move(f1), std::move(f2), std::move(f3),
               std::move(f4), std::move(f5), std::move(f6), std::move(f7)) {}
  Seq& operator=(const Seq&) = delete;
  Seq(const Seq& other) {
    assert(other.state_ == 0);
    new (&prior_) State6(other.prior_);
  }
  Seq(Seq&& other) {
    assert(other.state_ == 0);
    new (&prior_) State6(std::move(other.prior_));
  }
  ~Seq() {
    switch (state_) {
      case 0:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.f);
        goto fin0;
      case 1:
        Destruct(&prior_.prior.prior.prior.prior.prior.f);
        goto fin1;
      case 2:
        Destruct(&prior_.prior.prior.prior.prior.f);
        goto fin2;
      case 3:
        Destruct(&prior_.prior.prior.prior.f);
        goto fin3;
      case 4:
        Destruct(&prior_.prior.prior.f);
        goto fin4;
      case 5:
        Destruct(&prior_.prior.f);
        goto fin5;
      case 6:
        Destruct(&prior_.f);
        goto fin6;
      case 7:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.next);
  fin1:
    Destruct(&prior_.prior.prior.prior.prior.prior.next);
  fin2:
    Destruct(&prior_.prior.prior.prior.prior.next);
  fin3:
    Destruct(&prior_.prior.prior.prior.next);
  fin4:
    Destruct(&prior_.prior.prior.next);
  fin5:
    Destruct(&prior_.prior.next);
  fin6:
    Destruct(&prior_.next);
  }
  decltype(std::declval<typename State6::Next::Promise>()()) operator()() {
    switch (state_) {
      case 0:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.f))
          break;
        state_ = 1;
      case 1:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.f))
          break;
        state_ = 2;
      case 2:
        if (StepSeq(&prior_.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.f))
          break;
        state_ = 3;
      case 3:
        if (StepSeq(&prior_.prior.prior.prior, &prior_.prior.prior.f)) break;
        state_ = 4;
      case 4:
        if (StepSeq(&prior_.prior.prior, &prior_.prior.f)) break;
        state_ = 5;
      case 5:
        if (StepSeq(&prior_.prior, &prior_.f)) break;
        state_ = 6;
      case 6:
        if (StepSeq(&prior_, &f_)) break;
        state_ = 7;
      case 7:
        return f_();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8>
class Seq<F0, F1, F2, F3, F4, F5, F6, F7, F8> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using State2 = IntermediateState<State1, F3, F0, F1, F2>;
  using State3 = IntermediateState<State2, F4, F0, F1, F2, F3>;
  using State4 = IntermediateState<State3, F5, F0, F1, F2, F3, F4>;
  using State5 = IntermediateState<State4, F6, F0, F1, F2, F3, F4, F5>;
  using State6 = IntermediateState<State5, F7, F0, F1, F2, F3, F4, F5, F6>;
  using State7 = IntermediateState<State6, F8, F0, F1, F2, F3, F4, F5, F6, F7>;
  using FLast = typename State7::Next::Promise;
  union {
    [[no_unique_address]] State7 prior_;
    [[no_unique_address]] FLast f_;
  };

 public:
  Seq(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8)
      : prior_(std::move(f0), std::move(f1), std::move(f2), std::move(f3),
               std::move(f4), std::move(f5), std::move(f6), std::move(f7),
               std::move(f8)) {}
  Seq& operator=(const Seq&) = delete;
  Seq(const Seq& other) {
    assert(other.state_ == 0);
    new (&prior_) State7(other.prior_);
  }
  Seq(Seq&& other) {
    assert(other.state_ == 0);
    new (&prior_) State7(std::move(other.prior_));
  }
  ~Seq() {
    switch (state_) {
      case 0:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin0;
      case 1:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.f);
        goto fin1;
      case 2:
        Destruct(&prior_.prior.prior.prior.prior.prior.f);
        goto fin2;
      case 3:
        Destruct(&prior_.prior.prior.prior.prior.f);
        goto fin3;
      case 4:
        Destruct(&prior_.prior.prior.prior.f);
        goto fin4;
      case 5:
        Destruct(&prior_.prior.prior.f);
        goto fin5;
      case 6:
        Destruct(&prior_.prior.f);
        goto fin6;
      case 7:
        Destruct(&prior_.f);
        goto fin7;
      case 8:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.next);
  fin1:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.next);
  fin2:
    Destruct(&prior_.prior.prior.prior.prior.prior.next);
  fin3:
    Destruct(&prior_.prior.prior.prior.prior.next);
  fin4:
    Destruct(&prior_.prior.prior.prior.next);
  fin5:
    Destruct(&prior_.prior.prior.next);
  fin6:
    Destruct(&prior_.prior.next);
  fin7:
    Destruct(&prior_.next);
  }
  decltype(std::declval<typename State7::Next::Promise>()()) operator()() {
    switch (state_) {
      case 0:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 1;
      case 1:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.f))
          break;
        state_ = 2;
      case 2:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.f))
          break;
        state_ = 3;
      case 3:
        if (StepSeq(&prior_.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.f))
          break;
        state_ = 4;
      case 4:
        if (StepSeq(&prior_.prior.prior.prior, &prior_.prior.prior.f)) break;
        state_ = 5;
      case 5:
        if (StepSeq(&prior_.prior.prior, &prior_.prior.f)) break;
        state_ = 6;
      case 6:
        if (StepSeq(&prior_.prior, &prior_.f)) break;
        state_ = 7;
      case 7:
        if (StepSeq(&prior_, &f_)) break;
        state_ = 8;
      case 8:
        return f_();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9>
class Seq<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using State2 = IntermediateState<State1, F3, F0, F1, F2>;
  using State3 = IntermediateState<State2, F4, F0, F1, F2, F3>;
  using State4 = IntermediateState<State3, F5, F0, F1, F2, F3, F4>;
  using State5 = IntermediateState<State4, F6, F0, F1, F2, F3, F4, F5>;
  using State6 = IntermediateState<State5, F7, F0, F1, F2, F3, F4, F5, F6>;
  using State7 = IntermediateState<State6, F8, F0, F1, F2, F3, F4, F5, F6, F7>;
  using State8 =
      IntermediateState<State7, F9, F0, F1, F2, F3, F4, F5, F6, F7, F8>;
  using FLast = typename State8::Next::Promise;
  union {
    [[no_unique_address]] State8 prior_;
    [[no_unique_address]] FLast f_;
  };

 public:
  Seq(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9)
      : prior_(std::move(f0), std::move(f1), std::move(f2), std::move(f3),
               std::move(f4), std::move(f5), std::move(f6), std::move(f7),
               std::move(f8), std::move(f9)) {}
  Seq& operator=(const Seq&) = delete;
  Seq(const Seq& other) {
    assert(other.state_ == 0);
    new (&prior_) State8(other.prior_);
  }
  Seq(Seq&& other) {
    assert(other.state_ == 0);
    new (&prior_) State8(std::move(other.prior_));
  }
  ~Seq() {
    switch (state_) {
      case 0:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin0;
      case 1:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin1;
      case 2:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.f);
        goto fin2;
      case 3:
        Destruct(&prior_.prior.prior.prior.prior.prior.f);
        goto fin3;
      case 4:
        Destruct(&prior_.prior.prior.prior.prior.f);
        goto fin4;
      case 5:
        Destruct(&prior_.prior.prior.prior.f);
        goto fin5;
      case 6:
        Destruct(&prior_.prior.prior.f);
        goto fin6;
      case 7:
        Destruct(&prior_.prior.f);
        goto fin7;
      case 8:
        Destruct(&prior_.f);
        goto fin8;
      case 9:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin1:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.next);
  fin2:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.next);
  fin3:
    Destruct(&prior_.prior.prior.prior.prior.prior.next);
  fin4:
    Destruct(&prior_.prior.prior.prior.prior.next);
  fin5:
    Destruct(&prior_.prior.prior.prior.next);
  fin6:
    Destruct(&prior_.prior.prior.next);
  fin7:
    Destruct(&prior_.prior.next);
  fin8:
    Destruct(&prior_.next);
  }
  decltype(std::declval<typename State8::Next::Promise>()()) operator()() {
    switch (state_) {
      case 0:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 1;
      case 1:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 2;
      case 2:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.f))
          break;
        state_ = 3;
      case 3:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.f))
          break;
        state_ = 4;
      case 4:
        if (StepSeq(&prior_.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.f))
          break;
        state_ = 5;
      case 5:
        if (StepSeq(&prior_.prior.prior.prior, &prior_.prior.prior.f)) break;
        state_ = 6;
      case 6:
        if (StepSeq(&prior_.prior.prior, &prior_.prior.f)) break;
        state_ = 7;
      case 7:
        if (StepSeq(&prior_.prior, &prior_.f)) break;
        state_ = 8;
      case 8:
        if (StepSeq(&prior_, &f_)) break;
        state_ = 9;
      case 9:
        return f_();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10>
class Seq<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using State2 = IntermediateState<State1, F3, F0, F1, F2>;
  using State3 = IntermediateState<State2, F4, F0, F1, F2, F3>;
  using State4 = IntermediateState<State3, F5, F0, F1, F2, F3, F4>;
  using State5 = IntermediateState<State4, F6, F0, F1, F2, F3, F4, F5>;
  using State6 = IntermediateState<State5, F7, F0, F1, F2, F3, F4, F5, F6>;
  using State7 = IntermediateState<State6, F8, F0, F1, F2, F3, F4, F5, F6, F7>;
  using State8 =
      IntermediateState<State7, F9, F0, F1, F2, F3, F4, F5, F6, F7, F8>;
  using State9 =
      IntermediateState<State8, F10, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9>;
  using FLast = typename State9::Next::Promise;
  union {
    [[no_unique_address]] State9 prior_;
    [[no_unique_address]] FLast f_;
  };

 public:
  Seq(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
      F10 f10)
      : prior_(std::move(f0), std::move(f1), std::move(f2), std::move(f3),
               std::move(f4), std::move(f5), std::move(f6), std::move(f7),
               std::move(f8), std::move(f9), std::move(f10)) {}
  Seq& operator=(const Seq&) = delete;
  Seq(const Seq& other) {
    assert(other.state_ == 0);
    new (&prior_) State9(other.prior_);
  }
  Seq(Seq&& other) {
    assert(other.state_ == 0);
    new (&prior_) State9(std::move(other.prior_));
  }
  ~Seq() {
    switch (state_) {
      case 0:
        Destruct(
            &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin0;
      case 1:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin1;
      case 2:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin2;
      case 3:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.f);
        goto fin3;
      case 4:
        Destruct(&prior_.prior.prior.prior.prior.prior.f);
        goto fin4;
      case 5:
        Destruct(&prior_.prior.prior.prior.prior.f);
        goto fin5;
      case 6:
        Destruct(&prior_.prior.prior.prior.f);
        goto fin6;
      case 7:
        Destruct(&prior_.prior.prior.f);
        goto fin7;
      case 8:
        Destruct(&prior_.prior.f);
        goto fin8;
      case 9:
        Destruct(&prior_.f);
        goto fin9;
      case 10:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(
        &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin1:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin2:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.next);
  fin3:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.next);
  fin4:
    Destruct(&prior_.prior.prior.prior.prior.prior.next);
  fin5:
    Destruct(&prior_.prior.prior.prior.prior.next);
  fin6:
    Destruct(&prior_.prior.prior.prior.next);
  fin7:
    Destruct(&prior_.prior.prior.next);
  fin8:
    Destruct(&prior_.prior.next);
  fin9:
    Destruct(&prior_.next);
  }
  decltype(std::declval<typename State9::Next::Promise>()()) operator()() {
    switch (state_) {
      case 0:
        if (StepSeq(
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior,
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 1;
      case 1:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 2;
      case 2:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 3;
      case 3:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.f))
          break;
        state_ = 4;
      case 4:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.f))
          break;
        state_ = 5;
      case 5:
        if (StepSeq(&prior_.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.f))
          break;
        state_ = 6;
      case 6:
        if (StepSeq(&prior_.prior.prior.prior, &prior_.prior.prior.f)) break;
        state_ = 7;
      case 7:
        if (StepSeq(&prior_.prior.prior, &prior_.prior.f)) break;
        state_ = 8;
      case 8:
        if (StepSeq(&prior_.prior, &prior_.f)) break;
        state_ = 9;
      case 9:
        if (StepSeq(&prior_, &f_)) break;
        state_ = 10;
      case 10:
        return f_();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11>
class Seq<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using State2 = IntermediateState<State1, F3, F0, F1, F2>;
  using State3 = IntermediateState<State2, F4, F0, F1, F2, F3>;
  using State4 = IntermediateState<State3, F5, F0, F1, F2, F3, F4>;
  using State5 = IntermediateState<State4, F6, F0, F1, F2, F3, F4, F5>;
  using State6 = IntermediateState<State5, F7, F0, F1, F2, F3, F4, F5, F6>;
  using State7 = IntermediateState<State6, F8, F0, F1, F2, F3, F4, F5, F6, F7>;
  using State8 =
      IntermediateState<State7, F9, F0, F1, F2, F3, F4, F5, F6, F7, F8>;
  using State9 =
      IntermediateState<State8, F10, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9>;
  using State10 = IntermediateState<State9, F11, F0, F1, F2, F3, F4, F5, F6, F7,
                                    F8, F9, F10>;
  using FLast = typename State10::Next::Promise;
  union {
    [[no_unique_address]] State10 prior_;
    [[no_unique_address]] FLast f_;
  };

 public:
  Seq(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
      F10 f10, F11 f11)
      : prior_(std::move(f0), std::move(f1), std::move(f2), std::move(f3),
               std::move(f4), std::move(f5), std::move(f6), std::move(f7),
               std::move(f8), std::move(f9), std::move(f10), std::move(f11)) {}
  Seq& operator=(const Seq&) = delete;
  Seq(const Seq& other) {
    assert(other.state_ == 0);
    new (&prior_) State10(other.prior_);
  }
  Seq(Seq&& other) {
    assert(other.state_ == 0);
    new (&prior_) State10(std::move(other.prior_));
  }
  ~Seq() {
    switch (state_) {
      case 0:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.f);
        goto fin0;
      case 1:
        Destruct(
            &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin1;
      case 2:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin2;
      case 3:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin3;
      case 4:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.f);
        goto fin4;
      case 5:
        Destruct(&prior_.prior.prior.prior.prior.prior.f);
        goto fin5;
      case 6:
        Destruct(&prior_.prior.prior.prior.prior.f);
        goto fin6;
      case 7:
        Destruct(&prior_.prior.prior.prior.f);
        goto fin7;
      case 8:
        Destruct(&prior_.prior.prior.f);
        goto fin8;
      case 9:
        Destruct(&prior_.prior.f);
        goto fin9;
      case 10:
        Destruct(&prior_.f);
        goto fin10;
      case 11:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .next);
  fin1:
    Destruct(
        &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin2:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin3:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.next);
  fin4:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.next);
  fin5:
    Destruct(&prior_.prior.prior.prior.prior.prior.next);
  fin6:
    Destruct(&prior_.prior.prior.prior.prior.next);
  fin7:
    Destruct(&prior_.prior.prior.prior.next);
  fin8:
    Destruct(&prior_.prior.prior.next);
  fin9:
    Destruct(&prior_.prior.next);
  fin10:
    Destruct(&prior_.next);
  }
  decltype(std::declval<typename State10::Next::Promise>()()) operator()() {
    switch (state_) {
      case 0:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.f))
          break;
        state_ = 1;
      case 1:
        if (StepSeq(
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior,
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 2;
      case 2:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 3;
      case 3:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 4;
      case 4:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.f))
          break;
        state_ = 5;
      case 5:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.f))
          break;
        state_ = 6;
      case 6:
        if (StepSeq(&prior_.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.f))
          break;
        state_ = 7;
      case 7:
        if (StepSeq(&prior_.prior.prior.prior, &prior_.prior.prior.f)) break;
        state_ = 8;
      case 8:
        if (StepSeq(&prior_.prior.prior, &prior_.prior.f)) break;
        state_ = 9;
      case 9:
        if (StepSeq(&prior_.prior, &prior_.f)) break;
        state_ = 10;
      case 10:
        if (StepSeq(&prior_, &f_)) break;
        state_ = 11;
      case 11:
        return f_();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12>
class Seq<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using State2 = IntermediateState<State1, F3, F0, F1, F2>;
  using State3 = IntermediateState<State2, F4, F0, F1, F2, F3>;
  using State4 = IntermediateState<State3, F5, F0, F1, F2, F3, F4>;
  using State5 = IntermediateState<State4, F6, F0, F1, F2, F3, F4, F5>;
  using State6 = IntermediateState<State5, F7, F0, F1, F2, F3, F4, F5, F6>;
  using State7 = IntermediateState<State6, F8, F0, F1, F2, F3, F4, F5, F6, F7>;
  using State8 =
      IntermediateState<State7, F9, F0, F1, F2, F3, F4, F5, F6, F7, F8>;
  using State9 =
      IntermediateState<State8, F10, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9>;
  using State10 = IntermediateState<State9, F11, F0, F1, F2, F3, F4, F5, F6, F7,
                                    F8, F9, F10>;
  using State11 = IntermediateState<State10, F12, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11>;
  using FLast = typename State11::Next::Promise;
  union {
    [[no_unique_address]] State11 prior_;
    [[no_unique_address]] FLast f_;
  };

 public:
  Seq(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
      F10 f10, F11 f11, F12 f12)
      : prior_(std::move(f0), std::move(f1), std::move(f2), std::move(f3),
               std::move(f4), std::move(f5), std::move(f6), std::move(f7),
               std::move(f8), std::move(f9), std::move(f10), std::move(f11),
               std::move(f12)) {}
  Seq& operator=(const Seq&) = delete;
  Seq(const Seq& other) {
    assert(other.state_ == 0);
    new (&prior_) State11(other.prior_);
  }
  Seq(Seq&& other) {
    assert(other.state_ == 0);
    new (&prior_) State11(std::move(other.prior_));
  }
  ~Seq() {
    switch (state_) {
      case 0:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.f);
        goto fin0;
      case 1:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.f);
        goto fin1;
      case 2:
        Destruct(
            &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin2;
      case 3:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin3;
      case 4:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin4;
      case 5:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.f);
        goto fin5;
      case 6:
        Destruct(&prior_.prior.prior.prior.prior.prior.f);
        goto fin6;
      case 7:
        Destruct(&prior_.prior.prior.prior.prior.f);
        goto fin7;
      case 8:
        Destruct(&prior_.prior.prior.prior.f);
        goto fin8;
      case 9:
        Destruct(&prior_.prior.prior.f);
        goto fin9;
      case 10:
        Destruct(&prior_.prior.f);
        goto fin10;
      case 11:
        Destruct(&prior_.f);
        goto fin11;
      case 12:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.next);
  fin1:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .next);
  fin2:
    Destruct(
        &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin3:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin4:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.next);
  fin5:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.next);
  fin6:
    Destruct(&prior_.prior.prior.prior.prior.prior.next);
  fin7:
    Destruct(&prior_.prior.prior.prior.prior.next);
  fin8:
    Destruct(&prior_.prior.prior.prior.next);
  fin9:
    Destruct(&prior_.prior.prior.next);
  fin10:
    Destruct(&prior_.prior.next);
  fin11:
    Destruct(&prior_.next);
  }
  decltype(std::declval<typename State11::Next::Promise>()()) operator()() {
    switch (state_) {
      case 0:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.f))
          break;
        state_ = 1;
      case 1:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.f))
          break;
        state_ = 2;
      case 2:
        if (StepSeq(
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior,
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 3;
      case 3:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 4;
      case 4:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 5;
      case 5:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.f))
          break;
        state_ = 6;
      case 6:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.f))
          break;
        state_ = 7;
      case 7:
        if (StepSeq(&prior_.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.f))
          break;
        state_ = 8;
      case 8:
        if (StepSeq(&prior_.prior.prior.prior, &prior_.prior.prior.f)) break;
        state_ = 9;
      case 9:
        if (StepSeq(&prior_.prior.prior, &prior_.prior.f)) break;
        state_ = 10;
      case 10:
        if (StepSeq(&prior_.prior, &prior_.f)) break;
        state_ = 11;
      case 11:
        if (StepSeq(&prior_, &f_)) break;
        state_ = 12;
      case 12:
        return f_();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12, typename F13>
class Seq<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using State2 = IntermediateState<State1, F3, F0, F1, F2>;
  using State3 = IntermediateState<State2, F4, F0, F1, F2, F3>;
  using State4 = IntermediateState<State3, F5, F0, F1, F2, F3, F4>;
  using State5 = IntermediateState<State4, F6, F0, F1, F2, F3, F4, F5>;
  using State6 = IntermediateState<State5, F7, F0, F1, F2, F3, F4, F5, F6>;
  using State7 = IntermediateState<State6, F8, F0, F1, F2, F3, F4, F5, F6, F7>;
  using State8 =
      IntermediateState<State7, F9, F0, F1, F2, F3, F4, F5, F6, F7, F8>;
  using State9 =
      IntermediateState<State8, F10, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9>;
  using State10 = IntermediateState<State9, F11, F0, F1, F2, F3, F4, F5, F6, F7,
                                    F8, F9, F10>;
  using State11 = IntermediateState<State10, F12, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11>;
  using State12 = IntermediateState<State11, F13, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12>;
  using FLast = typename State12::Next::Promise;
  union {
    [[no_unique_address]] State12 prior_;
    [[no_unique_address]] FLast f_;
  };

 public:
  Seq(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
      F10 f10, F11 f11, F12 f12, F13 f13)
      : prior_(std::move(f0), std::move(f1), std::move(f2), std::move(f3),
               std::move(f4), std::move(f5), std::move(f6), std::move(f7),
               std::move(f8), std::move(f9), std::move(f10), std::move(f11),
               std::move(f12), std::move(f13)) {}
  Seq& operator=(const Seq&) = delete;
  Seq(const Seq& other) {
    assert(other.state_ == 0);
    new (&prior_) State12(other.prior_);
  }
  Seq(Seq&& other) {
    assert(other.state_ == 0);
    new (&prior_) State12(std::move(other.prior_));
  }
  ~Seq() {
    switch (state_) {
      case 0:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.f);
        goto fin0;
      case 1:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.f);
        goto fin1;
      case 2:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.f);
        goto fin2;
      case 3:
        Destruct(
            &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin3;
      case 4:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin4;
      case 5:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin5;
      case 6:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.f);
        goto fin6;
      case 7:
        Destruct(&prior_.prior.prior.prior.prior.prior.f);
        goto fin7;
      case 8:
        Destruct(&prior_.prior.prior.prior.prior.f);
        goto fin8;
      case 9:
        Destruct(&prior_.prior.prior.prior.f);
        goto fin9;
      case 10:
        Destruct(&prior_.prior.prior.f);
        goto fin10;
      case 11:
        Destruct(&prior_.prior.f);
        goto fin11;
      case 12:
        Destruct(&prior_.f);
        goto fin12;
      case 13:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.next);
  fin1:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.next);
  fin2:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .next);
  fin3:
    Destruct(
        &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin4:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin5:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.next);
  fin6:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.next);
  fin7:
    Destruct(&prior_.prior.prior.prior.prior.prior.next);
  fin8:
    Destruct(&prior_.prior.prior.prior.prior.next);
  fin9:
    Destruct(&prior_.prior.prior.prior.next);
  fin10:
    Destruct(&prior_.prior.prior.next);
  fin11:
    Destruct(&prior_.prior.next);
  fin12:
    Destruct(&prior_.next);
  }
  decltype(std::declval<typename State12::Next::Promise>()()) operator()() {
    switch (state_) {
      case 0:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.f))
          break;
        state_ = 1;
      case 1:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.f))
          break;
        state_ = 2;
      case 2:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.f))
          break;
        state_ = 3;
      case 3:
        if (StepSeq(
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior,
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 4;
      case 4:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 5;
      case 5:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 6;
      case 6:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.f))
          break;
        state_ = 7;
      case 7:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.f))
          break;
        state_ = 8;
      case 8:
        if (StepSeq(&prior_.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.f))
          break;
        state_ = 9;
      case 9:
        if (StepSeq(&prior_.prior.prior.prior, &prior_.prior.prior.f)) break;
        state_ = 10;
      case 10:
        if (StepSeq(&prior_.prior.prior, &prior_.prior.f)) break;
        state_ = 11;
      case 11:
        if (StepSeq(&prior_.prior, &prior_.f)) break;
        state_ = 12;
      case 12:
        if (StepSeq(&prior_, &f_)) break;
        state_ = 13;
      case 13:
        return f_();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12, typename F13, typename F14>
class Seq<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using State2 = IntermediateState<State1, F3, F0, F1, F2>;
  using State3 = IntermediateState<State2, F4, F0, F1, F2, F3>;
  using State4 = IntermediateState<State3, F5, F0, F1, F2, F3, F4>;
  using State5 = IntermediateState<State4, F6, F0, F1, F2, F3, F4, F5>;
  using State6 = IntermediateState<State5, F7, F0, F1, F2, F3, F4, F5, F6>;
  using State7 = IntermediateState<State6, F8, F0, F1, F2, F3, F4, F5, F6, F7>;
  using State8 =
      IntermediateState<State7, F9, F0, F1, F2, F3, F4, F5, F6, F7, F8>;
  using State9 =
      IntermediateState<State8, F10, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9>;
  using State10 = IntermediateState<State9, F11, F0, F1, F2, F3, F4, F5, F6, F7,
                                    F8, F9, F10>;
  using State11 = IntermediateState<State10, F12, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11>;
  using State12 = IntermediateState<State11, F13, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12>;
  using State13 = IntermediateState<State12, F14, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13>;
  using FLast = typename State13::Next::Promise;
  union {
    [[no_unique_address]] State13 prior_;
    [[no_unique_address]] FLast f_;
  };

 public:
  Seq(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
      F10 f10, F11 f11, F12 f12, F13 f13, F14 f14)
      : prior_(std::move(f0), std::move(f1), std::move(f2), std::move(f3),
               std::move(f4), std::move(f5), std::move(f6), std::move(f7),
               std::move(f8), std::move(f9), std::move(f10), std::move(f11),
               std::move(f12), std::move(f13), std::move(f14)) {}
  Seq& operator=(const Seq&) = delete;
  Seq(const Seq& other) {
    assert(other.state_ == 0);
    new (&prior_) State13(other.prior_);
  }
  Seq(Seq&& other) {
    assert(other.state_ == 0);
    new (&prior_) State13(std::move(other.prior_));
  }
  ~Seq() {
    switch (state_) {
      case 0:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.f);
        goto fin0;
      case 1:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.f);
        goto fin1;
      case 2:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.f);
        goto fin2;
      case 3:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.f);
        goto fin3;
      case 4:
        Destruct(
            &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin4;
      case 5:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin5;
      case 6:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin6;
      case 7:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.f);
        goto fin7;
      case 8:
        Destruct(&prior_.prior.prior.prior.prior.prior.f);
        goto fin8;
      case 9:
        Destruct(&prior_.prior.prior.prior.prior.f);
        goto fin9;
      case 10:
        Destruct(&prior_.prior.prior.prior.f);
        goto fin10;
      case 11:
        Destruct(&prior_.prior.prior.f);
        goto fin11;
      case 12:
        Destruct(&prior_.prior.f);
        goto fin12;
      case 13:
        Destruct(&prior_.f);
        goto fin13;
      case 14:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.next);
  fin1:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.next);
  fin2:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.next);
  fin3:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .next);
  fin4:
    Destruct(
        &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin5:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin6:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.next);
  fin7:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.next);
  fin8:
    Destruct(&prior_.prior.prior.prior.prior.prior.next);
  fin9:
    Destruct(&prior_.prior.prior.prior.prior.next);
  fin10:
    Destruct(&prior_.prior.prior.prior.next);
  fin11:
    Destruct(&prior_.prior.prior.next);
  fin12:
    Destruct(&prior_.prior.next);
  fin13:
    Destruct(&prior_.next);
  }
  decltype(std::declval<typename State13::Next::Promise>()()) operator()() {
    switch (state_) {
      case 0:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.f))
          break;
        state_ = 1;
      case 1:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.f))
          break;
        state_ = 2;
      case 2:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.f))
          break;
        state_ = 3;
      case 3:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.f))
          break;
        state_ = 4;
      case 4:
        if (StepSeq(
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior,
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 5;
      case 5:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 6;
      case 6:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 7;
      case 7:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.f))
          break;
        state_ = 8;
      case 8:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.f))
          break;
        state_ = 9;
      case 9:
        if (StepSeq(&prior_.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.f))
          break;
        state_ = 10;
      case 10:
        if (StepSeq(&prior_.prior.prior.prior, &prior_.prior.prior.f)) break;
        state_ = 11;
      case 11:
        if (StepSeq(&prior_.prior.prior, &prior_.prior.f)) break;
        state_ = 12;
      case 12:
        if (StepSeq(&prior_.prior, &prior_.f)) break;
        state_ = 13;
      case 13:
        if (StepSeq(&prior_, &f_)) break;
        state_ = 14;
      case 14:
        return f_();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12, typename F13, typename F14,
          typename F15>
class Seq<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
          F15> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using State2 = IntermediateState<State1, F3, F0, F1, F2>;
  using State3 = IntermediateState<State2, F4, F0, F1, F2, F3>;
  using State4 = IntermediateState<State3, F5, F0, F1, F2, F3, F4>;
  using State5 = IntermediateState<State4, F6, F0, F1, F2, F3, F4, F5>;
  using State6 = IntermediateState<State5, F7, F0, F1, F2, F3, F4, F5, F6>;
  using State7 = IntermediateState<State6, F8, F0, F1, F2, F3, F4, F5, F6, F7>;
  using State8 =
      IntermediateState<State7, F9, F0, F1, F2, F3, F4, F5, F6, F7, F8>;
  using State9 =
      IntermediateState<State8, F10, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9>;
  using State10 = IntermediateState<State9, F11, F0, F1, F2, F3, F4, F5, F6, F7,
                                    F8, F9, F10>;
  using State11 = IntermediateState<State10, F12, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11>;
  using State12 = IntermediateState<State11, F13, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12>;
  using State13 = IntermediateState<State12, F14, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13>;
  using State14 = IntermediateState<State13, F15, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14>;
  using FLast = typename State14::Next::Promise;
  union {
    [[no_unique_address]] State14 prior_;
    [[no_unique_address]] FLast f_;
  };

 public:
  Seq(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
      F10 f10, F11 f11, F12 f12, F13 f13, F14 f14, F15 f15)
      : prior_(std::move(f0), std::move(f1), std::move(f2), std::move(f3),
               std::move(f4), std::move(f5), std::move(f6), std::move(f7),
               std::move(f8), std::move(f9), std::move(f10), std::move(f11),
               std::move(f12), std::move(f13), std::move(f14), std::move(f15)) {
  }
  Seq& operator=(const Seq&) = delete;
  Seq(const Seq& other) {
    assert(other.state_ == 0);
    new (&prior_) State14(other.prior_);
  }
  Seq(Seq&& other) {
    assert(other.state_ == 0);
    new (&prior_) State14(std::move(other.prior_));
  }
  ~Seq() {
    switch (state_) {
      case 0:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.f);
        goto fin0;
      case 1:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.f);
        goto fin1;
      case 2:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.f);
        goto fin2;
      case 3:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.f);
        goto fin3;
      case 4:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.f);
        goto fin4;
      case 5:
        Destruct(
            &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin5;
      case 6:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin6;
      case 7:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin7;
      case 8:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.f);
        goto fin8;
      case 9:
        Destruct(&prior_.prior.prior.prior.prior.prior.f);
        goto fin9;
      case 10:
        Destruct(&prior_.prior.prior.prior.prior.f);
        goto fin10;
      case 11:
        Destruct(&prior_.prior.prior.prior.f);
        goto fin11;
      case 12:
        Destruct(&prior_.prior.prior.f);
        goto fin12;
      case 13:
        Destruct(&prior_.prior.f);
        goto fin13;
      case 14:
        Destruct(&prior_.f);
        goto fin14;
      case 15:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.next);
  fin1:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.next);
  fin2:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.next);
  fin3:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.next);
  fin4:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .next);
  fin5:
    Destruct(
        &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin6:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin7:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.next);
  fin8:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.next);
  fin9:
    Destruct(&prior_.prior.prior.prior.prior.prior.next);
  fin10:
    Destruct(&prior_.prior.prior.prior.prior.next);
  fin11:
    Destruct(&prior_.prior.prior.prior.next);
  fin12:
    Destruct(&prior_.prior.prior.next);
  fin13:
    Destruct(&prior_.prior.next);
  fin14:
    Destruct(&prior_.next);
  }
  decltype(std::declval<typename State14::Next::Promise>()()) operator()() {
    switch (state_) {
      case 0:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.f))
          break;
        state_ = 1;
      case 1:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.f))
          break;
        state_ = 2;
      case 2:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.f))
          break;
        state_ = 3;
      case 3:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.f))
          break;
        state_ = 4;
      case 4:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.f))
          break;
        state_ = 5;
      case 5:
        if (StepSeq(
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior,
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 6;
      case 6:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 7;
      case 7:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 8;
      case 8:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.f))
          break;
        state_ = 9;
      case 9:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.f))
          break;
        state_ = 10;
      case 10:
        if (StepSeq(&prior_.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.f))
          break;
        state_ = 11;
      case 11:
        if (StepSeq(&prior_.prior.prior.prior, &prior_.prior.prior.f)) break;
        state_ = 12;
      case 12:
        if (StepSeq(&prior_.prior.prior, &prior_.prior.f)) break;
        state_ = 13;
      case 13:
        if (StepSeq(&prior_.prior, &prior_.f)) break;
        state_ = 14;
      case 14:
        if (StepSeq(&prior_, &f_)) break;
        state_ = 15;
      case 15:
        return f_();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12, typename F13, typename F14,
          typename F15, typename F16>
class Seq<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
          F16> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using State2 = IntermediateState<State1, F3, F0, F1, F2>;
  using State3 = IntermediateState<State2, F4, F0, F1, F2, F3>;
  using State4 = IntermediateState<State3, F5, F0, F1, F2, F3, F4>;
  using State5 = IntermediateState<State4, F6, F0, F1, F2, F3, F4, F5>;
  using State6 = IntermediateState<State5, F7, F0, F1, F2, F3, F4, F5, F6>;
  using State7 = IntermediateState<State6, F8, F0, F1, F2, F3, F4, F5, F6, F7>;
  using State8 =
      IntermediateState<State7, F9, F0, F1, F2, F3, F4, F5, F6, F7, F8>;
  using State9 =
      IntermediateState<State8, F10, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9>;
  using State10 = IntermediateState<State9, F11, F0, F1, F2, F3, F4, F5, F6, F7,
                                    F8, F9, F10>;
  using State11 = IntermediateState<State10, F12, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11>;
  using State12 = IntermediateState<State11, F13, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12>;
  using State13 = IntermediateState<State12, F14, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13>;
  using State14 = IntermediateState<State13, F15, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14>;
  using State15 = IntermediateState<State14, F16, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15>;
  using FLast = typename State15::Next::Promise;
  union {
    [[no_unique_address]] State15 prior_;
    [[no_unique_address]] FLast f_;
  };

 public:
  Seq(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
      F10 f10, F11 f11, F12 f12, F13 f13, F14 f14, F15 f15, F16 f16)
      : prior_(std::move(f0), std::move(f1), std::move(f2), std::move(f3),
               std::move(f4), std::move(f5), std::move(f6), std::move(f7),
               std::move(f8), std::move(f9), std::move(f10), std::move(f11),
               std::move(f12), std::move(f13), std::move(f14), std::move(f15),
               std::move(f16)) {}
  Seq& operator=(const Seq&) = delete;
  Seq(const Seq& other) {
    assert(other.state_ == 0);
    new (&prior_) State15(other.prior_);
  }
  Seq(Seq&& other) {
    assert(other.state_ == 0);
    new (&prior_) State15(std::move(other.prior_));
  }
  ~Seq() {
    switch (state_) {
      case 0:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.f);
        goto fin0;
      case 1:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.f);
        goto fin1;
      case 2:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.f);
        goto fin2;
      case 3:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.f);
        goto fin3;
      case 4:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.f);
        goto fin4;
      case 5:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.f);
        goto fin5;
      case 6:
        Destruct(
            &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin6;
      case 7:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin7;
      case 8:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin8;
      case 9:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.f);
        goto fin9;
      case 10:
        Destruct(&prior_.prior.prior.prior.prior.prior.f);
        goto fin10;
      case 11:
        Destruct(&prior_.prior.prior.prior.prior.f);
        goto fin11;
      case 12:
        Destruct(&prior_.prior.prior.prior.f);
        goto fin12;
      case 13:
        Destruct(&prior_.prior.prior.f);
        goto fin13;
      case 14:
        Destruct(&prior_.prior.f);
        goto fin14;
      case 15:
        Destruct(&prior_.f);
        goto fin15;
      case 16:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.next);
  fin1:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.next);
  fin2:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.next);
  fin3:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.next);
  fin4:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.next);
  fin5:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .next);
  fin6:
    Destruct(
        &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin7:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin8:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.next);
  fin9:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.next);
  fin10:
    Destruct(&prior_.prior.prior.prior.prior.prior.next);
  fin11:
    Destruct(&prior_.prior.prior.prior.prior.next);
  fin12:
    Destruct(&prior_.prior.prior.prior.next);
  fin13:
    Destruct(&prior_.prior.prior.next);
  fin14:
    Destruct(&prior_.prior.next);
  fin15:
    Destruct(&prior_.next);
  }
  decltype(std::declval<typename State15::Next::Promise>()()) operator()() {
    switch (state_) {
      case 0:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 1;
      case 1:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.f))
          break;
        state_ = 2;
      case 2:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.f))
          break;
        state_ = 3;
      case 3:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.f))
          break;
        state_ = 4;
      case 4:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.f))
          break;
        state_ = 5;
      case 5:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.f))
          break;
        state_ = 6;
      case 6:
        if (StepSeq(
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior,
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 7;
      case 7:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 8;
      case 8:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 9;
      case 9:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.f))
          break;
        state_ = 10;
      case 10:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.f))
          break;
        state_ = 11;
      case 11:
        if (StepSeq(&prior_.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.f))
          break;
        state_ = 12;
      case 12:
        if (StepSeq(&prior_.prior.prior.prior, &prior_.prior.prior.f)) break;
        state_ = 13;
      case 13:
        if (StepSeq(&prior_.prior.prior, &prior_.prior.f)) break;
        state_ = 14;
      case 14:
        if (StepSeq(&prior_.prior, &prior_.f)) break;
        state_ = 15;
      case 15:
        if (StepSeq(&prior_, &f_)) break;
        state_ = 16;
      case 16:
        return f_();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12, typename F13, typename F14,
          typename F15, typename F16, typename F17>
class Seq<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
          F16, F17> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using State2 = IntermediateState<State1, F3, F0, F1, F2>;
  using State3 = IntermediateState<State2, F4, F0, F1, F2, F3>;
  using State4 = IntermediateState<State3, F5, F0, F1, F2, F3, F4>;
  using State5 = IntermediateState<State4, F6, F0, F1, F2, F3, F4, F5>;
  using State6 = IntermediateState<State5, F7, F0, F1, F2, F3, F4, F5, F6>;
  using State7 = IntermediateState<State6, F8, F0, F1, F2, F3, F4, F5, F6, F7>;
  using State8 =
      IntermediateState<State7, F9, F0, F1, F2, F3, F4, F5, F6, F7, F8>;
  using State9 =
      IntermediateState<State8, F10, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9>;
  using State10 = IntermediateState<State9, F11, F0, F1, F2, F3, F4, F5, F6, F7,
                                    F8, F9, F10>;
  using State11 = IntermediateState<State10, F12, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11>;
  using State12 = IntermediateState<State11, F13, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12>;
  using State13 = IntermediateState<State12, F14, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13>;
  using State14 = IntermediateState<State13, F15, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14>;
  using State15 = IntermediateState<State14, F16, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15>;
  using State16 =
      IntermediateState<State15, F17, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16>;
  using FLast = typename State16::Next::Promise;
  union {
    [[no_unique_address]] State16 prior_;
    [[no_unique_address]] FLast f_;
  };

 public:
  Seq(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
      F10 f10, F11 f11, F12 f12, F13 f13, F14 f14, F15 f15, F16 f16, F17 f17)
      : prior_(std::move(f0), std::move(f1), std::move(f2), std::move(f3),
               std::move(f4), std::move(f5), std::move(f6), std::move(f7),
               std::move(f8), std::move(f9), std::move(f10), std::move(f11),
               std::move(f12), std::move(f13), std::move(f14), std::move(f15),
               std::move(f16), std::move(f17)) {}
  Seq& operator=(const Seq&) = delete;
  Seq(const Seq& other) {
    assert(other.state_ == 0);
    new (&prior_) State16(other.prior_);
  }
  Seq(Seq&& other) {
    assert(other.state_ == 0);
    new (&prior_) State16(std::move(other.prior_));
  }
  ~Seq() {
    switch (state_) {
      case 0:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.f);
        goto fin0;
      case 1:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.f);
        goto fin1;
      case 2:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.f);
        goto fin2;
      case 3:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.f);
        goto fin3;
      case 4:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.f);
        goto fin4;
      case 5:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.f);
        goto fin5;
      case 6:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.f);
        goto fin6;
      case 7:
        Destruct(
            &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin7;
      case 8:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin8;
      case 9:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin9;
      case 10:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.f);
        goto fin10;
      case 11:
        Destruct(&prior_.prior.prior.prior.prior.prior.f);
        goto fin11;
      case 12:
        Destruct(&prior_.prior.prior.prior.prior.f);
        goto fin12;
      case 13:
        Destruct(&prior_.prior.prior.prior.f);
        goto fin13;
      case 14:
        Destruct(&prior_.prior.prior.f);
        goto fin14;
      case 15:
        Destruct(&prior_.prior.f);
        goto fin15;
      case 16:
        Destruct(&prior_.f);
        goto fin16;
      case 17:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.next);
  fin1:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.next);
  fin2:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.next);
  fin3:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.next);
  fin4:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.next);
  fin5:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.next);
  fin6:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .next);
  fin7:
    Destruct(
        &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin8:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin9:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.next);
  fin10:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.next);
  fin11:
    Destruct(&prior_.prior.prior.prior.prior.prior.next);
  fin12:
    Destruct(&prior_.prior.prior.prior.prior.next);
  fin13:
    Destruct(&prior_.prior.prior.prior.next);
  fin14:
    Destruct(&prior_.prior.prior.next);
  fin15:
    Destruct(&prior_.prior.next);
  fin16:
    Destruct(&prior_.next);
  }
  decltype(std::declval<typename State16::Next::Promise>()()) operator()() {
    switch (state_) {
      case 0:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 1;
      case 1:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 2;
      case 2:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.f))
          break;
        state_ = 3;
      case 3:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.f))
          break;
        state_ = 4;
      case 4:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.f))
          break;
        state_ = 5;
      case 5:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.f))
          break;
        state_ = 6;
      case 6:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.f))
          break;
        state_ = 7;
      case 7:
        if (StepSeq(
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior,
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 8;
      case 8:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 9;
      case 9:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 10;
      case 10:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.f))
          break;
        state_ = 11;
      case 11:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.f))
          break;
        state_ = 12;
      case 12:
        if (StepSeq(&prior_.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.f))
          break;
        state_ = 13;
      case 13:
        if (StepSeq(&prior_.prior.prior.prior, &prior_.prior.prior.f)) break;
        state_ = 14;
      case 14:
        if (StepSeq(&prior_.prior.prior, &prior_.prior.f)) break;
        state_ = 15;
      case 15:
        if (StepSeq(&prior_.prior, &prior_.f)) break;
        state_ = 16;
      case 16:
        if (StepSeq(&prior_, &f_)) break;
        state_ = 17;
      case 17:
        return f_();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12, typename F13, typename F14,
          typename F15, typename F16, typename F17, typename F18>
class Seq<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
          F16, F17, F18> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using State2 = IntermediateState<State1, F3, F0, F1, F2>;
  using State3 = IntermediateState<State2, F4, F0, F1, F2, F3>;
  using State4 = IntermediateState<State3, F5, F0, F1, F2, F3, F4>;
  using State5 = IntermediateState<State4, F6, F0, F1, F2, F3, F4, F5>;
  using State6 = IntermediateState<State5, F7, F0, F1, F2, F3, F4, F5, F6>;
  using State7 = IntermediateState<State6, F8, F0, F1, F2, F3, F4, F5, F6, F7>;
  using State8 =
      IntermediateState<State7, F9, F0, F1, F2, F3, F4, F5, F6, F7, F8>;
  using State9 =
      IntermediateState<State8, F10, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9>;
  using State10 = IntermediateState<State9, F11, F0, F1, F2, F3, F4, F5, F6, F7,
                                    F8, F9, F10>;
  using State11 = IntermediateState<State10, F12, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11>;
  using State12 = IntermediateState<State11, F13, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12>;
  using State13 = IntermediateState<State12, F14, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13>;
  using State14 = IntermediateState<State13, F15, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14>;
  using State15 = IntermediateState<State14, F16, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15>;
  using State16 =
      IntermediateState<State15, F17, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16>;
  using State17 =
      IntermediateState<State16, F18, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17>;
  using FLast = typename State17::Next::Promise;
  union {
    [[no_unique_address]] State17 prior_;
    [[no_unique_address]] FLast f_;
  };

 public:
  Seq(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
      F10 f10, F11 f11, F12 f12, F13 f13, F14 f14, F15 f15, F16 f16, F17 f17,
      F18 f18)
      : prior_(std::move(f0), std::move(f1), std::move(f2), std::move(f3),
               std::move(f4), std::move(f5), std::move(f6), std::move(f7),
               std::move(f8), std::move(f9), std::move(f10), std::move(f11),
               std::move(f12), std::move(f13), std::move(f14), std::move(f15),
               std::move(f16), std::move(f17), std::move(f18)) {}
  Seq& operator=(const Seq&) = delete;
  Seq(const Seq& other) {
    assert(other.state_ == 0);
    new (&prior_) State17(other.prior_);
  }
  Seq(Seq&& other) {
    assert(other.state_ == 0);
    new (&prior_) State17(std::move(other.prior_));
  }
  ~Seq() {
    switch (state_) {
      case 0:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin0;
      case 1:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.f);
        goto fin1;
      case 2:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.f);
        goto fin2;
      case 3:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.f);
        goto fin3;
      case 4:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.f);
        goto fin4;
      case 5:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.f);
        goto fin5;
      case 6:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.f);
        goto fin6;
      case 7:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.f);
        goto fin7;
      case 8:
        Destruct(
            &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin8;
      case 9:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin9;
      case 10:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin10;
      case 11:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.f);
        goto fin11;
      case 12:
        Destruct(&prior_.prior.prior.prior.prior.prior.f);
        goto fin12;
      case 13:
        Destruct(&prior_.prior.prior.prior.prior.f);
        goto fin13;
      case 14:
        Destruct(&prior_.prior.prior.prior.f);
        goto fin14;
      case 15:
        Destruct(&prior_.prior.prior.f);
        goto fin15;
      case 16:
        Destruct(&prior_.prior.f);
        goto fin16;
      case 17:
        Destruct(&prior_.f);
        goto fin17;
      case 18:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.next);
  fin1:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.next);
  fin2:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.next);
  fin3:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.next);
  fin4:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.next);
  fin5:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.next);
  fin6:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.next);
  fin7:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .next);
  fin8:
    Destruct(
        &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin9:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin10:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.next);
  fin11:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.next);
  fin12:
    Destruct(&prior_.prior.prior.prior.prior.prior.next);
  fin13:
    Destruct(&prior_.prior.prior.prior.prior.next);
  fin14:
    Destruct(&prior_.prior.prior.prior.next);
  fin15:
    Destruct(&prior_.prior.prior.next);
  fin16:
    Destruct(&prior_.prior.next);
  fin17:
    Destruct(&prior_.next);
  }
  decltype(std::declval<typename State17::Next::Promise>()()) operator()() {
    switch (state_) {
      case 0:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 1;
      case 1:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 2;
      case 2:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 3;
      case 3:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.f))
          break;
        state_ = 4;
      case 4:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.f))
          break;
        state_ = 5;
      case 5:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.f))
          break;
        state_ = 6;
      case 6:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.f))
          break;
        state_ = 7;
      case 7:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.f))
          break;
        state_ = 8;
      case 8:
        if (StepSeq(
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior,
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 9;
      case 9:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 10;
      case 10:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 11;
      case 11:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.f))
          break;
        state_ = 12;
      case 12:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.f))
          break;
        state_ = 13;
      case 13:
        if (StepSeq(&prior_.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.f))
          break;
        state_ = 14;
      case 14:
        if (StepSeq(&prior_.prior.prior.prior, &prior_.prior.prior.f)) break;
        state_ = 15;
      case 15:
        if (StepSeq(&prior_.prior.prior, &prior_.prior.f)) break;
        state_ = 16;
      case 16:
        if (StepSeq(&prior_.prior, &prior_.f)) break;
        state_ = 17;
      case 17:
        if (StepSeq(&prior_, &f_)) break;
        state_ = 18;
      case 18:
        return f_();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12, typename F13, typename F14,
          typename F15, typename F16, typename F17, typename F18, typename F19>
class Seq<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
          F16, F17, F18, F19> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using State2 = IntermediateState<State1, F3, F0, F1, F2>;
  using State3 = IntermediateState<State2, F4, F0, F1, F2, F3>;
  using State4 = IntermediateState<State3, F5, F0, F1, F2, F3, F4>;
  using State5 = IntermediateState<State4, F6, F0, F1, F2, F3, F4, F5>;
  using State6 = IntermediateState<State5, F7, F0, F1, F2, F3, F4, F5, F6>;
  using State7 = IntermediateState<State6, F8, F0, F1, F2, F3, F4, F5, F6, F7>;
  using State8 =
      IntermediateState<State7, F9, F0, F1, F2, F3, F4, F5, F6, F7, F8>;
  using State9 =
      IntermediateState<State8, F10, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9>;
  using State10 = IntermediateState<State9, F11, F0, F1, F2, F3, F4, F5, F6, F7,
                                    F8, F9, F10>;
  using State11 = IntermediateState<State10, F12, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11>;
  using State12 = IntermediateState<State11, F13, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12>;
  using State13 = IntermediateState<State12, F14, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13>;
  using State14 = IntermediateState<State13, F15, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14>;
  using State15 = IntermediateState<State14, F16, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15>;
  using State16 =
      IntermediateState<State15, F17, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16>;
  using State17 =
      IntermediateState<State16, F18, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17>;
  using State18 =
      IntermediateState<State17, F19, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18>;
  using FLast = typename State18::Next::Promise;
  union {
    [[no_unique_address]] State18 prior_;
    [[no_unique_address]] FLast f_;
  };

 public:
  Seq(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
      F10 f10, F11 f11, F12 f12, F13 f13, F14 f14, F15 f15, F16 f16, F17 f17,
      F18 f18, F19 f19)
      : prior_(std::move(f0), std::move(f1), std::move(f2), std::move(f3),
               std::move(f4), std::move(f5), std::move(f6), std::move(f7),
               std::move(f8), std::move(f9), std::move(f10), std::move(f11),
               std::move(f12), std::move(f13), std::move(f14), std::move(f15),
               std::move(f16), std::move(f17), std::move(f18), std::move(f19)) {
  }
  Seq& operator=(const Seq&) = delete;
  Seq(const Seq& other) {
    assert(other.state_ == 0);
    new (&prior_) State18(other.prior_);
  }
  Seq(Seq&& other) {
    assert(other.state_ == 0);
    new (&prior_) State18(std::move(other.prior_));
  }
  ~Seq() {
    switch (state_) {
      case 0:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin0;
      case 1:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin1;
      case 2:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.f);
        goto fin2;
      case 3:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.f);
        goto fin3;
      case 4:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.f);
        goto fin4;
      case 5:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.f);
        goto fin5;
      case 6:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.f);
        goto fin6;
      case 7:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.f);
        goto fin7;
      case 8:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.f);
        goto fin8;
      case 9:
        Destruct(
            &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin9;
      case 10:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin10;
      case 11:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin11;
      case 12:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.f);
        goto fin12;
      case 13:
        Destruct(&prior_.prior.prior.prior.prior.prior.f);
        goto fin13;
      case 14:
        Destruct(&prior_.prior.prior.prior.prior.f);
        goto fin14;
      case 15:
        Destruct(&prior_.prior.prior.prior.f);
        goto fin15;
      case 16:
        Destruct(&prior_.prior.prior.f);
        goto fin16;
      case 17:
        Destruct(&prior_.prior.f);
        goto fin17;
      case 18:
        Destruct(&prior_.f);
        goto fin18;
      case 19:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin1:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.next);
  fin2:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.next);
  fin3:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.next);
  fin4:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.next);
  fin5:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.next);
  fin6:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.next);
  fin7:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.next);
  fin8:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .next);
  fin9:
    Destruct(
        &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin10:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin11:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.next);
  fin12:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.next);
  fin13:
    Destruct(&prior_.prior.prior.prior.prior.prior.next);
  fin14:
    Destruct(&prior_.prior.prior.prior.prior.next);
  fin15:
    Destruct(&prior_.prior.prior.prior.next);
  fin16:
    Destruct(&prior_.prior.prior.next);
  fin17:
    Destruct(&prior_.prior.next);
  fin18:
    Destruct(&prior_.next);
  }
  decltype(std::declval<typename State18::Next::Promise>()()) operator()() {
    switch (state_) {
      case 0:
        if (StepSeq(
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior,
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 1;
      case 1:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 2;
      case 2:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 3;
      case 3:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 4;
      case 4:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.f))
          break;
        state_ = 5;
      case 5:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.f))
          break;
        state_ = 6;
      case 6:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.f))
          break;
        state_ = 7;
      case 7:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.f))
          break;
        state_ = 8;
      case 8:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.f))
          break;
        state_ = 9;
      case 9:
        if (StepSeq(
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior,
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 10;
      case 10:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 11;
      case 11:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 12;
      case 12:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.f))
          break;
        state_ = 13;
      case 13:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.f))
          break;
        state_ = 14;
      case 14:
        if (StepSeq(&prior_.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.f))
          break;
        state_ = 15;
      case 15:
        if (StepSeq(&prior_.prior.prior.prior, &prior_.prior.prior.f)) break;
        state_ = 16;
      case 16:
        if (StepSeq(&prior_.prior.prior, &prior_.prior.f)) break;
        state_ = 17;
      case 17:
        if (StepSeq(&prior_.prior, &prior_.f)) break;
        state_ = 18;
      case 18:
        if (StepSeq(&prior_, &f_)) break;
        state_ = 19;
      case 19:
        return f_();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12, typename F13, typename F14,
          typename F15, typename F16, typename F17, typename F18, typename F19,
          typename F20>
class Seq<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
          F16, F17, F18, F19, F20> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using State2 = IntermediateState<State1, F3, F0, F1, F2>;
  using State3 = IntermediateState<State2, F4, F0, F1, F2, F3>;
  using State4 = IntermediateState<State3, F5, F0, F1, F2, F3, F4>;
  using State5 = IntermediateState<State4, F6, F0, F1, F2, F3, F4, F5>;
  using State6 = IntermediateState<State5, F7, F0, F1, F2, F3, F4, F5, F6>;
  using State7 = IntermediateState<State6, F8, F0, F1, F2, F3, F4, F5, F6, F7>;
  using State8 =
      IntermediateState<State7, F9, F0, F1, F2, F3, F4, F5, F6, F7, F8>;
  using State9 =
      IntermediateState<State8, F10, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9>;
  using State10 = IntermediateState<State9, F11, F0, F1, F2, F3, F4, F5, F6, F7,
                                    F8, F9, F10>;
  using State11 = IntermediateState<State10, F12, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11>;
  using State12 = IntermediateState<State11, F13, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12>;
  using State13 = IntermediateState<State12, F14, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13>;
  using State14 = IntermediateState<State13, F15, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14>;
  using State15 = IntermediateState<State14, F16, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15>;
  using State16 =
      IntermediateState<State15, F17, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16>;
  using State17 =
      IntermediateState<State16, F18, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17>;
  using State18 =
      IntermediateState<State17, F19, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18>;
  using State19 =
      IntermediateState<State18, F20, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19>;
  using FLast = typename State19::Next::Promise;
  union {
    [[no_unique_address]] State19 prior_;
    [[no_unique_address]] FLast f_;
  };

 public:
  Seq(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
      F10 f10, F11 f11, F12 f12, F13 f13, F14 f14, F15 f15, F16 f16, F17 f17,
      F18 f18, F19 f19, F20 f20)
      : prior_(std::move(f0), std::move(f1), std::move(f2), std::move(f3),
               std::move(f4), std::move(f5), std::move(f6), std::move(f7),
               std::move(f8), std::move(f9), std::move(f10), std::move(f11),
               std::move(f12), std::move(f13), std::move(f14), std::move(f15),
               std::move(f16), std::move(f17), std::move(f18), std::move(f19),
               std::move(f20)) {}
  Seq& operator=(const Seq&) = delete;
  Seq(const Seq& other) {
    assert(other.state_ == 0);
    new (&prior_) State19(other.prior_);
  }
  Seq(Seq&& other) {
    assert(other.state_ == 0);
    new (&prior_) State19(std::move(other.prior_));
  }
  ~Seq() {
    switch (state_) {
      case 0:
        Destruct(
            &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                 .prior.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin0;
      case 1:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin1;
      case 2:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin2;
      case 3:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.f);
        goto fin3;
      case 4:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.f);
        goto fin4;
      case 5:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.f);
        goto fin5;
      case 6:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.f);
        goto fin6;
      case 7:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.f);
        goto fin7;
      case 8:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.f);
        goto fin8;
      case 9:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.f);
        goto fin9;
      case 10:
        Destruct(
            &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin10;
      case 11:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin11;
      case 12:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin12;
      case 13:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.f);
        goto fin13;
      case 14:
        Destruct(&prior_.prior.prior.prior.prior.prior.f);
        goto fin14;
      case 15:
        Destruct(&prior_.prior.prior.prior.prior.f);
        goto fin15;
      case 16:
        Destruct(&prior_.prior.prior.prior.f);
        goto fin16;
      case 17:
        Destruct(&prior_.prior.prior.f);
        goto fin17;
      case 18:
        Destruct(&prior_.prior.f);
        goto fin18;
      case 19:
        Destruct(&prior_.f);
        goto fin19;
      case 20:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin1:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin2:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.next);
  fin3:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.next);
  fin4:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.next);
  fin5:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.next);
  fin6:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.next);
  fin7:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.next);
  fin8:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.next);
  fin9:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .next);
  fin10:
    Destruct(
        &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin11:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin12:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.next);
  fin13:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.next);
  fin14:
    Destruct(&prior_.prior.prior.prior.prior.prior.next);
  fin15:
    Destruct(&prior_.prior.prior.prior.prior.next);
  fin16:
    Destruct(&prior_.prior.prior.prior.next);
  fin17:
    Destruct(&prior_.prior.prior.next);
  fin18:
    Destruct(&prior_.prior.next);
  fin19:
    Destruct(&prior_.next);
  }
  decltype(std::declval<typename State19::Next::Promise>()()) operator()() {
    switch (state_) {
      case 0:
        if (StepSeq(
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior,
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 1;
      case 1:
        if (StepSeq(
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior,
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 2;
      case 2:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 3;
      case 3:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 4;
      case 4:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 5;
      case 5:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.f))
          break;
        state_ = 6;
      case 6:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.f))
          break;
        state_ = 7;
      case 7:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.f))
          break;
        state_ = 8;
      case 8:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.f))
          break;
        state_ = 9;
      case 9:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.f))
          break;
        state_ = 10;
      case 10:
        if (StepSeq(
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior,
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 11;
      case 11:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 12;
      case 12:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 13;
      case 13:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.f))
          break;
        state_ = 14;
      case 14:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.f))
          break;
        state_ = 15;
      case 15:
        if (StepSeq(&prior_.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.f))
          break;
        state_ = 16;
      case 16:
        if (StepSeq(&prior_.prior.prior.prior, &prior_.prior.prior.f)) break;
        state_ = 17;
      case 17:
        if (StepSeq(&prior_.prior.prior, &prior_.prior.f)) break;
        state_ = 18;
      case 18:
        if (StepSeq(&prior_.prior, &prior_.f)) break;
        state_ = 19;
      case 19:
        if (StepSeq(&prior_, &f_)) break;
        state_ = 20;
      case 20:
        return f_();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12, typename F13, typename F14,
          typename F15, typename F16, typename F17, typename F18, typename F19,
          typename F20, typename F21>
class Seq<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
          F16, F17, F18, F19, F20, F21> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using State2 = IntermediateState<State1, F3, F0, F1, F2>;
  using State3 = IntermediateState<State2, F4, F0, F1, F2, F3>;
  using State4 = IntermediateState<State3, F5, F0, F1, F2, F3, F4>;
  using State5 = IntermediateState<State4, F6, F0, F1, F2, F3, F4, F5>;
  using State6 = IntermediateState<State5, F7, F0, F1, F2, F3, F4, F5, F6>;
  using State7 = IntermediateState<State6, F8, F0, F1, F2, F3, F4, F5, F6, F7>;
  using State8 =
      IntermediateState<State7, F9, F0, F1, F2, F3, F4, F5, F6, F7, F8>;
  using State9 =
      IntermediateState<State8, F10, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9>;
  using State10 = IntermediateState<State9, F11, F0, F1, F2, F3, F4, F5, F6, F7,
                                    F8, F9, F10>;
  using State11 = IntermediateState<State10, F12, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11>;
  using State12 = IntermediateState<State11, F13, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12>;
  using State13 = IntermediateState<State12, F14, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13>;
  using State14 = IntermediateState<State13, F15, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14>;
  using State15 = IntermediateState<State14, F16, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15>;
  using State16 =
      IntermediateState<State15, F17, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16>;
  using State17 =
      IntermediateState<State16, F18, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17>;
  using State18 =
      IntermediateState<State17, F19, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18>;
  using State19 =
      IntermediateState<State18, F20, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19>;
  using State20 =
      IntermediateState<State19, F21, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20>;
  using FLast = typename State20::Next::Promise;
  union {
    [[no_unique_address]] State20 prior_;
    [[no_unique_address]] FLast f_;
  };

 public:
  Seq(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
      F10 f10, F11 f11, F12 f12, F13 f13, F14 f14, F15 f15, F16 f16, F17 f17,
      F18 f18, F19 f19, F20 f20, F21 f21)
      : prior_(std::move(f0), std::move(f1), std::move(f2), std::move(f3),
               std::move(f4), std::move(f5), std::move(f6), std::move(f7),
               std::move(f8), std::move(f9), std::move(f10), std::move(f11),
               std::move(f12), std::move(f13), std::move(f14), std::move(f15),
               std::move(f16), std::move(f17), std::move(f18), std::move(f19),
               std::move(f20), std::move(f21)) {}
  Seq& operator=(const Seq&) = delete;
  Seq(const Seq& other) {
    assert(other.state_ == 0);
    new (&prior_) State20(other.prior_);
  }
  Seq(Seq&& other) {
    assert(other.state_ == 0);
    new (&prior_) State20(std::move(other.prior_));
  }
  ~Seq() {
    switch (state_) {
      case 0:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.f);
        goto fin0;
      case 1:
        Destruct(
            &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                 .prior.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin1;
      case 2:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin2;
      case 3:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin3;
      case 4:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.f);
        goto fin4;
      case 5:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.f);
        goto fin5;
      case 6:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.f);
        goto fin6;
      case 7:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.f);
        goto fin7;
      case 8:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.f);
        goto fin8;
      case 9:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.f);
        goto fin9;
      case 10:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.f);
        goto fin10;
      case 11:
        Destruct(
            &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin11;
      case 12:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin12;
      case 13:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin13;
      case 14:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.f);
        goto fin14;
      case 15:
        Destruct(&prior_.prior.prior.prior.prior.prior.f);
        goto fin15;
      case 16:
        Destruct(&prior_.prior.prior.prior.prior.f);
        goto fin16;
      case 17:
        Destruct(&prior_.prior.prior.prior.f);
        goto fin17;
      case 18:
        Destruct(&prior_.prior.prior.f);
        goto fin18;
      case 19:
        Destruct(&prior_.prior.f);
        goto fin19;
      case 20:
        Destruct(&prior_.f);
        goto fin20;
      case 21:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(
        &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
             .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin1:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin2:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin3:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.next);
  fin4:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.next);
  fin5:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.next);
  fin6:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.next);
  fin7:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.next);
  fin8:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.next);
  fin9:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.next);
  fin10:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .next);
  fin11:
    Destruct(
        &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin12:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin13:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.next);
  fin14:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.next);
  fin15:
    Destruct(&prior_.prior.prior.prior.prior.prior.next);
  fin16:
    Destruct(&prior_.prior.prior.prior.prior.next);
  fin17:
    Destruct(&prior_.prior.prior.prior.next);
  fin18:
    Destruct(&prior_.prior.prior.next);
  fin19:
    Destruct(&prior_.prior.next);
  fin20:
    Destruct(&prior_.next);
  }
  decltype(std::declval<typename State20::Next::Promise>()()) operator()() {
    switch (state_) {
      case 0:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.f))
          break;
        state_ = 1;
      case 1:
        if (StepSeq(
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior,
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 2;
      case 2:
        if (StepSeq(
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior,
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 3;
      case 3:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 4;
      case 4:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 5;
      case 5:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 6;
      case 6:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.f))
          break;
        state_ = 7;
      case 7:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.f))
          break;
        state_ = 8;
      case 8:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.f))
          break;
        state_ = 9;
      case 9:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.f))
          break;
        state_ = 10;
      case 10:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.f))
          break;
        state_ = 11;
      case 11:
        if (StepSeq(
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior,
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 12;
      case 12:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 13;
      case 13:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 14;
      case 14:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.f))
          break;
        state_ = 15;
      case 15:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.f))
          break;
        state_ = 16;
      case 16:
        if (StepSeq(&prior_.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.f))
          break;
        state_ = 17;
      case 17:
        if (StepSeq(&prior_.prior.prior.prior, &prior_.prior.prior.f)) break;
        state_ = 18;
      case 18:
        if (StepSeq(&prior_.prior.prior, &prior_.prior.f)) break;
        state_ = 19;
      case 19:
        if (StepSeq(&prior_.prior, &prior_.f)) break;
        state_ = 20;
      case 20:
        if (StepSeq(&prior_, &f_)) break;
        state_ = 21;
      case 21:
        return f_();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12, typename F13, typename F14,
          typename F15, typename F16, typename F17, typename F18, typename F19,
          typename F20, typename F21, typename F22>
class Seq<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
          F16, F17, F18, F19, F20, F21, F22> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using State2 = IntermediateState<State1, F3, F0, F1, F2>;
  using State3 = IntermediateState<State2, F4, F0, F1, F2, F3>;
  using State4 = IntermediateState<State3, F5, F0, F1, F2, F3, F4>;
  using State5 = IntermediateState<State4, F6, F0, F1, F2, F3, F4, F5>;
  using State6 = IntermediateState<State5, F7, F0, F1, F2, F3, F4, F5, F6>;
  using State7 = IntermediateState<State6, F8, F0, F1, F2, F3, F4, F5, F6, F7>;
  using State8 =
      IntermediateState<State7, F9, F0, F1, F2, F3, F4, F5, F6, F7, F8>;
  using State9 =
      IntermediateState<State8, F10, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9>;
  using State10 = IntermediateState<State9, F11, F0, F1, F2, F3, F4, F5, F6, F7,
                                    F8, F9, F10>;
  using State11 = IntermediateState<State10, F12, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11>;
  using State12 = IntermediateState<State11, F13, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12>;
  using State13 = IntermediateState<State12, F14, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13>;
  using State14 = IntermediateState<State13, F15, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14>;
  using State15 = IntermediateState<State14, F16, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15>;
  using State16 =
      IntermediateState<State15, F17, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16>;
  using State17 =
      IntermediateState<State16, F18, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17>;
  using State18 =
      IntermediateState<State17, F19, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18>;
  using State19 =
      IntermediateState<State18, F20, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19>;
  using State20 =
      IntermediateState<State19, F21, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20>;
  using State21 = IntermediateState<State20, F22, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15,
                                    F16, F17, F18, F19, F20, F21>;
  using FLast = typename State21::Next::Promise;
  union {
    [[no_unique_address]] State21 prior_;
    [[no_unique_address]] FLast f_;
  };

 public:
  Seq(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
      F10 f10, F11 f11, F12 f12, F13 f13, F14 f14, F15 f15, F16 f16, F17 f17,
      F18 f18, F19 f19, F20 f20, F21 f21, F22 f22)
      : prior_(std::move(f0), std::move(f1), std::move(f2), std::move(f3),
               std::move(f4), std::move(f5), std::move(f6), std::move(f7),
               std::move(f8), std::move(f9), std::move(f10), std::move(f11),
               std::move(f12), std::move(f13), std::move(f14), std::move(f15),
               std::move(f16), std::move(f17), std::move(f18), std::move(f19),
               std::move(f20), std::move(f21), std::move(f22)) {}
  Seq& operator=(const Seq&) = delete;
  Seq(const Seq& other) {
    assert(other.state_ == 0);
    new (&prior_) State21(other.prior_);
  }
  Seq(Seq&& other) {
    assert(other.state_ == 0);
    new (&prior_) State21(std::move(other.prior_));
  }
  ~Seq() {
    switch (state_) {
      case 0:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.f);
        goto fin0;
      case 1:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.f);
        goto fin1;
      case 2:
        Destruct(
            &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                 .prior.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin2;
      case 3:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin3;
      case 4:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin4;
      case 5:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.f);
        goto fin5;
      case 6:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.f);
        goto fin6;
      case 7:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.f);
        goto fin7;
      case 8:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.f);
        goto fin8;
      case 9:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.f);
        goto fin9;
      case 10:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.f);
        goto fin10;
      case 11:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.f);
        goto fin11;
      case 12:
        Destruct(
            &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin12;
      case 13:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin13;
      case 14:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin14;
      case 15:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.f);
        goto fin15;
      case 16:
        Destruct(&prior_.prior.prior.prior.prior.prior.f);
        goto fin16;
      case 17:
        Destruct(&prior_.prior.prior.prior.prior.f);
        goto fin17;
      case 18:
        Destruct(&prior_.prior.prior.prior.f);
        goto fin18;
      case 19:
        Destruct(&prior_.prior.prior.f);
        goto fin19;
      case 20:
        Destruct(&prior_.prior.f);
        goto fin20;
      case 21:
        Destruct(&prior_.f);
        goto fin21;
      case 22:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.next);
  fin1:
    Destruct(
        &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
             .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin2:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin3:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin4:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.next);
  fin5:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.next);
  fin6:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.next);
  fin7:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.next);
  fin8:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.next);
  fin9:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.next);
  fin10:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.next);
  fin11:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .next);
  fin12:
    Destruct(
        &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin13:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin14:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.next);
  fin15:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.next);
  fin16:
    Destruct(&prior_.prior.prior.prior.prior.prior.next);
  fin17:
    Destruct(&prior_.prior.prior.prior.prior.next);
  fin18:
    Destruct(&prior_.prior.prior.prior.next);
  fin19:
    Destruct(&prior_.prior.prior.next);
  fin20:
    Destruct(&prior_.prior.next);
  fin21:
    Destruct(&prior_.next);
  }
  decltype(std::declval<typename State21::Next::Promise>()()) operator()() {
    switch (state_) {
      case 0:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.f))
          break;
        state_ = 1;
      case 1:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.f))
          break;
        state_ = 2;
      case 2:
        if (StepSeq(
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior,
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 3;
      case 3:
        if (StepSeq(
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior,
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 4;
      case 4:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 5;
      case 5:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 6;
      case 6:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 7;
      case 7:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.f))
          break;
        state_ = 8;
      case 8:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.f))
          break;
        state_ = 9;
      case 9:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.f))
          break;
        state_ = 10;
      case 10:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.f))
          break;
        state_ = 11;
      case 11:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.f))
          break;
        state_ = 12;
      case 12:
        if (StepSeq(
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior,
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 13;
      case 13:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 14;
      case 14:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 15;
      case 15:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.f))
          break;
        state_ = 16;
      case 16:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.f))
          break;
        state_ = 17;
      case 17:
        if (StepSeq(&prior_.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.f))
          break;
        state_ = 18;
      case 18:
        if (StepSeq(&prior_.prior.prior.prior, &prior_.prior.prior.f)) break;
        state_ = 19;
      case 19:
        if (StepSeq(&prior_.prior.prior, &prior_.prior.f)) break;
        state_ = 20;
      case 20:
        if (StepSeq(&prior_.prior, &prior_.f)) break;
        state_ = 21;
      case 21:
        if (StepSeq(&prior_, &f_)) break;
        state_ = 22;
      case 22:
        return f_();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12, typename F13, typename F14,
          typename F15, typename F16, typename F17, typename F18, typename F19,
          typename F20, typename F21, typename F22, typename F23>
class Seq<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
          F16, F17, F18, F19, F20, F21, F22, F23> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using State2 = IntermediateState<State1, F3, F0, F1, F2>;
  using State3 = IntermediateState<State2, F4, F0, F1, F2, F3>;
  using State4 = IntermediateState<State3, F5, F0, F1, F2, F3, F4>;
  using State5 = IntermediateState<State4, F6, F0, F1, F2, F3, F4, F5>;
  using State6 = IntermediateState<State5, F7, F0, F1, F2, F3, F4, F5, F6>;
  using State7 = IntermediateState<State6, F8, F0, F1, F2, F3, F4, F5, F6, F7>;
  using State8 =
      IntermediateState<State7, F9, F0, F1, F2, F3, F4, F5, F6, F7, F8>;
  using State9 =
      IntermediateState<State8, F10, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9>;
  using State10 = IntermediateState<State9, F11, F0, F1, F2, F3, F4, F5, F6, F7,
                                    F8, F9, F10>;
  using State11 = IntermediateState<State10, F12, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11>;
  using State12 = IntermediateState<State11, F13, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12>;
  using State13 = IntermediateState<State12, F14, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13>;
  using State14 = IntermediateState<State13, F15, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14>;
  using State15 = IntermediateState<State14, F16, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15>;
  using State16 =
      IntermediateState<State15, F17, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16>;
  using State17 =
      IntermediateState<State16, F18, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17>;
  using State18 =
      IntermediateState<State17, F19, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18>;
  using State19 =
      IntermediateState<State18, F20, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19>;
  using State20 =
      IntermediateState<State19, F21, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20>;
  using State21 = IntermediateState<State20, F22, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15,
                                    F16, F17, F18, F19, F20, F21>;
  using State22 = IntermediateState<State21, F23, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15,
                                    F16, F17, F18, F19, F20, F21, F22>;
  using FLast = typename State22::Next::Promise;
  union {
    [[no_unique_address]] State22 prior_;
    [[no_unique_address]] FLast f_;
  };

 public:
  Seq(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
      F10 f10, F11 f11, F12 f12, F13 f13, F14 f14, F15 f15, F16 f16, F17 f17,
      F18 f18, F19 f19, F20 f20, F21 f21, F22 f22, F23 f23)
      : prior_(std::move(f0), std::move(f1), std::move(f2), std::move(f3),
               std::move(f4), std::move(f5), std::move(f6), std::move(f7),
               std::move(f8), std::move(f9), std::move(f10), std::move(f11),
               std::move(f12), std::move(f13), std::move(f14), std::move(f15),
               std::move(f16), std::move(f17), std::move(f18), std::move(f19),
               std::move(f20), std::move(f21), std::move(f22), std::move(f23)) {
  }
  Seq& operator=(const Seq&) = delete;
  Seq(const Seq& other) {
    assert(other.state_ == 0);
    new (&prior_) State22(other.prior_);
  }
  Seq(Seq&& other) {
    assert(other.state_ == 0);
    new (&prior_) State22(std::move(other.prior_));
  }
  ~Seq() {
    switch (state_) {
      case 0:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.f);
        goto fin0;
      case 1:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.f);
        goto fin1;
      case 2:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.f);
        goto fin2;
      case 3:
        Destruct(
            &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                 .prior.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin3;
      case 4:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin4;
      case 5:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin5;
      case 6:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.f);
        goto fin6;
      case 7:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.f);
        goto fin7;
      case 8:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.f);
        goto fin8;
      case 9:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.f);
        goto fin9;
      case 10:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.f);
        goto fin10;
      case 11:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.f);
        goto fin11;
      case 12:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.f);
        goto fin12;
      case 13:
        Destruct(
            &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin13;
      case 14:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin14;
      case 15:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin15;
      case 16:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.f);
        goto fin16;
      case 17:
        Destruct(&prior_.prior.prior.prior.prior.prior.f);
        goto fin17;
      case 18:
        Destruct(&prior_.prior.prior.prior.prior.f);
        goto fin18;
      case 19:
        Destruct(&prior_.prior.prior.prior.f);
        goto fin19;
      case 20:
        Destruct(&prior_.prior.prior.f);
        goto fin20;
      case 21:
        Destruct(&prior_.prior.f);
        goto fin21;
      case 22:
        Destruct(&prior_.f);
        goto fin22;
      case 23:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.next);
  fin1:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.next);
  fin2:
    Destruct(
        &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
             .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin3:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin4:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin5:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.next);
  fin6:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.next);
  fin7:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.next);
  fin8:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.next);
  fin9:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.next);
  fin10:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.next);
  fin11:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.next);
  fin12:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .next);
  fin13:
    Destruct(
        &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin14:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin15:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.next);
  fin16:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.next);
  fin17:
    Destruct(&prior_.prior.prior.prior.prior.prior.next);
  fin18:
    Destruct(&prior_.prior.prior.prior.prior.next);
  fin19:
    Destruct(&prior_.prior.prior.prior.next);
  fin20:
    Destruct(&prior_.prior.prior.next);
  fin21:
    Destruct(&prior_.prior.next);
  fin22:
    Destruct(&prior_.next);
  }
  decltype(std::declval<typename State22::Next::Promise>()()) operator()() {
    switch (state_) {
      case 0:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.f))
          break;
        state_ = 1;
      case 1:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.f))
          break;
        state_ = 2;
      case 2:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.f))
          break;
        state_ = 3;
      case 3:
        if (StepSeq(
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior,
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 4;
      case 4:
        if (StepSeq(
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior,
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 5;
      case 5:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 6;
      case 6:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 7;
      case 7:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 8;
      case 8:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.f))
          break;
        state_ = 9;
      case 9:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.f))
          break;
        state_ = 10;
      case 10:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.f))
          break;
        state_ = 11;
      case 11:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.f))
          break;
        state_ = 12;
      case 12:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.f))
          break;
        state_ = 13;
      case 13:
        if (StepSeq(
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior,
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 14;
      case 14:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 15;
      case 15:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 16;
      case 16:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.f))
          break;
        state_ = 17;
      case 17:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.f))
          break;
        state_ = 18;
      case 18:
        if (StepSeq(&prior_.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.f))
          break;
        state_ = 19;
      case 19:
        if (StepSeq(&prior_.prior.prior.prior, &prior_.prior.prior.f)) break;
        state_ = 20;
      case 20:
        if (StepSeq(&prior_.prior.prior, &prior_.prior.f)) break;
        state_ = 21;
      case 21:
        if (StepSeq(&prior_.prior, &prior_.f)) break;
        state_ = 22;
      case 22:
        if (StepSeq(&prior_, &f_)) break;
        state_ = 23;
      case 23:
        return f_();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12, typename F13, typename F14,
          typename F15, typename F16, typename F17, typename F18, typename F19,
          typename F20, typename F21, typename F22, typename F23, typename F24>
class Seq<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
          F16, F17, F18, F19, F20, F21, F22, F23, F24> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using State2 = IntermediateState<State1, F3, F0, F1, F2>;
  using State3 = IntermediateState<State2, F4, F0, F1, F2, F3>;
  using State4 = IntermediateState<State3, F5, F0, F1, F2, F3, F4>;
  using State5 = IntermediateState<State4, F6, F0, F1, F2, F3, F4, F5>;
  using State6 = IntermediateState<State5, F7, F0, F1, F2, F3, F4, F5, F6>;
  using State7 = IntermediateState<State6, F8, F0, F1, F2, F3, F4, F5, F6, F7>;
  using State8 =
      IntermediateState<State7, F9, F0, F1, F2, F3, F4, F5, F6, F7, F8>;
  using State9 =
      IntermediateState<State8, F10, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9>;
  using State10 = IntermediateState<State9, F11, F0, F1, F2, F3, F4, F5, F6, F7,
                                    F8, F9, F10>;
  using State11 = IntermediateState<State10, F12, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11>;
  using State12 = IntermediateState<State11, F13, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12>;
  using State13 = IntermediateState<State12, F14, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13>;
  using State14 = IntermediateState<State13, F15, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14>;
  using State15 = IntermediateState<State14, F16, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15>;
  using State16 =
      IntermediateState<State15, F17, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16>;
  using State17 =
      IntermediateState<State16, F18, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17>;
  using State18 =
      IntermediateState<State17, F19, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18>;
  using State19 =
      IntermediateState<State18, F20, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19>;
  using State20 =
      IntermediateState<State19, F21, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20>;
  using State21 = IntermediateState<State20, F22, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15,
                                    F16, F17, F18, F19, F20, F21>;
  using State22 = IntermediateState<State21, F23, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15,
                                    F16, F17, F18, F19, F20, F21, F22>;
  using State23 = IntermediateState<State22, F24, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15,
                                    F16, F17, F18, F19, F20, F21, F22, F23>;
  using FLast = typename State23::Next::Promise;
  union {
    [[no_unique_address]] State23 prior_;
    [[no_unique_address]] FLast f_;
  };

 public:
  Seq(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
      F10 f10, F11 f11, F12 f12, F13 f13, F14 f14, F15 f15, F16 f16, F17 f17,
      F18 f18, F19 f19, F20 f20, F21 f21, F22 f22, F23 f23, F24 f24)
      : prior_(std::move(f0), std::move(f1), std::move(f2), std::move(f3),
               std::move(f4), std::move(f5), std::move(f6), std::move(f7),
               std::move(f8), std::move(f9), std::move(f10), std::move(f11),
               std::move(f12), std::move(f13), std::move(f14), std::move(f15),
               std::move(f16), std::move(f17), std::move(f18), std::move(f19),
               std::move(f20), std::move(f21), std::move(f22), std::move(f23),
               std::move(f24)) {}
  Seq& operator=(const Seq&) = delete;
  Seq(const Seq& other) {
    assert(other.state_ == 0);
    new (&prior_) State23(other.prior_);
  }
  Seq(Seq&& other) {
    assert(other.state_ == 0);
    new (&prior_) State23(std::move(other.prior_));
  }
  ~Seq() {
    switch (state_) {
      case 0:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.f);
        goto fin0;
      case 1:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.f);
        goto fin1;
      case 2:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.f);
        goto fin2;
      case 3:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.f);
        goto fin3;
      case 4:
        Destruct(
            &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                 .prior.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin4;
      case 5:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin5;
      case 6:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin6;
      case 7:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.f);
        goto fin7;
      case 8:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.f);
        goto fin8;
      case 9:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.f);
        goto fin9;
      case 10:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.f);
        goto fin10;
      case 11:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.f);
        goto fin11;
      case 12:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.f);
        goto fin12;
      case 13:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.f);
        goto fin13;
      case 14:
        Destruct(
            &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin14;
      case 15:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin15;
      case 16:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin16;
      case 17:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.f);
        goto fin17;
      case 18:
        Destruct(&prior_.prior.prior.prior.prior.prior.f);
        goto fin18;
      case 19:
        Destruct(&prior_.prior.prior.prior.prior.f);
        goto fin19;
      case 20:
        Destruct(&prior_.prior.prior.prior.f);
        goto fin20;
      case 21:
        Destruct(&prior_.prior.prior.f);
        goto fin21;
      case 22:
        Destruct(&prior_.prior.f);
        goto fin22;
      case 23:
        Destruct(&prior_.f);
        goto fin23;
      case 24:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.next);
  fin1:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.next);
  fin2:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.next);
  fin3:
    Destruct(
        &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
             .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin4:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin5:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin6:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.next);
  fin7:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.next);
  fin8:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.next);
  fin9:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.next);
  fin10:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.next);
  fin11:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.next);
  fin12:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.next);
  fin13:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .next);
  fin14:
    Destruct(
        &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin15:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin16:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.next);
  fin17:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.next);
  fin18:
    Destruct(&prior_.prior.prior.prior.prior.prior.next);
  fin19:
    Destruct(&prior_.prior.prior.prior.prior.next);
  fin20:
    Destruct(&prior_.prior.prior.prior.next);
  fin21:
    Destruct(&prior_.prior.prior.next);
  fin22:
    Destruct(&prior_.prior.next);
  fin23:
    Destruct(&prior_.next);
  }
  decltype(std::declval<typename State23::Next::Promise>()()) operator()() {
    switch (state_) {
      case 0:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.f))
          break;
        state_ = 1;
      case 1:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.f))
          break;
        state_ = 2;
      case 2:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.f))
          break;
        state_ = 3;
      case 3:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.f))
          break;
        state_ = 4;
      case 4:
        if (StepSeq(
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior,
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 5;
      case 5:
        if (StepSeq(
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior,
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 6;
      case 6:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 7;
      case 7:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 8;
      case 8:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 9;
      case 9:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.f))
          break;
        state_ = 10;
      case 10:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.f))
          break;
        state_ = 11;
      case 11:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.f))
          break;
        state_ = 12;
      case 12:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.f))
          break;
        state_ = 13;
      case 13:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.f))
          break;
        state_ = 14;
      case 14:
        if (StepSeq(
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior,
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 15;
      case 15:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 16;
      case 16:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 17;
      case 17:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.f))
          break;
        state_ = 18;
      case 18:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.f))
          break;
        state_ = 19;
      case 19:
        if (StepSeq(&prior_.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.f))
          break;
        state_ = 20;
      case 20:
        if (StepSeq(&prior_.prior.prior.prior, &prior_.prior.prior.f)) break;
        state_ = 21;
      case 21:
        if (StepSeq(&prior_.prior.prior, &prior_.prior.f)) break;
        state_ = 22;
      case 22:
        if (StepSeq(&prior_.prior, &prior_.f)) break;
        state_ = 23;
      case 23:
        if (StepSeq(&prior_, &f_)) break;
        state_ = 24;
      case 24:
        return f_();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12, typename F13, typename F14,
          typename F15, typename F16, typename F17, typename F18, typename F19,
          typename F20, typename F21, typename F22, typename F23, typename F24,
          typename F25>
class Seq<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
          F16, F17, F18, F19, F20, F21, F22, F23, F24, F25> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using State2 = IntermediateState<State1, F3, F0, F1, F2>;
  using State3 = IntermediateState<State2, F4, F0, F1, F2, F3>;
  using State4 = IntermediateState<State3, F5, F0, F1, F2, F3, F4>;
  using State5 = IntermediateState<State4, F6, F0, F1, F2, F3, F4, F5>;
  using State6 = IntermediateState<State5, F7, F0, F1, F2, F3, F4, F5, F6>;
  using State7 = IntermediateState<State6, F8, F0, F1, F2, F3, F4, F5, F6, F7>;
  using State8 =
      IntermediateState<State7, F9, F0, F1, F2, F3, F4, F5, F6, F7, F8>;
  using State9 =
      IntermediateState<State8, F10, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9>;
  using State10 = IntermediateState<State9, F11, F0, F1, F2, F3, F4, F5, F6, F7,
                                    F8, F9, F10>;
  using State11 = IntermediateState<State10, F12, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11>;
  using State12 = IntermediateState<State11, F13, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12>;
  using State13 = IntermediateState<State12, F14, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13>;
  using State14 = IntermediateState<State13, F15, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14>;
  using State15 = IntermediateState<State14, F16, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15>;
  using State16 =
      IntermediateState<State15, F17, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16>;
  using State17 =
      IntermediateState<State16, F18, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17>;
  using State18 =
      IntermediateState<State17, F19, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18>;
  using State19 =
      IntermediateState<State18, F20, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19>;
  using State20 =
      IntermediateState<State19, F21, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20>;
  using State21 = IntermediateState<State20, F22, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15,
                                    F16, F17, F18, F19, F20, F21>;
  using State22 = IntermediateState<State21, F23, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15,
                                    F16, F17, F18, F19, F20, F21, F22>;
  using State23 = IntermediateState<State22, F24, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15,
                                    F16, F17, F18, F19, F20, F21, F22, F23>;
  using State24 =
      IntermediateState<State23, F25, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
                        F21, F22, F23, F24>;
  using FLast = typename State24::Next::Promise;
  union {
    [[no_unique_address]] State24 prior_;
    [[no_unique_address]] FLast f_;
  };

 public:
  Seq(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
      F10 f10, F11 f11, F12 f12, F13 f13, F14 f14, F15 f15, F16 f16, F17 f17,
      F18 f18, F19 f19, F20 f20, F21 f21, F22 f22, F23 f23, F24 f24, F25 f25)
      : prior_(std::move(f0), std::move(f1), std::move(f2), std::move(f3),
               std::move(f4), std::move(f5), std::move(f6), std::move(f7),
               std::move(f8), std::move(f9), std::move(f10), std::move(f11),
               std::move(f12), std::move(f13), std::move(f14), std::move(f15),
               std::move(f16), std::move(f17), std::move(f18), std::move(f19),
               std::move(f20), std::move(f21), std::move(f22), std::move(f23),
               std::move(f24), std::move(f25)) {}
  Seq& operator=(const Seq&) = delete;
  Seq(const Seq& other) {
    assert(other.state_ == 0);
    new (&prior_) State24(other.prior_);
  }
  Seq(Seq&& other) {
    assert(other.state_ == 0);
    new (&prior_) State24(std::move(other.prior_));
  }
  ~Seq() {
    switch (state_) {
      case 0:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.f);
        goto fin0;
      case 1:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.f);
        goto fin1;
      case 2:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.f);
        goto fin2;
      case 3:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.f);
        goto fin3;
      case 4:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.f);
        goto fin4;
      case 5:
        Destruct(
            &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                 .prior.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin5;
      case 6:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin6;
      case 7:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin7;
      case 8:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.f);
        goto fin8;
      case 9:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.f);
        goto fin9;
      case 10:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.f);
        goto fin10;
      case 11:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.f);
        goto fin11;
      case 12:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.f);
        goto fin12;
      case 13:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.f);
        goto fin13;
      case 14:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.f);
        goto fin14;
      case 15:
        Destruct(
            &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin15;
      case 16:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin16;
      case 17:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin17;
      case 18:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.f);
        goto fin18;
      case 19:
        Destruct(&prior_.prior.prior.prior.prior.prior.f);
        goto fin19;
      case 20:
        Destruct(&prior_.prior.prior.prior.prior.f);
        goto fin20;
      case 21:
        Destruct(&prior_.prior.prior.prior.f);
        goto fin21;
      case 22:
        Destruct(&prior_.prior.prior.f);
        goto fin22;
      case 23:
        Destruct(&prior_.prior.f);
        goto fin23;
      case 24:
        Destruct(&prior_.f);
        goto fin24;
      case 25:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.next);
  fin1:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.next);
  fin2:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.next);
  fin3:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.next);
  fin4:
    Destruct(
        &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
             .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin5:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin6:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin7:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.next);
  fin8:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.next);
  fin9:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.next);
  fin10:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.next);
  fin11:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.next);
  fin12:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.next);
  fin13:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.next);
  fin14:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .next);
  fin15:
    Destruct(
        &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin16:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin17:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.next);
  fin18:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.next);
  fin19:
    Destruct(&prior_.prior.prior.prior.prior.prior.next);
  fin20:
    Destruct(&prior_.prior.prior.prior.prior.next);
  fin21:
    Destruct(&prior_.prior.prior.prior.next);
  fin22:
    Destruct(&prior_.prior.prior.next);
  fin23:
    Destruct(&prior_.prior.next);
  fin24:
    Destruct(&prior_.next);
  }
  decltype(std::declval<typename State24::Next::Promise>()()) operator()() {
    switch (state_) {
      case 0:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 1;
      case 1:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.f))
          break;
        state_ = 2;
      case 2:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.f))
          break;
        state_ = 3;
      case 3:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.f))
          break;
        state_ = 4;
      case 4:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.f))
          break;
        state_ = 5;
      case 5:
        if (StepSeq(
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior,
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 6;
      case 6:
        if (StepSeq(
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior,
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 7;
      case 7:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 8;
      case 8:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 9;
      case 9:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 10;
      case 10:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.f))
          break;
        state_ = 11;
      case 11:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.f))
          break;
        state_ = 12;
      case 12:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.f))
          break;
        state_ = 13;
      case 13:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.f))
          break;
        state_ = 14;
      case 14:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.f))
          break;
        state_ = 15;
      case 15:
        if (StepSeq(
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior,
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 16;
      case 16:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 17;
      case 17:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 18;
      case 18:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.f))
          break;
        state_ = 19;
      case 19:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.f))
          break;
        state_ = 20;
      case 20:
        if (StepSeq(&prior_.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.f))
          break;
        state_ = 21;
      case 21:
        if (StepSeq(&prior_.prior.prior.prior, &prior_.prior.prior.f)) break;
        state_ = 22;
      case 22:
        if (StepSeq(&prior_.prior.prior, &prior_.prior.f)) break;
        state_ = 23;
      case 23:
        if (StepSeq(&prior_.prior, &prior_.f)) break;
        state_ = 24;
      case 24:
        if (StepSeq(&prior_, &f_)) break;
        state_ = 25;
      case 25:
        return f_();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12, typename F13, typename F14,
          typename F15, typename F16, typename F17, typename F18, typename F19,
          typename F20, typename F21, typename F22, typename F23, typename F24,
          typename F25, typename F26>
class Seq<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
          F16, F17, F18, F19, F20, F21, F22, F23, F24, F25, F26> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using State2 = IntermediateState<State1, F3, F0, F1, F2>;
  using State3 = IntermediateState<State2, F4, F0, F1, F2, F3>;
  using State4 = IntermediateState<State3, F5, F0, F1, F2, F3, F4>;
  using State5 = IntermediateState<State4, F6, F0, F1, F2, F3, F4, F5>;
  using State6 = IntermediateState<State5, F7, F0, F1, F2, F3, F4, F5, F6>;
  using State7 = IntermediateState<State6, F8, F0, F1, F2, F3, F4, F5, F6, F7>;
  using State8 =
      IntermediateState<State7, F9, F0, F1, F2, F3, F4, F5, F6, F7, F8>;
  using State9 =
      IntermediateState<State8, F10, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9>;
  using State10 = IntermediateState<State9, F11, F0, F1, F2, F3, F4, F5, F6, F7,
                                    F8, F9, F10>;
  using State11 = IntermediateState<State10, F12, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11>;
  using State12 = IntermediateState<State11, F13, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12>;
  using State13 = IntermediateState<State12, F14, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13>;
  using State14 = IntermediateState<State13, F15, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14>;
  using State15 = IntermediateState<State14, F16, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15>;
  using State16 =
      IntermediateState<State15, F17, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16>;
  using State17 =
      IntermediateState<State16, F18, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17>;
  using State18 =
      IntermediateState<State17, F19, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18>;
  using State19 =
      IntermediateState<State18, F20, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19>;
  using State20 =
      IntermediateState<State19, F21, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20>;
  using State21 = IntermediateState<State20, F22, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15,
                                    F16, F17, F18, F19, F20, F21>;
  using State22 = IntermediateState<State21, F23, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15,
                                    F16, F17, F18, F19, F20, F21, F22>;
  using State23 = IntermediateState<State22, F24, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15,
                                    F16, F17, F18, F19, F20, F21, F22, F23>;
  using State24 =
      IntermediateState<State23, F25, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
                        F21, F22, F23, F24>;
  using State25 =
      IntermediateState<State24, F26, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
                        F21, F22, F23, F24, F25>;
  using FLast = typename State25::Next::Promise;
  union {
    [[no_unique_address]] State25 prior_;
    [[no_unique_address]] FLast f_;
  };

 public:
  Seq(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
      F10 f10, F11 f11, F12 f12, F13 f13, F14 f14, F15 f15, F16 f16, F17 f17,
      F18 f18, F19 f19, F20 f20, F21 f21, F22 f22, F23 f23, F24 f24, F25 f25,
      F26 f26)
      : prior_(std::move(f0), std::move(f1), std::move(f2), std::move(f3),
               std::move(f4), std::move(f5), std::move(f6), std::move(f7),
               std::move(f8), std::move(f9), std::move(f10), std::move(f11),
               std::move(f12), std::move(f13), std::move(f14), std::move(f15),
               std::move(f16), std::move(f17), std::move(f18), std::move(f19),
               std::move(f20), std::move(f21), std::move(f22), std::move(f23),
               std::move(f24), std::move(f25), std::move(f26)) {}
  Seq& operator=(const Seq&) = delete;
  Seq(const Seq& other) {
    assert(other.state_ == 0);
    new (&prior_) State25(other.prior_);
  }
  Seq(Seq&& other) {
    assert(other.state_ == 0);
    new (&prior_) State25(std::move(other.prior_));
  }
  ~Seq() {
    switch (state_) {
      case 0:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.f);
        goto fin0;
      case 1:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.f);
        goto fin1;
      case 2:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.f);
        goto fin2;
      case 3:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.f);
        goto fin3;
      case 4:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.f);
        goto fin4;
      case 5:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.f);
        goto fin5;
      case 6:
        Destruct(
            &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                 .prior.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin6;
      case 7:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin7;
      case 8:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin8;
      case 9:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.f);
        goto fin9;
      case 10:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.f);
        goto fin10;
      case 11:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.f);
        goto fin11;
      case 12:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.f);
        goto fin12;
      case 13:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.f);
        goto fin13;
      case 14:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.f);
        goto fin14;
      case 15:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.f);
        goto fin15;
      case 16:
        Destruct(
            &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin16;
      case 17:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin17;
      case 18:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin18;
      case 19:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.f);
        goto fin19;
      case 20:
        Destruct(&prior_.prior.prior.prior.prior.prior.f);
        goto fin20;
      case 21:
        Destruct(&prior_.prior.prior.prior.prior.f);
        goto fin21;
      case 22:
        Destruct(&prior_.prior.prior.prior.f);
        goto fin22;
      case 23:
        Destruct(&prior_.prior.prior.f);
        goto fin23;
      case 24:
        Destruct(&prior_.prior.f);
        goto fin24;
      case 25:
        Destruct(&prior_.f);
        goto fin25;
      case 26:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.next);
  fin1:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.next);
  fin2:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.next);
  fin3:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.next);
  fin4:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.next);
  fin5:
    Destruct(
        &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
             .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin6:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin7:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin8:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.next);
  fin9:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.next);
  fin10:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.next);
  fin11:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.next);
  fin12:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.next);
  fin13:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.next);
  fin14:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.next);
  fin15:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .next);
  fin16:
    Destruct(
        &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin17:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin18:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.next);
  fin19:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.next);
  fin20:
    Destruct(&prior_.prior.prior.prior.prior.prior.next);
  fin21:
    Destruct(&prior_.prior.prior.prior.prior.next);
  fin22:
    Destruct(&prior_.prior.prior.prior.next);
  fin23:
    Destruct(&prior_.prior.prior.next);
  fin24:
    Destruct(&prior_.prior.next);
  fin25:
    Destruct(&prior_.next);
  }
  decltype(std::declval<typename State25::Next::Promise>()()) operator()() {
    switch (state_) {
      case 0:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 1;
      case 1:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 2;
      case 2:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.f))
          break;
        state_ = 3;
      case 3:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.f))
          break;
        state_ = 4;
      case 4:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.f))
          break;
        state_ = 5;
      case 5:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.f))
          break;
        state_ = 6;
      case 6:
        if (StepSeq(
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior,
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 7;
      case 7:
        if (StepSeq(
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior,
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 8;
      case 8:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 9;
      case 9:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 10;
      case 10:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 11;
      case 11:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.f))
          break;
        state_ = 12;
      case 12:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.f))
          break;
        state_ = 13;
      case 13:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.f))
          break;
        state_ = 14;
      case 14:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.f))
          break;
        state_ = 15;
      case 15:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.f))
          break;
        state_ = 16;
      case 16:
        if (StepSeq(
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior,
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 17;
      case 17:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 18;
      case 18:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 19;
      case 19:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.f))
          break;
        state_ = 20;
      case 20:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.f))
          break;
        state_ = 21;
      case 21:
        if (StepSeq(&prior_.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.f))
          break;
        state_ = 22;
      case 22:
        if (StepSeq(&prior_.prior.prior.prior, &prior_.prior.prior.f)) break;
        state_ = 23;
      case 23:
        if (StepSeq(&prior_.prior.prior, &prior_.prior.f)) break;
        state_ = 24;
      case 24:
        if (StepSeq(&prior_.prior, &prior_.f)) break;
        state_ = 25;
      case 25:
        if (StepSeq(&prior_, &f_)) break;
        state_ = 26;
      case 26:
        return f_();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12, typename F13, typename F14,
          typename F15, typename F16, typename F17, typename F18, typename F19,
          typename F20, typename F21, typename F22, typename F23, typename F24,
          typename F25, typename F26, typename F27>
class Seq<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
          F16, F17, F18, F19, F20, F21, F22, F23, F24, F25, F26, F27> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using State2 = IntermediateState<State1, F3, F0, F1, F2>;
  using State3 = IntermediateState<State2, F4, F0, F1, F2, F3>;
  using State4 = IntermediateState<State3, F5, F0, F1, F2, F3, F4>;
  using State5 = IntermediateState<State4, F6, F0, F1, F2, F3, F4, F5>;
  using State6 = IntermediateState<State5, F7, F0, F1, F2, F3, F4, F5, F6>;
  using State7 = IntermediateState<State6, F8, F0, F1, F2, F3, F4, F5, F6, F7>;
  using State8 =
      IntermediateState<State7, F9, F0, F1, F2, F3, F4, F5, F6, F7, F8>;
  using State9 =
      IntermediateState<State8, F10, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9>;
  using State10 = IntermediateState<State9, F11, F0, F1, F2, F3, F4, F5, F6, F7,
                                    F8, F9, F10>;
  using State11 = IntermediateState<State10, F12, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11>;
  using State12 = IntermediateState<State11, F13, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12>;
  using State13 = IntermediateState<State12, F14, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13>;
  using State14 = IntermediateState<State13, F15, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14>;
  using State15 = IntermediateState<State14, F16, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15>;
  using State16 =
      IntermediateState<State15, F17, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16>;
  using State17 =
      IntermediateState<State16, F18, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17>;
  using State18 =
      IntermediateState<State17, F19, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18>;
  using State19 =
      IntermediateState<State18, F20, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19>;
  using State20 =
      IntermediateState<State19, F21, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20>;
  using State21 = IntermediateState<State20, F22, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15,
                                    F16, F17, F18, F19, F20, F21>;
  using State22 = IntermediateState<State21, F23, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15,
                                    F16, F17, F18, F19, F20, F21, F22>;
  using State23 = IntermediateState<State22, F24, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15,
                                    F16, F17, F18, F19, F20, F21, F22, F23>;
  using State24 =
      IntermediateState<State23, F25, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
                        F21, F22, F23, F24>;
  using State25 =
      IntermediateState<State24, F26, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
                        F21, F22, F23, F24, F25>;
  using State26 =
      IntermediateState<State25, F27, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
                        F21, F22, F23, F24, F25, F26>;
  using FLast = typename State26::Next::Promise;
  union {
    [[no_unique_address]] State26 prior_;
    [[no_unique_address]] FLast f_;
  };

 public:
  Seq(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
      F10 f10, F11 f11, F12 f12, F13 f13, F14 f14, F15 f15, F16 f16, F17 f17,
      F18 f18, F19 f19, F20 f20, F21 f21, F22 f22, F23 f23, F24 f24, F25 f25,
      F26 f26, F27 f27)
      : prior_(std::move(f0), std::move(f1), std::move(f2), std::move(f3),
               std::move(f4), std::move(f5), std::move(f6), std::move(f7),
               std::move(f8), std::move(f9), std::move(f10), std::move(f11),
               std::move(f12), std::move(f13), std::move(f14), std::move(f15),
               std::move(f16), std::move(f17), std::move(f18), std::move(f19),
               std::move(f20), std::move(f21), std::move(f22), std::move(f23),
               std::move(f24), std::move(f25), std::move(f26), std::move(f27)) {
  }
  Seq& operator=(const Seq&) = delete;
  Seq(const Seq& other) {
    assert(other.state_ == 0);
    new (&prior_) State26(other.prior_);
  }
  Seq(Seq&& other) {
    assert(other.state_ == 0);
    new (&prior_) State26(std::move(other.prior_));
  }
  ~Seq() {
    switch (state_) {
      case 0:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin0;
      case 1:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.f);
        goto fin1;
      case 2:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.f);
        goto fin2;
      case 3:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.f);
        goto fin3;
      case 4:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.f);
        goto fin4;
      case 5:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.f);
        goto fin5;
      case 6:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.f);
        goto fin6;
      case 7:
        Destruct(
            &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                 .prior.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin7;
      case 8:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin8;
      case 9:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin9;
      case 10:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.f);
        goto fin10;
      case 11:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.f);
        goto fin11;
      case 12:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.f);
        goto fin12;
      case 13:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.f);
        goto fin13;
      case 14:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.f);
        goto fin14;
      case 15:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.f);
        goto fin15;
      case 16:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.f);
        goto fin16;
      case 17:
        Destruct(
            &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin17;
      case 18:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin18;
      case 19:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin19;
      case 20:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.f);
        goto fin20;
      case 21:
        Destruct(&prior_.prior.prior.prior.prior.prior.f);
        goto fin21;
      case 22:
        Destruct(&prior_.prior.prior.prior.prior.f);
        goto fin22;
      case 23:
        Destruct(&prior_.prior.prior.prior.f);
        goto fin23;
      case 24:
        Destruct(&prior_.prior.prior.f);
        goto fin24;
      case 25:
        Destruct(&prior_.prior.f);
        goto fin25;
      case 26:
        Destruct(&prior_.f);
        goto fin26;
      case 27:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.next);
  fin1:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.next);
  fin2:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.next);
  fin3:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.next);
  fin4:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.next);
  fin5:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.next);
  fin6:
    Destruct(
        &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
             .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin7:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin8:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin9:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.next);
  fin10:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.next);
  fin11:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.next);
  fin12:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.next);
  fin13:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.next);
  fin14:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.next);
  fin15:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.next);
  fin16:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .next);
  fin17:
    Destruct(
        &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin18:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin19:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.next);
  fin20:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.next);
  fin21:
    Destruct(&prior_.prior.prior.prior.prior.prior.next);
  fin22:
    Destruct(&prior_.prior.prior.prior.prior.next);
  fin23:
    Destruct(&prior_.prior.prior.prior.next);
  fin24:
    Destruct(&prior_.prior.prior.next);
  fin25:
    Destruct(&prior_.prior.next);
  fin26:
    Destruct(&prior_.next);
  }
  decltype(std::declval<typename State26::Next::Promise>()()) operator()() {
    switch (state_) {
      case 0:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 1;
      case 1:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 2;
      case 2:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 3;
      case 3:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.f))
          break;
        state_ = 4;
      case 4:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.f))
          break;
        state_ = 5;
      case 5:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.f))
          break;
        state_ = 6;
      case 6:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.f))
          break;
        state_ = 7;
      case 7:
        if (StepSeq(
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior,
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 8;
      case 8:
        if (StepSeq(
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior,
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 9;
      case 9:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 10;
      case 10:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 11;
      case 11:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 12;
      case 12:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.f))
          break;
        state_ = 13;
      case 13:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.f))
          break;
        state_ = 14;
      case 14:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.f))
          break;
        state_ = 15;
      case 15:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.f))
          break;
        state_ = 16;
      case 16:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.f))
          break;
        state_ = 17;
      case 17:
        if (StepSeq(
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior,
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 18;
      case 18:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 19;
      case 19:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 20;
      case 20:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.f))
          break;
        state_ = 21;
      case 21:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.f))
          break;
        state_ = 22;
      case 22:
        if (StepSeq(&prior_.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.f))
          break;
        state_ = 23;
      case 23:
        if (StepSeq(&prior_.prior.prior.prior, &prior_.prior.prior.f)) break;
        state_ = 24;
      case 24:
        if (StepSeq(&prior_.prior.prior, &prior_.prior.f)) break;
        state_ = 25;
      case 25:
        if (StepSeq(&prior_.prior, &prior_.f)) break;
        state_ = 26;
      case 26:
        if (StepSeq(&prior_, &f_)) break;
        state_ = 27;
      case 27:
        return f_();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12, typename F13, typename F14,
          typename F15, typename F16, typename F17, typename F18, typename F19,
          typename F20, typename F21, typename F22, typename F23, typename F24,
          typename F25, typename F26, typename F27, typename F28>
class Seq<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
          F16, F17, F18, F19, F20, F21, F22, F23, F24, F25, F26, F27, F28> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using State2 = IntermediateState<State1, F3, F0, F1, F2>;
  using State3 = IntermediateState<State2, F4, F0, F1, F2, F3>;
  using State4 = IntermediateState<State3, F5, F0, F1, F2, F3, F4>;
  using State5 = IntermediateState<State4, F6, F0, F1, F2, F3, F4, F5>;
  using State6 = IntermediateState<State5, F7, F0, F1, F2, F3, F4, F5, F6>;
  using State7 = IntermediateState<State6, F8, F0, F1, F2, F3, F4, F5, F6, F7>;
  using State8 =
      IntermediateState<State7, F9, F0, F1, F2, F3, F4, F5, F6, F7, F8>;
  using State9 =
      IntermediateState<State8, F10, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9>;
  using State10 = IntermediateState<State9, F11, F0, F1, F2, F3, F4, F5, F6, F7,
                                    F8, F9, F10>;
  using State11 = IntermediateState<State10, F12, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11>;
  using State12 = IntermediateState<State11, F13, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12>;
  using State13 = IntermediateState<State12, F14, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13>;
  using State14 = IntermediateState<State13, F15, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14>;
  using State15 = IntermediateState<State14, F16, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15>;
  using State16 =
      IntermediateState<State15, F17, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16>;
  using State17 =
      IntermediateState<State16, F18, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17>;
  using State18 =
      IntermediateState<State17, F19, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18>;
  using State19 =
      IntermediateState<State18, F20, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19>;
  using State20 =
      IntermediateState<State19, F21, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20>;
  using State21 = IntermediateState<State20, F22, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15,
                                    F16, F17, F18, F19, F20, F21>;
  using State22 = IntermediateState<State21, F23, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15,
                                    F16, F17, F18, F19, F20, F21, F22>;
  using State23 = IntermediateState<State22, F24, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15,
                                    F16, F17, F18, F19, F20, F21, F22, F23>;
  using State24 =
      IntermediateState<State23, F25, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
                        F21, F22, F23, F24>;
  using State25 =
      IntermediateState<State24, F26, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
                        F21, F22, F23, F24, F25>;
  using State26 =
      IntermediateState<State25, F27, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
                        F21, F22, F23, F24, F25, F26>;
  using State27 =
      IntermediateState<State26, F28, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
                        F21, F22, F23, F24, F25, F26, F27>;
  using FLast = typename State27::Next::Promise;
  union {
    [[no_unique_address]] State27 prior_;
    [[no_unique_address]] FLast f_;
  };

 public:
  Seq(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
      F10 f10, F11 f11, F12 f12, F13 f13, F14 f14, F15 f15, F16 f16, F17 f17,
      F18 f18, F19 f19, F20 f20, F21 f21, F22 f22, F23 f23, F24 f24, F25 f25,
      F26 f26, F27 f27, F28 f28)
      : prior_(std::move(f0), std::move(f1), std::move(f2), std::move(f3),
               std::move(f4), std::move(f5), std::move(f6), std::move(f7),
               std::move(f8), std::move(f9), std::move(f10), std::move(f11),
               std::move(f12), std::move(f13), std::move(f14), std::move(f15),
               std::move(f16), std::move(f17), std::move(f18), std::move(f19),
               std::move(f20), std::move(f21), std::move(f22), std::move(f23),
               std::move(f24), std::move(f25), std::move(f26), std::move(f27),
               std::move(f28)) {}
  Seq& operator=(const Seq&) = delete;
  Seq(const Seq& other) {
    assert(other.state_ == 0);
    new (&prior_) State27(other.prior_);
  }
  Seq(Seq&& other) {
    assert(other.state_ == 0);
    new (&prior_) State27(std::move(other.prior_));
  }
  ~Seq() {
    switch (state_) {
      case 0:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin0;
      case 1:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin1;
      case 2:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.f);
        goto fin2;
      case 3:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.f);
        goto fin3;
      case 4:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.f);
        goto fin4;
      case 5:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.f);
        goto fin5;
      case 6:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.f);
        goto fin6;
      case 7:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.f);
        goto fin7;
      case 8:
        Destruct(
            &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                 .prior.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin8;
      case 9:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin9;
      case 10:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin10;
      case 11:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.f);
        goto fin11;
      case 12:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.f);
        goto fin12;
      case 13:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.f);
        goto fin13;
      case 14:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.f);
        goto fin14;
      case 15:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.f);
        goto fin15;
      case 16:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.f);
        goto fin16;
      case 17:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.f);
        goto fin17;
      case 18:
        Destruct(
            &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin18;
      case 19:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin19;
      case 20:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin20;
      case 21:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.f);
        goto fin21;
      case 22:
        Destruct(&prior_.prior.prior.prior.prior.prior.f);
        goto fin22;
      case 23:
        Destruct(&prior_.prior.prior.prior.prior.f);
        goto fin23;
      case 24:
        Destruct(&prior_.prior.prior.prior.f);
        goto fin24;
      case 25:
        Destruct(&prior_.prior.prior.f);
        goto fin25;
      case 26:
        Destruct(&prior_.prior.f);
        goto fin26;
      case 27:
        Destruct(&prior_.f);
        goto fin27;
      case 28:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.next);
  fin1:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.next);
  fin2:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.next);
  fin3:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.next);
  fin4:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.next);
  fin5:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.next);
  fin6:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.next);
  fin7:
    Destruct(
        &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
             .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin8:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin9:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin10:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.next);
  fin11:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.next);
  fin12:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.next);
  fin13:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.next);
  fin14:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.next);
  fin15:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.next);
  fin16:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.next);
  fin17:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .next);
  fin18:
    Destruct(
        &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin19:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin20:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.next);
  fin21:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.next);
  fin22:
    Destruct(&prior_.prior.prior.prior.prior.prior.next);
  fin23:
    Destruct(&prior_.prior.prior.prior.prior.next);
  fin24:
    Destruct(&prior_.prior.prior.prior.next);
  fin25:
    Destruct(&prior_.prior.prior.next);
  fin26:
    Destruct(&prior_.prior.next);
  fin27:
    Destruct(&prior_.next);
  }
  decltype(std::declval<typename State27::Next::Promise>()()) operator()() {
    switch (state_) {
      case 0:
        if (StepSeq(
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior,
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 1;
      case 1:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 2;
      case 2:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 3;
      case 3:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 4;
      case 4:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.f))
          break;
        state_ = 5;
      case 5:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.f))
          break;
        state_ = 6;
      case 6:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.f))
          break;
        state_ = 7;
      case 7:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.f))
          break;
        state_ = 8;
      case 8:
        if (StepSeq(
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior,
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 9;
      case 9:
        if (StepSeq(
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior,
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 10;
      case 10:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 11;
      case 11:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 12;
      case 12:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 13;
      case 13:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.f))
          break;
        state_ = 14;
      case 14:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.f))
          break;
        state_ = 15;
      case 15:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.f))
          break;
        state_ = 16;
      case 16:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.f))
          break;
        state_ = 17;
      case 17:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.f))
          break;
        state_ = 18;
      case 18:
        if (StepSeq(
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior,
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 19;
      case 19:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 20;
      case 20:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 21;
      case 21:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.f))
          break;
        state_ = 22;
      case 22:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.f))
          break;
        state_ = 23;
      case 23:
        if (StepSeq(&prior_.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.f))
          break;
        state_ = 24;
      case 24:
        if (StepSeq(&prior_.prior.prior.prior, &prior_.prior.prior.f)) break;
        state_ = 25;
      case 25:
        if (StepSeq(&prior_.prior.prior, &prior_.prior.f)) break;
        state_ = 26;
      case 26:
        if (StepSeq(&prior_.prior, &prior_.f)) break;
        state_ = 27;
      case 27:
        if (StepSeq(&prior_, &f_)) break;
        state_ = 28;
      case 28:
        return f_();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12, typename F13, typename F14,
          typename F15, typename F16, typename F17, typename F18, typename F19,
          typename F20, typename F21, typename F22, typename F23, typename F24,
          typename F25, typename F26, typename F27, typename F28, typename F29>
class Seq<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
          F16, F17, F18, F19, F20, F21, F22, F23, F24, F25, F26, F27, F28,
          F29> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using State2 = IntermediateState<State1, F3, F0, F1, F2>;
  using State3 = IntermediateState<State2, F4, F0, F1, F2, F3>;
  using State4 = IntermediateState<State3, F5, F0, F1, F2, F3, F4>;
  using State5 = IntermediateState<State4, F6, F0, F1, F2, F3, F4, F5>;
  using State6 = IntermediateState<State5, F7, F0, F1, F2, F3, F4, F5, F6>;
  using State7 = IntermediateState<State6, F8, F0, F1, F2, F3, F4, F5, F6, F7>;
  using State8 =
      IntermediateState<State7, F9, F0, F1, F2, F3, F4, F5, F6, F7, F8>;
  using State9 =
      IntermediateState<State8, F10, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9>;
  using State10 = IntermediateState<State9, F11, F0, F1, F2, F3, F4, F5, F6, F7,
                                    F8, F9, F10>;
  using State11 = IntermediateState<State10, F12, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11>;
  using State12 = IntermediateState<State11, F13, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12>;
  using State13 = IntermediateState<State12, F14, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13>;
  using State14 = IntermediateState<State13, F15, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14>;
  using State15 = IntermediateState<State14, F16, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15>;
  using State16 =
      IntermediateState<State15, F17, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16>;
  using State17 =
      IntermediateState<State16, F18, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17>;
  using State18 =
      IntermediateState<State17, F19, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18>;
  using State19 =
      IntermediateState<State18, F20, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19>;
  using State20 =
      IntermediateState<State19, F21, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20>;
  using State21 = IntermediateState<State20, F22, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15,
                                    F16, F17, F18, F19, F20, F21>;
  using State22 = IntermediateState<State21, F23, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15,
                                    F16, F17, F18, F19, F20, F21, F22>;
  using State23 = IntermediateState<State22, F24, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15,
                                    F16, F17, F18, F19, F20, F21, F22, F23>;
  using State24 =
      IntermediateState<State23, F25, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
                        F21, F22, F23, F24>;
  using State25 =
      IntermediateState<State24, F26, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
                        F21, F22, F23, F24, F25>;
  using State26 =
      IntermediateState<State25, F27, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
                        F21, F22, F23, F24, F25, F26>;
  using State27 =
      IntermediateState<State26, F28, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
                        F21, F22, F23, F24, F25, F26, F27>;
  using State28 =
      IntermediateState<State27, F29, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
                        F21, F22, F23, F24, F25, F26, F27, F28>;
  using FLast = typename State28::Next::Promise;
  union {
    [[no_unique_address]] State28 prior_;
    [[no_unique_address]] FLast f_;
  };

 public:
  Seq(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
      F10 f10, F11 f11, F12 f12, F13 f13, F14 f14, F15 f15, F16 f16, F17 f17,
      F18 f18, F19 f19, F20 f20, F21 f21, F22 f22, F23 f23, F24 f24, F25 f25,
      F26 f26, F27 f27, F28 f28, F29 f29)
      : prior_(std::move(f0), std::move(f1), std::move(f2), std::move(f3),
               std::move(f4), std::move(f5), std::move(f6), std::move(f7),
               std::move(f8), std::move(f9), std::move(f10), std::move(f11),
               std::move(f12), std::move(f13), std::move(f14), std::move(f15),
               std::move(f16), std::move(f17), std::move(f18), std::move(f19),
               std::move(f20), std::move(f21), std::move(f22), std::move(f23),
               std::move(f24), std::move(f25), std::move(f26), std::move(f27),
               std::move(f28), std::move(f29)) {}
  Seq& operator=(const Seq&) = delete;
  Seq(const Seq& other) {
    assert(other.state_ == 0);
    new (&prior_) State28(other.prior_);
  }
  Seq(Seq&& other) {
    assert(other.state_ == 0);
    new (&prior_) State28(std::move(other.prior_));
  }
  ~Seq() {
    switch (state_) {
      case 0:
        Destruct(
            &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                 .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                 .prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin0;
      case 1:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin1;
      case 2:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin2;
      case 3:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.f);
        goto fin3;
      case 4:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.f);
        goto fin4;
      case 5:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.f);
        goto fin5;
      case 6:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.f);
        goto fin6;
      case 7:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.f);
        goto fin7;
      case 8:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.f);
        goto fin8;
      case 9:
        Destruct(
            &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                 .prior.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin9;
      case 10:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin10;
      case 11:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin11;
      case 12:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.f);
        goto fin12;
      case 13:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.f);
        goto fin13;
      case 14:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.f);
        goto fin14;
      case 15:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.f);
        goto fin15;
      case 16:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.f);
        goto fin16;
      case 17:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.f);
        goto fin17;
      case 18:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.f);
        goto fin18;
      case 19:
        Destruct(
            &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin19;
      case 20:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin20;
      case 21:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin21;
      case 22:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.f);
        goto fin22;
      case 23:
        Destruct(&prior_.prior.prior.prior.prior.prior.f);
        goto fin23;
      case 24:
        Destruct(&prior_.prior.prior.prior.prior.f);
        goto fin24;
      case 25:
        Destruct(&prior_.prior.prior.prior.f);
        goto fin25;
      case 26:
        Destruct(&prior_.prior.prior.f);
        goto fin26;
      case 27:
        Destruct(&prior_.prior.f);
        goto fin27;
      case 28:
        Destruct(&prior_.f);
        goto fin28;
      case 29:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin1:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.next);
  fin2:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.next);
  fin3:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.next);
  fin4:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.next);
  fin5:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.next);
  fin6:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.next);
  fin7:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.next);
  fin8:
    Destruct(
        &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
             .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin9:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin10:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin11:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.next);
  fin12:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.next);
  fin13:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.next);
  fin14:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.next);
  fin15:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.next);
  fin16:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.next);
  fin17:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.next);
  fin18:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .next);
  fin19:
    Destruct(
        &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin20:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin21:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.next);
  fin22:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.next);
  fin23:
    Destruct(&prior_.prior.prior.prior.prior.prior.next);
  fin24:
    Destruct(&prior_.prior.prior.prior.prior.next);
  fin25:
    Destruct(&prior_.prior.prior.prior.next);
  fin26:
    Destruct(&prior_.prior.prior.next);
  fin27:
    Destruct(&prior_.prior.next);
  fin28:
    Destruct(&prior_.next);
  }
  decltype(std::declval<typename State28::Next::Promise>()()) operator()() {
    switch (state_) {
      case 0:
        if (StepSeq(
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior,
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 1;
      case 1:
        if (StepSeq(
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior,
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 2;
      case 2:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 3;
      case 3:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 4;
      case 4:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 5;
      case 5:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.f))
          break;
        state_ = 6;
      case 6:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.f))
          break;
        state_ = 7;
      case 7:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.f))
          break;
        state_ = 8;
      case 8:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.f))
          break;
        state_ = 9;
      case 9:
        if (StepSeq(
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior,
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 10;
      case 10:
        if (StepSeq(
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior,
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 11;
      case 11:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 12;
      case 12:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 13;
      case 13:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 14;
      case 14:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.f))
          break;
        state_ = 15;
      case 15:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.f))
          break;
        state_ = 16;
      case 16:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.f))
          break;
        state_ = 17;
      case 17:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.f))
          break;
        state_ = 18;
      case 18:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.f))
          break;
        state_ = 19;
      case 19:
        if (StepSeq(
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior,
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 20;
      case 20:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 21;
      case 21:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 22;
      case 22:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.f))
          break;
        state_ = 23;
      case 23:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.f))
          break;
        state_ = 24;
      case 24:
        if (StepSeq(&prior_.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.f))
          break;
        state_ = 25;
      case 25:
        if (StepSeq(&prior_.prior.prior.prior, &prior_.prior.prior.f)) break;
        state_ = 26;
      case 26:
        if (StepSeq(&prior_.prior.prior, &prior_.prior.f)) break;
        state_ = 27;
      case 27:
        if (StepSeq(&prior_.prior, &prior_.f)) break;
        state_ = 28;
      case 28:
        if (StepSeq(&prior_, &f_)) break;
        state_ = 29;
      case 29:
        return f_();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12, typename F13, typename F14,
          typename F15, typename F16, typename F17, typename F18, typename F19,
          typename F20, typename F21, typename F22, typename F23, typename F24,
          typename F25, typename F26, typename F27, typename F28, typename F29,
          typename F30>
class Seq<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
          F16, F17, F18, F19, F20, F21, F22, F23, F24, F25, F26, F27, F28, F29,
          F30> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using State2 = IntermediateState<State1, F3, F0, F1, F2>;
  using State3 = IntermediateState<State2, F4, F0, F1, F2, F3>;
  using State4 = IntermediateState<State3, F5, F0, F1, F2, F3, F4>;
  using State5 = IntermediateState<State4, F6, F0, F1, F2, F3, F4, F5>;
  using State6 = IntermediateState<State5, F7, F0, F1, F2, F3, F4, F5, F6>;
  using State7 = IntermediateState<State6, F8, F0, F1, F2, F3, F4, F5, F6, F7>;
  using State8 =
      IntermediateState<State7, F9, F0, F1, F2, F3, F4, F5, F6, F7, F8>;
  using State9 =
      IntermediateState<State8, F10, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9>;
  using State10 = IntermediateState<State9, F11, F0, F1, F2, F3, F4, F5, F6, F7,
                                    F8, F9, F10>;
  using State11 = IntermediateState<State10, F12, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11>;
  using State12 = IntermediateState<State11, F13, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12>;
  using State13 = IntermediateState<State12, F14, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13>;
  using State14 = IntermediateState<State13, F15, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14>;
  using State15 = IntermediateState<State14, F16, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15>;
  using State16 =
      IntermediateState<State15, F17, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16>;
  using State17 =
      IntermediateState<State16, F18, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17>;
  using State18 =
      IntermediateState<State17, F19, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18>;
  using State19 =
      IntermediateState<State18, F20, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19>;
  using State20 =
      IntermediateState<State19, F21, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20>;
  using State21 = IntermediateState<State20, F22, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15,
                                    F16, F17, F18, F19, F20, F21>;
  using State22 = IntermediateState<State21, F23, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15,
                                    F16, F17, F18, F19, F20, F21, F22>;
  using State23 = IntermediateState<State22, F24, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15,
                                    F16, F17, F18, F19, F20, F21, F22, F23>;
  using State24 =
      IntermediateState<State23, F25, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
                        F21, F22, F23, F24>;
  using State25 =
      IntermediateState<State24, F26, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
                        F21, F22, F23, F24, F25>;
  using State26 =
      IntermediateState<State25, F27, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
                        F21, F22, F23, F24, F25, F26>;
  using State27 =
      IntermediateState<State26, F28, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
                        F21, F22, F23, F24, F25, F26, F27>;
  using State28 =
      IntermediateState<State27, F29, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
                        F21, F22, F23, F24, F25, F26, F27, F28>;
  using State29 =
      IntermediateState<State28, F30, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
                        F21, F22, F23, F24, F25, F26, F27, F28, F29>;
  using FLast = typename State29::Next::Promise;
  union {
    [[no_unique_address]] State29 prior_;
    [[no_unique_address]] FLast f_;
  };

 public:
  Seq(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
      F10 f10, F11 f11, F12 f12, F13 f13, F14 f14, F15 f15, F16 f16, F17 f17,
      F18 f18, F19 f19, F20 f20, F21 f21, F22 f22, F23 f23, F24 f24, F25 f25,
      F26 f26, F27 f27, F28 f28, F29 f29, F30 f30)
      : prior_(std::move(f0), std::move(f1), std::move(f2), std::move(f3),
               std::move(f4), std::move(f5), std::move(f6), std::move(f7),
               std::move(f8), std::move(f9), std::move(f10), std::move(f11),
               std::move(f12), std::move(f13), std::move(f14), std::move(f15),
               std::move(f16), std::move(f17), std::move(f18), std::move(f19),
               std::move(f20), std::move(f21), std::move(f22), std::move(f23),
               std::move(f24), std::move(f25), std::move(f26), std::move(f27),
               std::move(f28), std::move(f29), std::move(f30)) {}
  Seq& operator=(const Seq&) = delete;
  Seq(const Seq& other) {
    assert(other.state_ == 0);
    new (&prior_) State29(other.prior_);
  }
  Seq(Seq&& other) {
    assert(other.state_ == 0);
    new (&prior_) State29(std::move(other.prior_));
  }
  ~Seq() {
    switch (state_) {
      case 0:
        Destruct(
            &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                 .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                 .prior.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin0;
      case 1:
        Destruct(
            &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                 .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                 .prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin1;
      case 2:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin2;
      case 3:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin3;
      case 4:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.f);
        goto fin4;
      case 5:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.f);
        goto fin5;
      case 6:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.f);
        goto fin6;
      case 7:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.f);
        goto fin7;
      case 8:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.f);
        goto fin8;
      case 9:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.f);
        goto fin9;
      case 10:
        Destruct(
            &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                 .prior.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin10;
      case 11:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin11;
      case 12:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin12;
      case 13:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.f);
        goto fin13;
      case 14:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.f);
        goto fin14;
      case 15:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.f);
        goto fin15;
      case 16:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.f);
        goto fin16;
      case 17:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.f);
        goto fin17;
      case 18:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.f);
        goto fin18;
      case 19:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.f);
        goto fin19;
      case 20:
        Destruct(
            &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin20;
      case 21:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin21;
      case 22:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin22;
      case 23:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.f);
        goto fin23;
      case 24:
        Destruct(&prior_.prior.prior.prior.prior.prior.f);
        goto fin24;
      case 25:
        Destruct(&prior_.prior.prior.prior.prior.f);
        goto fin25;
      case 26:
        Destruct(&prior_.prior.prior.prior.f);
        goto fin26;
      case 27:
        Destruct(&prior_.prior.prior.f);
        goto fin27;
      case 28:
        Destruct(&prior_.prior.f);
        goto fin28;
      case 29:
        Destruct(&prior_.f);
        goto fin29;
      case 30:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin1:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin2:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.next);
  fin3:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.next);
  fin4:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.next);
  fin5:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.next);
  fin6:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.next);
  fin7:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.next);
  fin8:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.next);
  fin9:
    Destruct(
        &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
             .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin10:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin11:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin12:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.next);
  fin13:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.next);
  fin14:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.next);
  fin15:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.next);
  fin16:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.next);
  fin17:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.next);
  fin18:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.next);
  fin19:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .next);
  fin20:
    Destruct(
        &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin21:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin22:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.next);
  fin23:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.next);
  fin24:
    Destruct(&prior_.prior.prior.prior.prior.prior.next);
  fin25:
    Destruct(&prior_.prior.prior.prior.prior.next);
  fin26:
    Destruct(&prior_.prior.prior.prior.next);
  fin27:
    Destruct(&prior_.prior.prior.next);
  fin28:
    Destruct(&prior_.prior.next);
  fin29:
    Destruct(&prior_.next);
  }
  decltype(std::declval<typename State29::Next::Promise>()()) operator()() {
    switch (state_) {
      case 0:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.f))
          break;
        state_ = 1;
      case 1:
        if (StepSeq(
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior,
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 2;
      case 2:
        if (StepSeq(
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior,
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 3;
      case 3:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 4;
      case 4:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 5;
      case 5:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 6;
      case 6:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.f))
          break;
        state_ = 7;
      case 7:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.f))
          break;
        state_ = 8;
      case 8:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.f))
          break;
        state_ = 9;
      case 9:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.f))
          break;
        state_ = 10;
      case 10:
        if (StepSeq(
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior,
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 11;
      case 11:
        if (StepSeq(
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior,
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 12;
      case 12:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 13;
      case 13:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 14;
      case 14:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 15;
      case 15:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.f))
          break;
        state_ = 16;
      case 16:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.f))
          break;
        state_ = 17;
      case 17:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.f))
          break;
        state_ = 18;
      case 18:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.f))
          break;
        state_ = 19;
      case 19:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.f))
          break;
        state_ = 20;
      case 20:
        if (StepSeq(
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior,
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 21;
      case 21:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 22;
      case 22:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 23;
      case 23:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.f))
          break;
        state_ = 24;
      case 24:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.f))
          break;
        state_ = 25;
      case 25:
        if (StepSeq(&prior_.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.f))
          break;
        state_ = 26;
      case 26:
        if (StepSeq(&prior_.prior.prior.prior, &prior_.prior.prior.f)) break;
        state_ = 27;
      case 27:
        if (StepSeq(&prior_.prior.prior, &prior_.prior.f)) break;
        state_ = 28;
      case 28:
        if (StepSeq(&prior_.prior, &prior_.f)) break;
        state_ = 29;
      case 29:
        if (StepSeq(&prior_, &f_)) break;
        state_ = 30;
      case 30:
        return f_();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12, typename F13, typename F14,
          typename F15, typename F16, typename F17, typename F18, typename F19,
          typename F20, typename F21, typename F22, typename F23, typename F24,
          typename F25, typename F26, typename F27, typename F28, typename F29,
          typename F30, typename F31>
class Seq<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
          F16, F17, F18, F19, F20, F21, F22, F23, F24, F25, F26, F27, F28, F29,
          F30, F31> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using State2 = IntermediateState<State1, F3, F0, F1, F2>;
  using State3 = IntermediateState<State2, F4, F0, F1, F2, F3>;
  using State4 = IntermediateState<State3, F5, F0, F1, F2, F3, F4>;
  using State5 = IntermediateState<State4, F6, F0, F1, F2, F3, F4, F5>;
  using State6 = IntermediateState<State5, F7, F0, F1, F2, F3, F4, F5, F6>;
  using State7 = IntermediateState<State6, F8, F0, F1, F2, F3, F4, F5, F6, F7>;
  using State8 =
      IntermediateState<State7, F9, F0, F1, F2, F3, F4, F5, F6, F7, F8>;
  using State9 =
      IntermediateState<State8, F10, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9>;
  using State10 = IntermediateState<State9, F11, F0, F1, F2, F3, F4, F5, F6, F7,
                                    F8, F9, F10>;
  using State11 = IntermediateState<State10, F12, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11>;
  using State12 = IntermediateState<State11, F13, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12>;
  using State13 = IntermediateState<State12, F14, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13>;
  using State14 = IntermediateState<State13, F15, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14>;
  using State15 = IntermediateState<State14, F16, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15>;
  using State16 =
      IntermediateState<State15, F17, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16>;
  using State17 =
      IntermediateState<State16, F18, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17>;
  using State18 =
      IntermediateState<State17, F19, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18>;
  using State19 =
      IntermediateState<State18, F20, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19>;
  using State20 =
      IntermediateState<State19, F21, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20>;
  using State21 = IntermediateState<State20, F22, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15,
                                    F16, F17, F18, F19, F20, F21>;
  using State22 = IntermediateState<State21, F23, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15,
                                    F16, F17, F18, F19, F20, F21, F22>;
  using State23 = IntermediateState<State22, F24, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15,
                                    F16, F17, F18, F19, F20, F21, F22, F23>;
  using State24 =
      IntermediateState<State23, F25, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
                        F21, F22, F23, F24>;
  using State25 =
      IntermediateState<State24, F26, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
                        F21, F22, F23, F24, F25>;
  using State26 =
      IntermediateState<State25, F27, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
                        F21, F22, F23, F24, F25, F26>;
  using State27 =
      IntermediateState<State26, F28, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
                        F21, F22, F23, F24, F25, F26, F27>;
  using State28 =
      IntermediateState<State27, F29, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
                        F21, F22, F23, F24, F25, F26, F27, F28>;
  using State29 =
      IntermediateState<State28, F30, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
                        F21, F22, F23, F24, F25, F26, F27, F28, F29>;
  using State30 =
      IntermediateState<State29, F31, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
                        F21, F22, F23, F24, F25, F26, F27, F28, F29, F30>;
  using FLast = typename State30::Next::Promise;
  union {
    [[no_unique_address]] State30 prior_;
    [[no_unique_address]] FLast f_;
  };

 public:
  Seq(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
      F10 f10, F11 f11, F12 f12, F13 f13, F14 f14, F15 f15, F16 f16, F17 f17,
      F18 f18, F19 f19, F20 f20, F21 f21, F22 f22, F23 f23, F24 f24, F25 f25,
      F26 f26, F27 f27, F28 f28, F29 f29, F30 f30, F31 f31)
      : prior_(std::move(f0), std::move(f1), std::move(f2), std::move(f3),
               std::move(f4), std::move(f5), std::move(f6), std::move(f7),
               std::move(f8), std::move(f9), std::move(f10), std::move(f11),
               std::move(f12), std::move(f13), std::move(f14), std::move(f15),
               std::move(f16), std::move(f17), std::move(f18), std::move(f19),
               std::move(f20), std::move(f21), std::move(f22), std::move(f23),
               std::move(f24), std::move(f25), std::move(f26), std::move(f27),
               std::move(f28), std::move(f29), std::move(f30), std::move(f31)) {
  }
  Seq& operator=(const Seq&) = delete;
  Seq(const Seq& other) {
    assert(other.state_ == 0);
    new (&prior_) State30(other.prior_);
  }
  Seq(Seq&& other) {
    assert(other.state_ == 0);
    new (&prior_) State30(std::move(other.prior_));
  }
  ~Seq() {
    switch (state_) {
      case 0:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.f);
        goto fin0;
      case 1:
        Destruct(
            &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                 .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                 .prior.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin1;
      case 2:
        Destruct(
            &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                 .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                 .prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin2;
      case 3:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin3;
      case 4:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin4;
      case 5:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.f);
        goto fin5;
      case 6:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.f);
        goto fin6;
      case 7:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.f);
        goto fin7;
      case 8:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.f);
        goto fin8;
      case 9:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.f);
        goto fin9;
      case 10:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.f);
        goto fin10;
      case 11:
        Destruct(
            &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                 .prior.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin11;
      case 12:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin12;
      case 13:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin13;
      case 14:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.prior.f);
        goto fin14;
      case 15:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.prior.f);
        goto fin15;
      case 16:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.prior.f);
        goto fin16;
      case 17:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.prior.f);
        goto fin17;
      case 18:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.prior.f);
        goto fin18;
      case 19:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.prior.f);
        goto fin19;
      case 20:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                      .prior.f);
        goto fin20;
      case 21:
        Destruct(
            &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin21;
      case 22:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin22;
      case 23:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.f);
        goto fin23;
      case 24:
        Destruct(&prior_.prior.prior.prior.prior.prior.prior.f);
        goto fin24;
      case 25:
        Destruct(&prior_.prior.prior.prior.prior.prior.f);
        goto fin25;
      case 26:
        Destruct(&prior_.prior.prior.prior.prior.f);
        goto fin26;
      case 27:
        Destruct(&prior_.prior.prior.prior.f);
        goto fin27;
      case 28:
        Destruct(&prior_.prior.prior.f);
        goto fin28;
      case 29:
        Destruct(&prior_.prior.f);
        goto fin29;
      case 30:
        Destruct(&prior_.f);
        goto fin30;
      case 31:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(
        &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
             .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
             .prior.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin1:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin2:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin3:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.next);
  fin4:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.next);
  fin5:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.next);
  fin6:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.next);
  fin7:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.next);
  fin8:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.next);
  fin9:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.next);
  fin10:
    Destruct(
        &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
             .prior.prior.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin11:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin12:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin13:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.prior.next);
  fin14:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.prior.next);
  fin15:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.prior.next);
  fin16:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.prior.next);
  fin17:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.prior.next);
  fin18:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.prior.next);
  fin19:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .prior.next);
  fin20:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.prior
                  .next);
  fin21:
    Destruct(
        &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin22:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.prior.next);
  fin23:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.prior.next);
  fin24:
    Destruct(&prior_.prior.prior.prior.prior.prior.prior.next);
  fin25:
    Destruct(&prior_.prior.prior.prior.prior.prior.next);
  fin26:
    Destruct(&prior_.prior.prior.prior.prior.next);
  fin27:
    Destruct(&prior_.prior.prior.prior.next);
  fin28:
    Destruct(&prior_.prior.prior.next);
  fin29:
    Destruct(&prior_.prior.next);
  fin30:
    Destruct(&prior_.next);
  }
  decltype(std::declval<typename State30::Next::Promise>()()) operator()() {
    switch (state_) {
      case 0:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.f))
          break;
        state_ = 1;
      case 1:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.f))
          break;
        state_ = 2;
      case 2:
        if (StepSeq(
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior,
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 3;
      case 3:
        if (StepSeq(
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior,
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 4;
      case 4:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 5;
      case 5:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 6;
      case 6:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 7;
      case 7:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.f))
          break;
        state_ = 8;
      case 8:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.f))
          break;
        state_ = 9;
      case 9:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.f))
          break;
        state_ = 10;
      case 10:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.f))
          break;
        state_ = 11;
      case 11:
        if (StepSeq(
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior,
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 12;
      case 12:
        if (StepSeq(
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.prior,
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior
                     .prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 13;
      case 13:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 14;
      case 14:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 15;
      case 15:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 16;
      case 16:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior.f))
          break;
        state_ = 17;
      case 17:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior.f))
          break;
        state_ = 18;
      case 18:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior.f))
          break;
        state_ = 19;
      case 19:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior.f))
          break;
        state_ = 20;
      case 20:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.prior
                         .prior.f))
          break;
        state_ = 21;
      case 21:
        if (StepSeq(
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.prior,
                &prior_.prior.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 22;
      case 22:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 23;
      case 23:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.prior.f))
          break;
        state_ = 24;
      case 24:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.prior.f))
          break;
        state_ = 25;
      case 25:
        if (StepSeq(&prior_.prior.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.prior.f))
          break;
        state_ = 26;
      case 26:
        if (StepSeq(&prior_.prior.prior.prior.prior,
                    &prior_.prior.prior.prior.f))
          break;
        state_ = 27;
      case 27:
        if (StepSeq(&prior_.prior.prior.prior, &prior_.prior.prior.f)) break;
        state_ = 28;
      case 28:
        if (StepSeq(&prior_.prior.prior, &prior_.prior.f)) break;
        state_ = 29;
      case 29:
        if (StepSeq(&prior_.prior, &prior_.f)) break;
        state_ = 30;
      case 30:
        if (StepSeq(&prior_, &f_)) break;
        state_ = 31;
      case 31:
        return f_();
    }
    return kPending;
  }
};
