/*
 * Copyright 2021 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Automatically generated by tools/codegen/core/gen_try_seq_switch.py
 */

template <typename F0, typename F1>
class TrySeq<F0, F1> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using FLast = typename State0::Next::Promise;
  union {
    [[no_unique_address]] State0 p_;
    [[no_unique_address]] FLast f_;
  };
  using Result =
      typename decltype(std::declval<typename State0::Next::Promise>()())::Type;
  Poll<Result> RunState0() {
    return RunState<Result>(&p_, &f_, [this]() {
      state_ = 1;
      return RunState1();
    });
  }
  Poll<Result> RunState1() { return f_(); }

 public:
  TrySeq(F0 f0, F1 f1) : p_(std::move(f0), std::move(f1)) {}
  TrySeq& operator=(const TrySeq&) = delete;
  TrySeq(const TrySeq& other) {
    assert(other.state_ == 0);
    new (&p_) State0(other.p_);
  }
  TrySeq(TrySeq&& other) {
    assert(other.state_ == 0);
    new (&p_) State0(std::move(other.p_));
  }
  ~TrySeq() {
    switch (state_) {
      case 0:
        Destruct(&p_.f);
        goto fin0;
      case 1:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(&p_.next);
  }
  Poll<Result> operator()() {
    switch (state_) {
      case 0:
        return RunState0();
      case 1:
        return RunState1();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2>
class TrySeq<F0, F1, F2> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using FLast = typename State1::Next::Promise;
  union {
    [[no_unique_address]] State1 p_;
    [[no_unique_address]] FLast f_;
  };
  using Result =
      typename decltype(std::declval<typename State1::Next::Promise>()())::Type;
  Poll<Result> RunState0() {
    return RunState<Result>(&p_.p, &p_.f, [this]() {
      state_ = 1;
      return RunState1();
    });
  }
  Poll<Result> RunState1() {
    return RunState<Result>(&p_, &f_, [this]() {
      state_ = 2;
      return RunState2();
    });
  }
  Poll<Result> RunState2() { return f_(); }

 public:
  TrySeq(F0 f0, F1 f1, F2 f2)
      : p_(std::move(f0), std::move(f1), std::move(f2)) {}
  TrySeq& operator=(const TrySeq&) = delete;
  TrySeq(const TrySeq& other) {
    assert(other.state_ == 0);
    new (&p_) State1(other.p_);
  }
  TrySeq(TrySeq&& other) {
    assert(other.state_ == 0);
    new (&p_) State1(std::move(other.p_));
  }
  ~TrySeq() {
    switch (state_) {
      case 0:
        Destruct(&p_.p.f);
        goto fin0;
      case 1:
        Destruct(&p_.f);
        goto fin1;
      case 2:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(&p_.p.next);
  fin1:
    Destruct(&p_.next);
  }
  Poll<Result> operator()() {
    switch (state_) {
      case 0:
        return RunState0();
      case 1:
        return RunState1();
      case 2:
        return RunState2();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2, typename F3>
class TrySeq<F0, F1, F2, F3> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using State2 = IntermediateState<State1, F3, F0, F1, F2>;
  using FLast = typename State2::Next::Promise;
  union {
    [[no_unique_address]] State2 p_;
    [[no_unique_address]] FLast f_;
  };
  using Result =
      typename decltype(std::declval<typename State2::Next::Promise>()())::Type;
  Poll<Result> RunState0() {
    return RunState<Result>(&p_.p.p, &p_.p.f, [this]() {
      state_ = 1;
      return RunState1();
    });
  }
  Poll<Result> RunState1() {
    return RunState<Result>(&p_.p, &p_.f, [this]() {
      state_ = 2;
      return RunState2();
    });
  }
  Poll<Result> RunState2() {
    return RunState<Result>(&p_, &f_, [this]() {
      state_ = 3;
      return RunState3();
    });
  }
  Poll<Result> RunState3() { return f_(); }

 public:
  TrySeq(F0 f0, F1 f1, F2 f2, F3 f3)
      : p_(std::move(f0), std::move(f1), std::move(f2), std::move(f3)) {}
  TrySeq& operator=(const TrySeq&) = delete;
  TrySeq(const TrySeq& other) {
    assert(other.state_ == 0);
    new (&p_) State2(other.p_);
  }
  TrySeq(TrySeq&& other) {
    assert(other.state_ == 0);
    new (&p_) State2(std::move(other.p_));
  }
  ~TrySeq() {
    switch (state_) {
      case 0:
        Destruct(&p_.p.p.f);
        goto fin0;
      case 1:
        Destruct(&p_.p.f);
        goto fin1;
      case 2:
        Destruct(&p_.f);
        goto fin2;
      case 3:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(&p_.p.p.next);
  fin1:
    Destruct(&p_.p.next);
  fin2:
    Destruct(&p_.next);
  }
  Poll<Result> operator()() {
    switch (state_) {
      case 0:
        return RunState0();
      case 1:
        return RunState1();
      case 2:
        return RunState2();
      case 3:
        return RunState3();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4>
class TrySeq<F0, F1, F2, F3, F4> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using State2 = IntermediateState<State1, F3, F0, F1, F2>;
  using State3 = IntermediateState<State2, F4, F0, F1, F2, F3>;
  using FLast = typename State3::Next::Promise;
  union {
    [[no_unique_address]] State3 p_;
    [[no_unique_address]] FLast f_;
  };
  using Result =
      typename decltype(std::declval<typename State3::Next::Promise>()())::Type;
  Poll<Result> RunState0() {
    return RunState<Result>(&p_.p.p.p, &p_.p.p.f, [this]() {
      state_ = 1;
      return RunState1();
    });
  }
  Poll<Result> RunState1() {
    return RunState<Result>(&p_.p.p, &p_.p.f, [this]() {
      state_ = 2;
      return RunState2();
    });
  }
  Poll<Result> RunState2() {
    return RunState<Result>(&p_.p, &p_.f, [this]() {
      state_ = 3;
      return RunState3();
    });
  }
  Poll<Result> RunState3() {
    return RunState<Result>(&p_, &f_, [this]() {
      state_ = 4;
      return RunState4();
    });
  }
  Poll<Result> RunState4() { return f_(); }

 public:
  TrySeq(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4)
      : p_(std::move(f0), std::move(f1), std::move(f2), std::move(f3),
           std::move(f4)) {}
  TrySeq& operator=(const TrySeq&) = delete;
  TrySeq(const TrySeq& other) {
    assert(other.state_ == 0);
    new (&p_) State3(other.p_);
  }
  TrySeq(TrySeq&& other) {
    assert(other.state_ == 0);
    new (&p_) State3(std::move(other.p_));
  }
  ~TrySeq() {
    switch (state_) {
      case 0:
        Destruct(&p_.p.p.p.f);
        goto fin0;
      case 1:
        Destruct(&p_.p.p.f);
        goto fin1;
      case 2:
        Destruct(&p_.p.f);
        goto fin2;
      case 3:
        Destruct(&p_.f);
        goto fin3;
      case 4:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(&p_.p.p.p.next);
  fin1:
    Destruct(&p_.p.p.next);
  fin2:
    Destruct(&p_.p.next);
  fin3:
    Destruct(&p_.next);
  }
  Poll<Result> operator()() {
    switch (state_) {
      case 0:
        return RunState0();
      case 1:
        return RunState1();
      case 2:
        return RunState2();
      case 3:
        return RunState3();
      case 4:
        return RunState4();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5>
class TrySeq<F0, F1, F2, F3, F4, F5> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using State2 = IntermediateState<State1, F3, F0, F1, F2>;
  using State3 = IntermediateState<State2, F4, F0, F1, F2, F3>;
  using State4 = IntermediateState<State3, F5, F0, F1, F2, F3, F4>;
  using FLast = typename State4::Next::Promise;
  union {
    [[no_unique_address]] State4 p_;
    [[no_unique_address]] FLast f_;
  };
  using Result =
      typename decltype(std::declval<typename State4::Next::Promise>()())::Type;
  Poll<Result> RunState0() {
    return RunState<Result>(&p_.p.p.p.p, &p_.p.p.p.f, [this]() {
      state_ = 1;
      return RunState1();
    });
  }
  Poll<Result> RunState1() {
    return RunState<Result>(&p_.p.p.p, &p_.p.p.f, [this]() {
      state_ = 2;
      return RunState2();
    });
  }
  Poll<Result> RunState2() {
    return RunState<Result>(&p_.p.p, &p_.p.f, [this]() {
      state_ = 3;
      return RunState3();
    });
  }
  Poll<Result> RunState3() {
    return RunState<Result>(&p_.p, &p_.f, [this]() {
      state_ = 4;
      return RunState4();
    });
  }
  Poll<Result> RunState4() {
    return RunState<Result>(&p_, &f_, [this]() {
      state_ = 5;
      return RunState5();
    });
  }
  Poll<Result> RunState5() { return f_(); }

 public:
  TrySeq(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5)
      : p_(std::move(f0), std::move(f1), std::move(f2), std::move(f3),
           std::move(f4), std::move(f5)) {}
  TrySeq& operator=(const TrySeq&) = delete;
  TrySeq(const TrySeq& other) {
    assert(other.state_ == 0);
    new (&p_) State4(other.p_);
  }
  TrySeq(TrySeq&& other) {
    assert(other.state_ == 0);
    new (&p_) State4(std::move(other.p_));
  }
  ~TrySeq() {
    switch (state_) {
      case 0:
        Destruct(&p_.p.p.p.p.f);
        goto fin0;
      case 1:
        Destruct(&p_.p.p.p.f);
        goto fin1;
      case 2:
        Destruct(&p_.p.p.f);
        goto fin2;
      case 3:
        Destruct(&p_.p.f);
        goto fin3;
      case 4:
        Destruct(&p_.f);
        goto fin4;
      case 5:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(&p_.p.p.p.p.next);
  fin1:
    Destruct(&p_.p.p.p.next);
  fin2:
    Destruct(&p_.p.p.next);
  fin3:
    Destruct(&p_.p.next);
  fin4:
    Destruct(&p_.next);
  }
  Poll<Result> operator()() {
    switch (state_) {
      case 0:
        return RunState0();
      case 1:
        return RunState1();
      case 2:
        return RunState2();
      case 3:
        return RunState3();
      case 4:
        return RunState4();
      case 5:
        return RunState5();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6>
class TrySeq<F0, F1, F2, F3, F4, F5, F6> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using State2 = IntermediateState<State1, F3, F0, F1, F2>;
  using State3 = IntermediateState<State2, F4, F0, F1, F2, F3>;
  using State4 = IntermediateState<State3, F5, F0, F1, F2, F3, F4>;
  using State5 = IntermediateState<State4, F6, F0, F1, F2, F3, F4, F5>;
  using FLast = typename State5::Next::Promise;
  union {
    [[no_unique_address]] State5 p_;
    [[no_unique_address]] FLast f_;
  };
  using Result =
      typename decltype(std::declval<typename State5::Next::Promise>()())::Type;
  Poll<Result> RunState0() {
    return RunState<Result>(&p_.p.p.p.p.p, &p_.p.p.p.p.f, [this]() {
      state_ = 1;
      return RunState1();
    });
  }
  Poll<Result> RunState1() {
    return RunState<Result>(&p_.p.p.p.p, &p_.p.p.p.f, [this]() {
      state_ = 2;
      return RunState2();
    });
  }
  Poll<Result> RunState2() {
    return RunState<Result>(&p_.p.p.p, &p_.p.p.f, [this]() {
      state_ = 3;
      return RunState3();
    });
  }
  Poll<Result> RunState3() {
    return RunState<Result>(&p_.p.p, &p_.p.f, [this]() {
      state_ = 4;
      return RunState4();
    });
  }
  Poll<Result> RunState4() {
    return RunState<Result>(&p_.p, &p_.f, [this]() {
      state_ = 5;
      return RunState5();
    });
  }
  Poll<Result> RunState5() {
    return RunState<Result>(&p_, &f_, [this]() {
      state_ = 6;
      return RunState6();
    });
  }
  Poll<Result> RunState6() { return f_(); }

 public:
  TrySeq(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6)
      : p_(std::move(f0), std::move(f1), std::move(f2), std::move(f3),
           std::move(f4), std::move(f5), std::move(f6)) {}
  TrySeq& operator=(const TrySeq&) = delete;
  TrySeq(const TrySeq& other) {
    assert(other.state_ == 0);
    new (&p_) State5(other.p_);
  }
  TrySeq(TrySeq&& other) {
    assert(other.state_ == 0);
    new (&p_) State5(std::move(other.p_));
  }
  ~TrySeq() {
    switch (state_) {
      case 0:
        Destruct(&p_.p.p.p.p.p.f);
        goto fin0;
      case 1:
        Destruct(&p_.p.p.p.p.f);
        goto fin1;
      case 2:
        Destruct(&p_.p.p.p.f);
        goto fin2;
      case 3:
        Destruct(&p_.p.p.f);
        goto fin3;
      case 4:
        Destruct(&p_.p.f);
        goto fin4;
      case 5:
        Destruct(&p_.f);
        goto fin5;
      case 6:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(&p_.p.p.p.p.p.next);
  fin1:
    Destruct(&p_.p.p.p.p.next);
  fin2:
    Destruct(&p_.p.p.p.next);
  fin3:
    Destruct(&p_.p.p.next);
  fin4:
    Destruct(&p_.p.next);
  fin5:
    Destruct(&p_.next);
  }
  Poll<Result> operator()() {
    switch (state_) {
      case 0:
        return RunState0();
      case 1:
        return RunState1();
      case 2:
        return RunState2();
      case 3:
        return RunState3();
      case 4:
        return RunState4();
      case 5:
        return RunState5();
      case 6:
        return RunState6();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7>
class TrySeq<F0, F1, F2, F3, F4, F5, F6, F7> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using State2 = IntermediateState<State1, F3, F0, F1, F2>;
  using State3 = IntermediateState<State2, F4, F0, F1, F2, F3>;
  using State4 = IntermediateState<State3, F5, F0, F1, F2, F3, F4>;
  using State5 = IntermediateState<State4, F6, F0, F1, F2, F3, F4, F5>;
  using State6 = IntermediateState<State5, F7, F0, F1, F2, F3, F4, F5, F6>;
  using FLast = typename State6::Next::Promise;
  union {
    [[no_unique_address]] State6 p_;
    [[no_unique_address]] FLast f_;
  };
  using Result =
      typename decltype(std::declval<typename State6::Next::Promise>()())::Type;
  Poll<Result> RunState0() {
    return RunState<Result>(&p_.p.p.p.p.p.p, &p_.p.p.p.p.p.f, [this]() {
      state_ = 1;
      return RunState1();
    });
  }
  Poll<Result> RunState1() {
    return RunState<Result>(&p_.p.p.p.p.p, &p_.p.p.p.p.f, [this]() {
      state_ = 2;
      return RunState2();
    });
  }
  Poll<Result> RunState2() {
    return RunState<Result>(&p_.p.p.p.p, &p_.p.p.p.f, [this]() {
      state_ = 3;
      return RunState3();
    });
  }
  Poll<Result> RunState3() {
    return RunState<Result>(&p_.p.p.p, &p_.p.p.f, [this]() {
      state_ = 4;
      return RunState4();
    });
  }
  Poll<Result> RunState4() {
    return RunState<Result>(&p_.p.p, &p_.p.f, [this]() {
      state_ = 5;
      return RunState5();
    });
  }
  Poll<Result> RunState5() {
    return RunState<Result>(&p_.p, &p_.f, [this]() {
      state_ = 6;
      return RunState6();
    });
  }
  Poll<Result> RunState6() {
    return RunState<Result>(&p_, &f_, [this]() {
      state_ = 7;
      return RunState7();
    });
  }
  Poll<Result> RunState7() { return f_(); }

 public:
  TrySeq(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7)
      : p_(std::move(f0), std::move(f1), std::move(f2), std::move(f3),
           std::move(f4), std::move(f5), std::move(f6), std::move(f7)) {}
  TrySeq& operator=(const TrySeq&) = delete;
  TrySeq(const TrySeq& other) {
    assert(other.state_ == 0);
    new (&p_) State6(other.p_);
  }
  TrySeq(TrySeq&& other) {
    assert(other.state_ == 0);
    new (&p_) State6(std::move(other.p_));
  }
  ~TrySeq() {
    switch (state_) {
      case 0:
        Destruct(&p_.p.p.p.p.p.p.f);
        goto fin0;
      case 1:
        Destruct(&p_.p.p.p.p.p.f);
        goto fin1;
      case 2:
        Destruct(&p_.p.p.p.p.f);
        goto fin2;
      case 3:
        Destruct(&p_.p.p.p.f);
        goto fin3;
      case 4:
        Destruct(&p_.p.p.f);
        goto fin4;
      case 5:
        Destruct(&p_.p.f);
        goto fin5;
      case 6:
        Destruct(&p_.f);
        goto fin6;
      case 7:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(&p_.p.p.p.p.p.p.next);
  fin1:
    Destruct(&p_.p.p.p.p.p.next);
  fin2:
    Destruct(&p_.p.p.p.p.next);
  fin3:
    Destruct(&p_.p.p.p.next);
  fin4:
    Destruct(&p_.p.p.next);
  fin5:
    Destruct(&p_.p.next);
  fin6:
    Destruct(&p_.next);
  }
  Poll<Result> operator()() {
    switch (state_) {
      case 0:
        return RunState0();
      case 1:
        return RunState1();
      case 2:
        return RunState2();
      case 3:
        return RunState3();
      case 4:
        return RunState4();
      case 5:
        return RunState5();
      case 6:
        return RunState6();
      case 7:
        return RunState7();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8>
class TrySeq<F0, F1, F2, F3, F4, F5, F6, F7, F8> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using State2 = IntermediateState<State1, F3, F0, F1, F2>;
  using State3 = IntermediateState<State2, F4, F0, F1, F2, F3>;
  using State4 = IntermediateState<State3, F5, F0, F1, F2, F3, F4>;
  using State5 = IntermediateState<State4, F6, F0, F1, F2, F3, F4, F5>;
  using State6 = IntermediateState<State5, F7, F0, F1, F2, F3, F4, F5, F6>;
  using State7 = IntermediateState<State6, F8, F0, F1, F2, F3, F4, F5, F6, F7>;
  using FLast = typename State7::Next::Promise;
  union {
    [[no_unique_address]] State7 p_;
    [[no_unique_address]] FLast f_;
  };
  using Result =
      typename decltype(std::declval<typename State7::Next::Promise>()())::Type;
  Poll<Result> RunState0() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.f, [this]() {
      state_ = 1;
      return RunState1();
    });
  }
  Poll<Result> RunState1() {
    return RunState<Result>(&p_.p.p.p.p.p.p, &p_.p.p.p.p.p.f, [this]() {
      state_ = 2;
      return RunState2();
    });
  }
  Poll<Result> RunState2() {
    return RunState<Result>(&p_.p.p.p.p.p, &p_.p.p.p.p.f, [this]() {
      state_ = 3;
      return RunState3();
    });
  }
  Poll<Result> RunState3() {
    return RunState<Result>(&p_.p.p.p.p, &p_.p.p.p.f, [this]() {
      state_ = 4;
      return RunState4();
    });
  }
  Poll<Result> RunState4() {
    return RunState<Result>(&p_.p.p.p, &p_.p.p.f, [this]() {
      state_ = 5;
      return RunState5();
    });
  }
  Poll<Result> RunState5() {
    return RunState<Result>(&p_.p.p, &p_.p.f, [this]() {
      state_ = 6;
      return RunState6();
    });
  }
  Poll<Result> RunState6() {
    return RunState<Result>(&p_.p, &p_.f, [this]() {
      state_ = 7;
      return RunState7();
    });
  }
  Poll<Result> RunState7() {
    return RunState<Result>(&p_, &f_, [this]() {
      state_ = 8;
      return RunState8();
    });
  }
  Poll<Result> RunState8() { return f_(); }

 public:
  TrySeq(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8)
      : p_(std::move(f0), std::move(f1), std::move(f2), std::move(f3),
           std::move(f4), std::move(f5), std::move(f6), std::move(f7),
           std::move(f8)) {}
  TrySeq& operator=(const TrySeq&) = delete;
  TrySeq(const TrySeq& other) {
    assert(other.state_ == 0);
    new (&p_) State7(other.p_);
  }
  TrySeq(TrySeq&& other) {
    assert(other.state_ == 0);
    new (&p_) State7(std::move(other.p_));
  }
  ~TrySeq() {
    switch (state_) {
      case 0:
        Destruct(&p_.p.p.p.p.p.p.p.f);
        goto fin0;
      case 1:
        Destruct(&p_.p.p.p.p.p.p.f);
        goto fin1;
      case 2:
        Destruct(&p_.p.p.p.p.p.f);
        goto fin2;
      case 3:
        Destruct(&p_.p.p.p.p.f);
        goto fin3;
      case 4:
        Destruct(&p_.p.p.p.f);
        goto fin4;
      case 5:
        Destruct(&p_.p.p.f);
        goto fin5;
      case 6:
        Destruct(&p_.p.f);
        goto fin6;
      case 7:
        Destruct(&p_.f);
        goto fin7;
      case 8:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(&p_.p.p.p.p.p.p.p.next);
  fin1:
    Destruct(&p_.p.p.p.p.p.p.next);
  fin2:
    Destruct(&p_.p.p.p.p.p.next);
  fin3:
    Destruct(&p_.p.p.p.p.next);
  fin4:
    Destruct(&p_.p.p.p.next);
  fin5:
    Destruct(&p_.p.p.next);
  fin6:
    Destruct(&p_.p.next);
  fin7:
    Destruct(&p_.next);
  }
  Poll<Result> operator()() {
    switch (state_) {
      case 0:
        return RunState0();
      case 1:
        return RunState1();
      case 2:
        return RunState2();
      case 3:
        return RunState3();
      case 4:
        return RunState4();
      case 5:
        return RunState5();
      case 6:
        return RunState6();
      case 7:
        return RunState7();
      case 8:
        return RunState8();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9>
class TrySeq<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using State2 = IntermediateState<State1, F3, F0, F1, F2>;
  using State3 = IntermediateState<State2, F4, F0, F1, F2, F3>;
  using State4 = IntermediateState<State3, F5, F0, F1, F2, F3, F4>;
  using State5 = IntermediateState<State4, F6, F0, F1, F2, F3, F4, F5>;
  using State6 = IntermediateState<State5, F7, F0, F1, F2, F3, F4, F5, F6>;
  using State7 = IntermediateState<State6, F8, F0, F1, F2, F3, F4, F5, F6, F7>;
  using State8 =
      IntermediateState<State7, F9, F0, F1, F2, F3, F4, F5, F6, F7, F8>;
  using FLast = typename State8::Next::Promise;
  union {
    [[no_unique_address]] State8 p_;
    [[no_unique_address]] FLast f_;
  };
  using Result =
      typename decltype(std::declval<typename State8::Next::Promise>()())::Type;
  Poll<Result> RunState0() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.f, [this]() {
      state_ = 1;
      return RunState1();
    });
  }
  Poll<Result> RunState1() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.f, [this]() {
      state_ = 2;
      return RunState2();
    });
  }
  Poll<Result> RunState2() {
    return RunState<Result>(&p_.p.p.p.p.p.p, &p_.p.p.p.p.p.f, [this]() {
      state_ = 3;
      return RunState3();
    });
  }
  Poll<Result> RunState3() {
    return RunState<Result>(&p_.p.p.p.p.p, &p_.p.p.p.p.f, [this]() {
      state_ = 4;
      return RunState4();
    });
  }
  Poll<Result> RunState4() {
    return RunState<Result>(&p_.p.p.p.p, &p_.p.p.p.f, [this]() {
      state_ = 5;
      return RunState5();
    });
  }
  Poll<Result> RunState5() {
    return RunState<Result>(&p_.p.p.p, &p_.p.p.f, [this]() {
      state_ = 6;
      return RunState6();
    });
  }
  Poll<Result> RunState6() {
    return RunState<Result>(&p_.p.p, &p_.p.f, [this]() {
      state_ = 7;
      return RunState7();
    });
  }
  Poll<Result> RunState7() {
    return RunState<Result>(&p_.p, &p_.f, [this]() {
      state_ = 8;
      return RunState8();
    });
  }
  Poll<Result> RunState8() {
    return RunState<Result>(&p_, &f_, [this]() {
      state_ = 9;
      return RunState9();
    });
  }
  Poll<Result> RunState9() { return f_(); }

 public:
  TrySeq(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9)
      : p_(std::move(f0), std::move(f1), std::move(f2), std::move(f3),
           std::move(f4), std::move(f5), std::move(f6), std::move(f7),
           std::move(f8), std::move(f9)) {}
  TrySeq& operator=(const TrySeq&) = delete;
  TrySeq(const TrySeq& other) {
    assert(other.state_ == 0);
    new (&p_) State8(other.p_);
  }
  TrySeq(TrySeq&& other) {
    assert(other.state_ == 0);
    new (&p_) State8(std::move(other.p_));
  }
  ~TrySeq() {
    switch (state_) {
      case 0:
        Destruct(&p_.p.p.p.p.p.p.p.p.f);
        goto fin0;
      case 1:
        Destruct(&p_.p.p.p.p.p.p.p.f);
        goto fin1;
      case 2:
        Destruct(&p_.p.p.p.p.p.p.f);
        goto fin2;
      case 3:
        Destruct(&p_.p.p.p.p.p.f);
        goto fin3;
      case 4:
        Destruct(&p_.p.p.p.p.f);
        goto fin4;
      case 5:
        Destruct(&p_.p.p.p.f);
        goto fin5;
      case 6:
        Destruct(&p_.p.p.f);
        goto fin6;
      case 7:
        Destruct(&p_.p.f);
        goto fin7;
      case 8:
        Destruct(&p_.f);
        goto fin8;
      case 9:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(&p_.p.p.p.p.p.p.p.p.next);
  fin1:
    Destruct(&p_.p.p.p.p.p.p.p.next);
  fin2:
    Destruct(&p_.p.p.p.p.p.p.next);
  fin3:
    Destruct(&p_.p.p.p.p.p.next);
  fin4:
    Destruct(&p_.p.p.p.p.next);
  fin5:
    Destruct(&p_.p.p.p.next);
  fin6:
    Destruct(&p_.p.p.next);
  fin7:
    Destruct(&p_.p.next);
  fin8:
    Destruct(&p_.next);
  }
  Poll<Result> operator()() {
    switch (state_) {
      case 0:
        return RunState0();
      case 1:
        return RunState1();
      case 2:
        return RunState2();
      case 3:
        return RunState3();
      case 4:
        return RunState4();
      case 5:
        return RunState5();
      case 6:
        return RunState6();
      case 7:
        return RunState7();
      case 8:
        return RunState8();
      case 9:
        return RunState9();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10>
class TrySeq<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using State2 = IntermediateState<State1, F3, F0, F1, F2>;
  using State3 = IntermediateState<State2, F4, F0, F1, F2, F3>;
  using State4 = IntermediateState<State3, F5, F0, F1, F2, F3, F4>;
  using State5 = IntermediateState<State4, F6, F0, F1, F2, F3, F4, F5>;
  using State6 = IntermediateState<State5, F7, F0, F1, F2, F3, F4, F5, F6>;
  using State7 = IntermediateState<State6, F8, F0, F1, F2, F3, F4, F5, F6, F7>;
  using State8 =
      IntermediateState<State7, F9, F0, F1, F2, F3, F4, F5, F6, F7, F8>;
  using State9 =
      IntermediateState<State8, F10, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9>;
  using FLast = typename State9::Next::Promise;
  union {
    [[no_unique_address]] State9 p_;
    [[no_unique_address]] FLast f_;
  };
  using Result =
      typename decltype(std::declval<typename State9::Next::Promise>()())::Type;
  Poll<Result> RunState0() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 1;
                              return RunState1();
                            });
  }
  Poll<Result> RunState1() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.f, [this]() {
      state_ = 2;
      return RunState2();
    });
  }
  Poll<Result> RunState2() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.f, [this]() {
      state_ = 3;
      return RunState3();
    });
  }
  Poll<Result> RunState3() {
    return RunState<Result>(&p_.p.p.p.p.p.p, &p_.p.p.p.p.p.f, [this]() {
      state_ = 4;
      return RunState4();
    });
  }
  Poll<Result> RunState4() {
    return RunState<Result>(&p_.p.p.p.p.p, &p_.p.p.p.p.f, [this]() {
      state_ = 5;
      return RunState5();
    });
  }
  Poll<Result> RunState5() {
    return RunState<Result>(&p_.p.p.p.p, &p_.p.p.p.f, [this]() {
      state_ = 6;
      return RunState6();
    });
  }
  Poll<Result> RunState6() {
    return RunState<Result>(&p_.p.p.p, &p_.p.p.f, [this]() {
      state_ = 7;
      return RunState7();
    });
  }
  Poll<Result> RunState7() {
    return RunState<Result>(&p_.p.p, &p_.p.f, [this]() {
      state_ = 8;
      return RunState8();
    });
  }
  Poll<Result> RunState8() {
    return RunState<Result>(&p_.p, &p_.f, [this]() {
      state_ = 9;
      return RunState9();
    });
  }
  Poll<Result> RunState9() {
    return RunState<Result>(&p_, &f_, [this]() {
      state_ = 10;
      return RunState10();
    });
  }
  Poll<Result> RunState10() { return f_(); }

 public:
  TrySeq(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
         F10 f10)
      : p_(std::move(f0), std::move(f1), std::move(f2), std::move(f3),
           std::move(f4), std::move(f5), std::move(f6), std::move(f7),
           std::move(f8), std::move(f9), std::move(f10)) {}
  TrySeq& operator=(const TrySeq&) = delete;
  TrySeq(const TrySeq& other) {
    assert(other.state_ == 0);
    new (&p_) State9(other.p_);
  }
  TrySeq(TrySeq&& other) {
    assert(other.state_ == 0);
    new (&p_) State9(std::move(other.p_));
  }
  ~TrySeq() {
    switch (state_) {
      case 0:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.f);
        goto fin0;
      case 1:
        Destruct(&p_.p.p.p.p.p.p.p.p.f);
        goto fin1;
      case 2:
        Destruct(&p_.p.p.p.p.p.p.p.f);
        goto fin2;
      case 3:
        Destruct(&p_.p.p.p.p.p.p.f);
        goto fin3;
      case 4:
        Destruct(&p_.p.p.p.p.p.f);
        goto fin4;
      case 5:
        Destruct(&p_.p.p.p.p.f);
        goto fin5;
      case 6:
        Destruct(&p_.p.p.p.f);
        goto fin6;
      case 7:
        Destruct(&p_.p.p.f);
        goto fin7;
      case 8:
        Destruct(&p_.p.f);
        goto fin8;
      case 9:
        Destruct(&p_.f);
        goto fin9;
      case 10:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.next);
  fin1:
    Destruct(&p_.p.p.p.p.p.p.p.p.next);
  fin2:
    Destruct(&p_.p.p.p.p.p.p.p.next);
  fin3:
    Destruct(&p_.p.p.p.p.p.p.next);
  fin4:
    Destruct(&p_.p.p.p.p.p.next);
  fin5:
    Destruct(&p_.p.p.p.p.next);
  fin6:
    Destruct(&p_.p.p.p.next);
  fin7:
    Destruct(&p_.p.p.next);
  fin8:
    Destruct(&p_.p.next);
  fin9:
    Destruct(&p_.next);
  }
  Poll<Result> operator()() {
    switch (state_) {
      case 0:
        return RunState0();
      case 1:
        return RunState1();
      case 2:
        return RunState2();
      case 3:
        return RunState3();
      case 4:
        return RunState4();
      case 5:
        return RunState5();
      case 6:
        return RunState6();
      case 7:
        return RunState7();
      case 8:
        return RunState8();
      case 9:
        return RunState9();
      case 10:
        return RunState10();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11>
class TrySeq<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using State2 = IntermediateState<State1, F3, F0, F1, F2>;
  using State3 = IntermediateState<State2, F4, F0, F1, F2, F3>;
  using State4 = IntermediateState<State3, F5, F0, F1, F2, F3, F4>;
  using State5 = IntermediateState<State4, F6, F0, F1, F2, F3, F4, F5>;
  using State6 = IntermediateState<State5, F7, F0, F1, F2, F3, F4, F5, F6>;
  using State7 = IntermediateState<State6, F8, F0, F1, F2, F3, F4, F5, F6, F7>;
  using State8 =
      IntermediateState<State7, F9, F0, F1, F2, F3, F4, F5, F6, F7, F8>;
  using State9 =
      IntermediateState<State8, F10, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9>;
  using State10 = IntermediateState<State9, F11, F0, F1, F2, F3, F4, F5, F6, F7,
                                    F8, F9, F10>;
  using FLast = typename State10::Next::Promise;
  union {
    [[no_unique_address]] State10 p_;
    [[no_unique_address]] FLast f_;
  };
  using Result = typename decltype(
      std::declval<typename State10::Next::Promise>()())::Type;
  Poll<Result> RunState0() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 1;
                              return RunState1();
                            });
  }
  Poll<Result> RunState1() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 2;
                              return RunState2();
                            });
  }
  Poll<Result> RunState2() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.f, [this]() {
      state_ = 3;
      return RunState3();
    });
  }
  Poll<Result> RunState3() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.f, [this]() {
      state_ = 4;
      return RunState4();
    });
  }
  Poll<Result> RunState4() {
    return RunState<Result>(&p_.p.p.p.p.p.p, &p_.p.p.p.p.p.f, [this]() {
      state_ = 5;
      return RunState5();
    });
  }
  Poll<Result> RunState5() {
    return RunState<Result>(&p_.p.p.p.p.p, &p_.p.p.p.p.f, [this]() {
      state_ = 6;
      return RunState6();
    });
  }
  Poll<Result> RunState6() {
    return RunState<Result>(&p_.p.p.p.p, &p_.p.p.p.f, [this]() {
      state_ = 7;
      return RunState7();
    });
  }
  Poll<Result> RunState7() {
    return RunState<Result>(&p_.p.p.p, &p_.p.p.f, [this]() {
      state_ = 8;
      return RunState8();
    });
  }
  Poll<Result> RunState8() {
    return RunState<Result>(&p_.p.p, &p_.p.f, [this]() {
      state_ = 9;
      return RunState9();
    });
  }
  Poll<Result> RunState9() {
    return RunState<Result>(&p_.p, &p_.f, [this]() {
      state_ = 10;
      return RunState10();
    });
  }
  Poll<Result> RunState10() {
    return RunState<Result>(&p_, &f_, [this]() {
      state_ = 11;
      return RunState11();
    });
  }
  Poll<Result> RunState11() { return f_(); }

 public:
  TrySeq(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
         F10 f10, F11 f11)
      : p_(std::move(f0), std::move(f1), std::move(f2), std::move(f3),
           std::move(f4), std::move(f5), std::move(f6), std::move(f7),
           std::move(f8), std::move(f9), std::move(f10), std::move(f11)) {}
  TrySeq& operator=(const TrySeq&) = delete;
  TrySeq(const TrySeq& other) {
    assert(other.state_ == 0);
    new (&p_) State10(other.p_);
  }
  TrySeq(TrySeq&& other) {
    assert(other.state_ == 0);
    new (&p_) State10(std::move(other.p_));
  }
  ~TrySeq() {
    switch (state_) {
      case 0:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.f);
        goto fin0;
      case 1:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.f);
        goto fin1;
      case 2:
        Destruct(&p_.p.p.p.p.p.p.p.p.f);
        goto fin2;
      case 3:
        Destruct(&p_.p.p.p.p.p.p.p.f);
        goto fin3;
      case 4:
        Destruct(&p_.p.p.p.p.p.p.f);
        goto fin4;
      case 5:
        Destruct(&p_.p.p.p.p.p.f);
        goto fin5;
      case 6:
        Destruct(&p_.p.p.p.p.f);
        goto fin6;
      case 7:
        Destruct(&p_.p.p.p.f);
        goto fin7;
      case 8:
        Destruct(&p_.p.p.f);
        goto fin8;
      case 9:
        Destruct(&p_.p.f);
        goto fin9;
      case 10:
        Destruct(&p_.f);
        goto fin10;
      case 11:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.next);
  fin1:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.next);
  fin2:
    Destruct(&p_.p.p.p.p.p.p.p.p.next);
  fin3:
    Destruct(&p_.p.p.p.p.p.p.p.next);
  fin4:
    Destruct(&p_.p.p.p.p.p.p.next);
  fin5:
    Destruct(&p_.p.p.p.p.p.next);
  fin6:
    Destruct(&p_.p.p.p.p.next);
  fin7:
    Destruct(&p_.p.p.p.next);
  fin8:
    Destruct(&p_.p.p.next);
  fin9:
    Destruct(&p_.p.next);
  fin10:
    Destruct(&p_.next);
  }
  Poll<Result> operator()() {
    switch (state_) {
      case 0:
        return RunState0();
      case 1:
        return RunState1();
      case 2:
        return RunState2();
      case 3:
        return RunState3();
      case 4:
        return RunState4();
      case 5:
        return RunState5();
      case 6:
        return RunState6();
      case 7:
        return RunState7();
      case 8:
        return RunState8();
      case 9:
        return RunState9();
      case 10:
        return RunState10();
      case 11:
        return RunState11();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12>
class TrySeq<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using State2 = IntermediateState<State1, F3, F0, F1, F2>;
  using State3 = IntermediateState<State2, F4, F0, F1, F2, F3>;
  using State4 = IntermediateState<State3, F5, F0, F1, F2, F3, F4>;
  using State5 = IntermediateState<State4, F6, F0, F1, F2, F3, F4, F5>;
  using State6 = IntermediateState<State5, F7, F0, F1, F2, F3, F4, F5, F6>;
  using State7 = IntermediateState<State6, F8, F0, F1, F2, F3, F4, F5, F6, F7>;
  using State8 =
      IntermediateState<State7, F9, F0, F1, F2, F3, F4, F5, F6, F7, F8>;
  using State9 =
      IntermediateState<State8, F10, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9>;
  using State10 = IntermediateState<State9, F11, F0, F1, F2, F3, F4, F5, F6, F7,
                                    F8, F9, F10>;
  using State11 = IntermediateState<State10, F12, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11>;
  using FLast = typename State11::Next::Promise;
  union {
    [[no_unique_address]] State11 p_;
    [[no_unique_address]] FLast f_;
  };
  using Result = typename decltype(
      std::declval<typename State11::Next::Promise>()())::Type;
  Poll<Result> RunState0() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 1;
                              return RunState1();
                            });
  }
  Poll<Result> RunState1() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 2;
                              return RunState2();
                            });
  }
  Poll<Result> RunState2() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 3;
                              return RunState3();
                            });
  }
  Poll<Result> RunState3() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.f, [this]() {
      state_ = 4;
      return RunState4();
    });
  }
  Poll<Result> RunState4() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.f, [this]() {
      state_ = 5;
      return RunState5();
    });
  }
  Poll<Result> RunState5() {
    return RunState<Result>(&p_.p.p.p.p.p.p, &p_.p.p.p.p.p.f, [this]() {
      state_ = 6;
      return RunState6();
    });
  }
  Poll<Result> RunState6() {
    return RunState<Result>(&p_.p.p.p.p.p, &p_.p.p.p.p.f, [this]() {
      state_ = 7;
      return RunState7();
    });
  }
  Poll<Result> RunState7() {
    return RunState<Result>(&p_.p.p.p.p, &p_.p.p.p.f, [this]() {
      state_ = 8;
      return RunState8();
    });
  }
  Poll<Result> RunState8() {
    return RunState<Result>(&p_.p.p.p, &p_.p.p.f, [this]() {
      state_ = 9;
      return RunState9();
    });
  }
  Poll<Result> RunState9() {
    return RunState<Result>(&p_.p.p, &p_.p.f, [this]() {
      state_ = 10;
      return RunState10();
    });
  }
  Poll<Result> RunState10() {
    return RunState<Result>(&p_.p, &p_.f, [this]() {
      state_ = 11;
      return RunState11();
    });
  }
  Poll<Result> RunState11() {
    return RunState<Result>(&p_, &f_, [this]() {
      state_ = 12;
      return RunState12();
    });
  }
  Poll<Result> RunState12() { return f_(); }

 public:
  TrySeq(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
         F10 f10, F11 f11, F12 f12)
      : p_(std::move(f0), std::move(f1), std::move(f2), std::move(f3),
           std::move(f4), std::move(f5), std::move(f6), std::move(f7),
           std::move(f8), std::move(f9), std::move(f10), std::move(f11),
           std::move(f12)) {}
  TrySeq& operator=(const TrySeq&) = delete;
  TrySeq(const TrySeq& other) {
    assert(other.state_ == 0);
    new (&p_) State11(other.p_);
  }
  TrySeq(TrySeq&& other) {
    assert(other.state_ == 0);
    new (&p_) State11(std::move(other.p_));
  }
  ~TrySeq() {
    switch (state_) {
      case 0:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin0;
      case 1:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.f);
        goto fin1;
      case 2:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.f);
        goto fin2;
      case 3:
        Destruct(&p_.p.p.p.p.p.p.p.p.f);
        goto fin3;
      case 4:
        Destruct(&p_.p.p.p.p.p.p.p.f);
        goto fin4;
      case 5:
        Destruct(&p_.p.p.p.p.p.p.f);
        goto fin5;
      case 6:
        Destruct(&p_.p.p.p.p.p.f);
        goto fin6;
      case 7:
        Destruct(&p_.p.p.p.p.f);
        goto fin7;
      case 8:
        Destruct(&p_.p.p.p.f);
        goto fin8;
      case 9:
        Destruct(&p_.p.p.f);
        goto fin9;
      case 10:
        Destruct(&p_.p.f);
        goto fin10;
      case 11:
        Destruct(&p_.f);
        goto fin11;
      case 12:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.next);
  fin1:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.next);
  fin2:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.next);
  fin3:
    Destruct(&p_.p.p.p.p.p.p.p.p.next);
  fin4:
    Destruct(&p_.p.p.p.p.p.p.p.next);
  fin5:
    Destruct(&p_.p.p.p.p.p.p.next);
  fin6:
    Destruct(&p_.p.p.p.p.p.next);
  fin7:
    Destruct(&p_.p.p.p.p.next);
  fin8:
    Destruct(&p_.p.p.p.next);
  fin9:
    Destruct(&p_.p.p.next);
  fin10:
    Destruct(&p_.p.next);
  fin11:
    Destruct(&p_.next);
  }
  Poll<Result> operator()() {
    switch (state_) {
      case 0:
        return RunState0();
      case 1:
        return RunState1();
      case 2:
        return RunState2();
      case 3:
        return RunState3();
      case 4:
        return RunState4();
      case 5:
        return RunState5();
      case 6:
        return RunState6();
      case 7:
        return RunState7();
      case 8:
        return RunState8();
      case 9:
        return RunState9();
      case 10:
        return RunState10();
      case 11:
        return RunState11();
      case 12:
        return RunState12();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12, typename F13>
class TrySeq<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using State2 = IntermediateState<State1, F3, F0, F1, F2>;
  using State3 = IntermediateState<State2, F4, F0, F1, F2, F3>;
  using State4 = IntermediateState<State3, F5, F0, F1, F2, F3, F4>;
  using State5 = IntermediateState<State4, F6, F0, F1, F2, F3, F4, F5>;
  using State6 = IntermediateState<State5, F7, F0, F1, F2, F3, F4, F5, F6>;
  using State7 = IntermediateState<State6, F8, F0, F1, F2, F3, F4, F5, F6, F7>;
  using State8 =
      IntermediateState<State7, F9, F0, F1, F2, F3, F4, F5, F6, F7, F8>;
  using State9 =
      IntermediateState<State8, F10, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9>;
  using State10 = IntermediateState<State9, F11, F0, F1, F2, F3, F4, F5, F6, F7,
                                    F8, F9, F10>;
  using State11 = IntermediateState<State10, F12, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11>;
  using State12 = IntermediateState<State11, F13, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12>;
  using FLast = typename State12::Next::Promise;
  union {
    [[no_unique_address]] State12 p_;
    [[no_unique_address]] FLast f_;
  };
  using Result = typename decltype(
      std::declval<typename State12::Next::Promise>()())::Type;
  Poll<Result> RunState0() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 1;
                              return RunState1();
                            });
  }
  Poll<Result> RunState1() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 2;
                              return RunState2();
                            });
  }
  Poll<Result> RunState2() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 3;
                              return RunState3();
                            });
  }
  Poll<Result> RunState3() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 4;
                              return RunState4();
                            });
  }
  Poll<Result> RunState4() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.f, [this]() {
      state_ = 5;
      return RunState5();
    });
  }
  Poll<Result> RunState5() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.f, [this]() {
      state_ = 6;
      return RunState6();
    });
  }
  Poll<Result> RunState6() {
    return RunState<Result>(&p_.p.p.p.p.p.p, &p_.p.p.p.p.p.f, [this]() {
      state_ = 7;
      return RunState7();
    });
  }
  Poll<Result> RunState7() {
    return RunState<Result>(&p_.p.p.p.p.p, &p_.p.p.p.p.f, [this]() {
      state_ = 8;
      return RunState8();
    });
  }
  Poll<Result> RunState8() {
    return RunState<Result>(&p_.p.p.p.p, &p_.p.p.p.f, [this]() {
      state_ = 9;
      return RunState9();
    });
  }
  Poll<Result> RunState9() {
    return RunState<Result>(&p_.p.p.p, &p_.p.p.f, [this]() {
      state_ = 10;
      return RunState10();
    });
  }
  Poll<Result> RunState10() {
    return RunState<Result>(&p_.p.p, &p_.p.f, [this]() {
      state_ = 11;
      return RunState11();
    });
  }
  Poll<Result> RunState11() {
    return RunState<Result>(&p_.p, &p_.f, [this]() {
      state_ = 12;
      return RunState12();
    });
  }
  Poll<Result> RunState12() {
    return RunState<Result>(&p_, &f_, [this]() {
      state_ = 13;
      return RunState13();
    });
  }
  Poll<Result> RunState13() { return f_(); }

 public:
  TrySeq(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
         F10 f10, F11 f11, F12 f12, F13 f13)
      : p_(std::move(f0), std::move(f1), std::move(f2), std::move(f3),
           std::move(f4), std::move(f5), std::move(f6), std::move(f7),
           std::move(f8), std::move(f9), std::move(f10), std::move(f11),
           std::move(f12), std::move(f13)) {}
  TrySeq& operator=(const TrySeq&) = delete;
  TrySeq(const TrySeq& other) {
    assert(other.state_ == 0);
    new (&p_) State12(other.p_);
  }
  TrySeq(TrySeq&& other) {
    assert(other.state_ == 0);
    new (&p_) State12(std::move(other.p_));
  }
  ~TrySeq() {
    switch (state_) {
      case 0:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin0;
      case 1:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin1;
      case 2:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.f);
        goto fin2;
      case 3:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.f);
        goto fin3;
      case 4:
        Destruct(&p_.p.p.p.p.p.p.p.p.f);
        goto fin4;
      case 5:
        Destruct(&p_.p.p.p.p.p.p.p.f);
        goto fin5;
      case 6:
        Destruct(&p_.p.p.p.p.p.p.f);
        goto fin6;
      case 7:
        Destruct(&p_.p.p.p.p.p.f);
        goto fin7;
      case 8:
        Destruct(&p_.p.p.p.p.f);
        goto fin8;
      case 9:
        Destruct(&p_.p.p.p.f);
        goto fin9;
      case 10:
        Destruct(&p_.p.p.f);
        goto fin10;
      case 11:
        Destruct(&p_.p.f);
        goto fin11;
      case 12:
        Destruct(&p_.f);
        goto fin12;
      case 13:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin1:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.next);
  fin2:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.next);
  fin3:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.next);
  fin4:
    Destruct(&p_.p.p.p.p.p.p.p.p.next);
  fin5:
    Destruct(&p_.p.p.p.p.p.p.p.next);
  fin6:
    Destruct(&p_.p.p.p.p.p.p.next);
  fin7:
    Destruct(&p_.p.p.p.p.p.next);
  fin8:
    Destruct(&p_.p.p.p.p.next);
  fin9:
    Destruct(&p_.p.p.p.next);
  fin10:
    Destruct(&p_.p.p.next);
  fin11:
    Destruct(&p_.p.next);
  fin12:
    Destruct(&p_.next);
  }
  Poll<Result> operator()() {
    switch (state_) {
      case 0:
        return RunState0();
      case 1:
        return RunState1();
      case 2:
        return RunState2();
      case 3:
        return RunState3();
      case 4:
        return RunState4();
      case 5:
        return RunState5();
      case 6:
        return RunState6();
      case 7:
        return RunState7();
      case 8:
        return RunState8();
      case 9:
        return RunState9();
      case 10:
        return RunState10();
      case 11:
        return RunState11();
      case 12:
        return RunState12();
      case 13:
        return RunState13();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12, typename F13, typename F14>
class TrySeq<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using State2 = IntermediateState<State1, F3, F0, F1, F2>;
  using State3 = IntermediateState<State2, F4, F0, F1, F2, F3>;
  using State4 = IntermediateState<State3, F5, F0, F1, F2, F3, F4>;
  using State5 = IntermediateState<State4, F6, F0, F1, F2, F3, F4, F5>;
  using State6 = IntermediateState<State5, F7, F0, F1, F2, F3, F4, F5, F6>;
  using State7 = IntermediateState<State6, F8, F0, F1, F2, F3, F4, F5, F6, F7>;
  using State8 =
      IntermediateState<State7, F9, F0, F1, F2, F3, F4, F5, F6, F7, F8>;
  using State9 =
      IntermediateState<State8, F10, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9>;
  using State10 = IntermediateState<State9, F11, F0, F1, F2, F3, F4, F5, F6, F7,
                                    F8, F9, F10>;
  using State11 = IntermediateState<State10, F12, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11>;
  using State12 = IntermediateState<State11, F13, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12>;
  using State13 = IntermediateState<State12, F14, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13>;
  using FLast = typename State13::Next::Promise;
  union {
    [[no_unique_address]] State13 p_;
    [[no_unique_address]] FLast f_;
  };
  using Result = typename decltype(
      std::declval<typename State13::Next::Promise>()())::Type;
  Poll<Result> RunState0() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 1;
                              return RunState1();
                            });
  }
  Poll<Result> RunState1() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 2;
                              return RunState2();
                            });
  }
  Poll<Result> RunState2() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 3;
                              return RunState3();
                            });
  }
  Poll<Result> RunState3() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 4;
                              return RunState4();
                            });
  }
  Poll<Result> RunState4() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 5;
                              return RunState5();
                            });
  }
  Poll<Result> RunState5() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.f, [this]() {
      state_ = 6;
      return RunState6();
    });
  }
  Poll<Result> RunState6() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.f, [this]() {
      state_ = 7;
      return RunState7();
    });
  }
  Poll<Result> RunState7() {
    return RunState<Result>(&p_.p.p.p.p.p.p, &p_.p.p.p.p.p.f, [this]() {
      state_ = 8;
      return RunState8();
    });
  }
  Poll<Result> RunState8() {
    return RunState<Result>(&p_.p.p.p.p.p, &p_.p.p.p.p.f, [this]() {
      state_ = 9;
      return RunState9();
    });
  }
  Poll<Result> RunState9() {
    return RunState<Result>(&p_.p.p.p.p, &p_.p.p.p.f, [this]() {
      state_ = 10;
      return RunState10();
    });
  }
  Poll<Result> RunState10() {
    return RunState<Result>(&p_.p.p.p, &p_.p.p.f, [this]() {
      state_ = 11;
      return RunState11();
    });
  }
  Poll<Result> RunState11() {
    return RunState<Result>(&p_.p.p, &p_.p.f, [this]() {
      state_ = 12;
      return RunState12();
    });
  }
  Poll<Result> RunState12() {
    return RunState<Result>(&p_.p, &p_.f, [this]() {
      state_ = 13;
      return RunState13();
    });
  }
  Poll<Result> RunState13() {
    return RunState<Result>(&p_, &f_, [this]() {
      state_ = 14;
      return RunState14();
    });
  }
  Poll<Result> RunState14() { return f_(); }

 public:
  TrySeq(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
         F10 f10, F11 f11, F12 f12, F13 f13, F14 f14)
      : p_(std::move(f0), std::move(f1), std::move(f2), std::move(f3),
           std::move(f4), std::move(f5), std::move(f6), std::move(f7),
           std::move(f8), std::move(f9), std::move(f10), std::move(f11),
           std::move(f12), std::move(f13), std::move(f14)) {}
  TrySeq& operator=(const TrySeq&) = delete;
  TrySeq(const TrySeq& other) {
    assert(other.state_ == 0);
    new (&p_) State13(other.p_);
  }
  TrySeq(TrySeq&& other) {
    assert(other.state_ == 0);
    new (&p_) State13(std::move(other.p_));
  }
  ~TrySeq() {
    switch (state_) {
      case 0:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin0;
      case 1:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin1;
      case 2:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin2;
      case 3:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.f);
        goto fin3;
      case 4:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.f);
        goto fin4;
      case 5:
        Destruct(&p_.p.p.p.p.p.p.p.p.f);
        goto fin5;
      case 6:
        Destruct(&p_.p.p.p.p.p.p.p.f);
        goto fin6;
      case 7:
        Destruct(&p_.p.p.p.p.p.p.f);
        goto fin7;
      case 8:
        Destruct(&p_.p.p.p.p.p.f);
        goto fin8;
      case 9:
        Destruct(&p_.p.p.p.p.f);
        goto fin9;
      case 10:
        Destruct(&p_.p.p.p.f);
        goto fin10;
      case 11:
        Destruct(&p_.p.p.f);
        goto fin11;
      case 12:
        Destruct(&p_.p.f);
        goto fin12;
      case 13:
        Destruct(&p_.f);
        goto fin13;
      case 14:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin1:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin2:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.next);
  fin3:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.next);
  fin4:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.next);
  fin5:
    Destruct(&p_.p.p.p.p.p.p.p.p.next);
  fin6:
    Destruct(&p_.p.p.p.p.p.p.p.next);
  fin7:
    Destruct(&p_.p.p.p.p.p.p.next);
  fin8:
    Destruct(&p_.p.p.p.p.p.next);
  fin9:
    Destruct(&p_.p.p.p.p.next);
  fin10:
    Destruct(&p_.p.p.p.next);
  fin11:
    Destruct(&p_.p.p.next);
  fin12:
    Destruct(&p_.p.next);
  fin13:
    Destruct(&p_.next);
  }
  Poll<Result> operator()() {
    switch (state_) {
      case 0:
        return RunState0();
      case 1:
        return RunState1();
      case 2:
        return RunState2();
      case 3:
        return RunState3();
      case 4:
        return RunState4();
      case 5:
        return RunState5();
      case 6:
        return RunState6();
      case 7:
        return RunState7();
      case 8:
        return RunState8();
      case 9:
        return RunState9();
      case 10:
        return RunState10();
      case 11:
        return RunState11();
      case 12:
        return RunState12();
      case 13:
        return RunState13();
      case 14:
        return RunState14();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12, typename F13, typename F14,
          typename F15>
class TrySeq<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
             F15> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using State2 = IntermediateState<State1, F3, F0, F1, F2>;
  using State3 = IntermediateState<State2, F4, F0, F1, F2, F3>;
  using State4 = IntermediateState<State3, F5, F0, F1, F2, F3, F4>;
  using State5 = IntermediateState<State4, F6, F0, F1, F2, F3, F4, F5>;
  using State6 = IntermediateState<State5, F7, F0, F1, F2, F3, F4, F5, F6>;
  using State7 = IntermediateState<State6, F8, F0, F1, F2, F3, F4, F5, F6, F7>;
  using State8 =
      IntermediateState<State7, F9, F0, F1, F2, F3, F4, F5, F6, F7, F8>;
  using State9 =
      IntermediateState<State8, F10, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9>;
  using State10 = IntermediateState<State9, F11, F0, F1, F2, F3, F4, F5, F6, F7,
                                    F8, F9, F10>;
  using State11 = IntermediateState<State10, F12, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11>;
  using State12 = IntermediateState<State11, F13, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12>;
  using State13 = IntermediateState<State12, F14, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13>;
  using State14 = IntermediateState<State13, F15, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14>;
  using FLast = typename State14::Next::Promise;
  union {
    [[no_unique_address]] State14 p_;
    [[no_unique_address]] FLast f_;
  };
  using Result = typename decltype(
      std::declval<typename State14::Next::Promise>()())::Type;
  Poll<Result> RunState0() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 1;
                              return RunState1();
                            });
  }
  Poll<Result> RunState1() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 2;
                              return RunState2();
                            });
  }
  Poll<Result> RunState2() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 3;
                              return RunState3();
                            });
  }
  Poll<Result> RunState3() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 4;
                              return RunState4();
                            });
  }
  Poll<Result> RunState4() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 5;
                              return RunState5();
                            });
  }
  Poll<Result> RunState5() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 6;
                              return RunState6();
                            });
  }
  Poll<Result> RunState6() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.f, [this]() {
      state_ = 7;
      return RunState7();
    });
  }
  Poll<Result> RunState7() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.f, [this]() {
      state_ = 8;
      return RunState8();
    });
  }
  Poll<Result> RunState8() {
    return RunState<Result>(&p_.p.p.p.p.p.p, &p_.p.p.p.p.p.f, [this]() {
      state_ = 9;
      return RunState9();
    });
  }
  Poll<Result> RunState9() {
    return RunState<Result>(&p_.p.p.p.p.p, &p_.p.p.p.p.f, [this]() {
      state_ = 10;
      return RunState10();
    });
  }
  Poll<Result> RunState10() {
    return RunState<Result>(&p_.p.p.p.p, &p_.p.p.p.f, [this]() {
      state_ = 11;
      return RunState11();
    });
  }
  Poll<Result> RunState11() {
    return RunState<Result>(&p_.p.p.p, &p_.p.p.f, [this]() {
      state_ = 12;
      return RunState12();
    });
  }
  Poll<Result> RunState12() {
    return RunState<Result>(&p_.p.p, &p_.p.f, [this]() {
      state_ = 13;
      return RunState13();
    });
  }
  Poll<Result> RunState13() {
    return RunState<Result>(&p_.p, &p_.f, [this]() {
      state_ = 14;
      return RunState14();
    });
  }
  Poll<Result> RunState14() {
    return RunState<Result>(&p_, &f_, [this]() {
      state_ = 15;
      return RunState15();
    });
  }
  Poll<Result> RunState15() { return f_(); }

 public:
  TrySeq(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
         F10 f10, F11 f11, F12 f12, F13 f13, F14 f14, F15 f15)
      : p_(std::move(f0), std::move(f1), std::move(f2), std::move(f3),
           std::move(f4), std::move(f5), std::move(f6), std::move(f7),
           std::move(f8), std::move(f9), std::move(f10), std::move(f11),
           std::move(f12), std::move(f13), std::move(f14), std::move(f15)) {}
  TrySeq& operator=(const TrySeq&) = delete;
  TrySeq(const TrySeq& other) {
    assert(other.state_ == 0);
    new (&p_) State14(other.p_);
  }
  TrySeq(TrySeq&& other) {
    assert(other.state_ == 0);
    new (&p_) State14(std::move(other.p_));
  }
  ~TrySeq() {
    switch (state_) {
      case 0:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin0;
      case 1:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin1;
      case 2:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin2;
      case 3:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin3;
      case 4:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.f);
        goto fin4;
      case 5:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.f);
        goto fin5;
      case 6:
        Destruct(&p_.p.p.p.p.p.p.p.p.f);
        goto fin6;
      case 7:
        Destruct(&p_.p.p.p.p.p.p.p.f);
        goto fin7;
      case 8:
        Destruct(&p_.p.p.p.p.p.p.f);
        goto fin8;
      case 9:
        Destruct(&p_.p.p.p.p.p.f);
        goto fin9;
      case 10:
        Destruct(&p_.p.p.p.p.f);
        goto fin10;
      case 11:
        Destruct(&p_.p.p.p.f);
        goto fin11;
      case 12:
        Destruct(&p_.p.p.f);
        goto fin12;
      case 13:
        Destruct(&p_.p.f);
        goto fin13;
      case 14:
        Destruct(&p_.f);
        goto fin14;
      case 15:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin1:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin2:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin3:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.next);
  fin4:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.next);
  fin5:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.next);
  fin6:
    Destruct(&p_.p.p.p.p.p.p.p.p.next);
  fin7:
    Destruct(&p_.p.p.p.p.p.p.p.next);
  fin8:
    Destruct(&p_.p.p.p.p.p.p.next);
  fin9:
    Destruct(&p_.p.p.p.p.p.next);
  fin10:
    Destruct(&p_.p.p.p.p.next);
  fin11:
    Destruct(&p_.p.p.p.next);
  fin12:
    Destruct(&p_.p.p.next);
  fin13:
    Destruct(&p_.p.next);
  fin14:
    Destruct(&p_.next);
  }
  Poll<Result> operator()() {
    switch (state_) {
      case 0:
        return RunState0();
      case 1:
        return RunState1();
      case 2:
        return RunState2();
      case 3:
        return RunState3();
      case 4:
        return RunState4();
      case 5:
        return RunState5();
      case 6:
        return RunState6();
      case 7:
        return RunState7();
      case 8:
        return RunState8();
      case 9:
        return RunState9();
      case 10:
        return RunState10();
      case 11:
        return RunState11();
      case 12:
        return RunState12();
      case 13:
        return RunState13();
      case 14:
        return RunState14();
      case 15:
        return RunState15();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12, typename F13, typename F14,
          typename F15, typename F16>
class TrySeq<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
             F15, F16> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using State2 = IntermediateState<State1, F3, F0, F1, F2>;
  using State3 = IntermediateState<State2, F4, F0, F1, F2, F3>;
  using State4 = IntermediateState<State3, F5, F0, F1, F2, F3, F4>;
  using State5 = IntermediateState<State4, F6, F0, F1, F2, F3, F4, F5>;
  using State6 = IntermediateState<State5, F7, F0, F1, F2, F3, F4, F5, F6>;
  using State7 = IntermediateState<State6, F8, F0, F1, F2, F3, F4, F5, F6, F7>;
  using State8 =
      IntermediateState<State7, F9, F0, F1, F2, F3, F4, F5, F6, F7, F8>;
  using State9 =
      IntermediateState<State8, F10, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9>;
  using State10 = IntermediateState<State9, F11, F0, F1, F2, F3, F4, F5, F6, F7,
                                    F8, F9, F10>;
  using State11 = IntermediateState<State10, F12, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11>;
  using State12 = IntermediateState<State11, F13, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12>;
  using State13 = IntermediateState<State12, F14, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13>;
  using State14 = IntermediateState<State13, F15, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14>;
  using State15 = IntermediateState<State14, F16, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15>;
  using FLast = typename State15::Next::Promise;
  union {
    [[no_unique_address]] State15 p_;
    [[no_unique_address]] FLast f_;
  };
  using Result = typename decltype(
      std::declval<typename State15::Next::Promise>()())::Type;
  Poll<Result> RunState0() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 1;
                              return RunState1();
                            });
  }
  Poll<Result> RunState1() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 2;
                              return RunState2();
                            });
  }
  Poll<Result> RunState2() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 3;
                              return RunState3();
                            });
  }
  Poll<Result> RunState3() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 4;
                              return RunState4();
                            });
  }
  Poll<Result> RunState4() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 5;
                              return RunState5();
                            });
  }
  Poll<Result> RunState5() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 6;
                              return RunState6();
                            });
  }
  Poll<Result> RunState6() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 7;
                              return RunState7();
                            });
  }
  Poll<Result> RunState7() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.f, [this]() {
      state_ = 8;
      return RunState8();
    });
  }
  Poll<Result> RunState8() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.f, [this]() {
      state_ = 9;
      return RunState9();
    });
  }
  Poll<Result> RunState9() {
    return RunState<Result>(&p_.p.p.p.p.p.p, &p_.p.p.p.p.p.f, [this]() {
      state_ = 10;
      return RunState10();
    });
  }
  Poll<Result> RunState10() {
    return RunState<Result>(&p_.p.p.p.p.p, &p_.p.p.p.p.f, [this]() {
      state_ = 11;
      return RunState11();
    });
  }
  Poll<Result> RunState11() {
    return RunState<Result>(&p_.p.p.p.p, &p_.p.p.p.f, [this]() {
      state_ = 12;
      return RunState12();
    });
  }
  Poll<Result> RunState12() {
    return RunState<Result>(&p_.p.p.p, &p_.p.p.f, [this]() {
      state_ = 13;
      return RunState13();
    });
  }
  Poll<Result> RunState13() {
    return RunState<Result>(&p_.p.p, &p_.p.f, [this]() {
      state_ = 14;
      return RunState14();
    });
  }
  Poll<Result> RunState14() {
    return RunState<Result>(&p_.p, &p_.f, [this]() {
      state_ = 15;
      return RunState15();
    });
  }
  Poll<Result> RunState15() {
    return RunState<Result>(&p_, &f_, [this]() {
      state_ = 16;
      return RunState16();
    });
  }
  Poll<Result> RunState16() { return f_(); }

 public:
  TrySeq(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
         F10 f10, F11 f11, F12 f12, F13 f13, F14 f14, F15 f15, F16 f16)
      : p_(std::move(f0), std::move(f1), std::move(f2), std::move(f3),
           std::move(f4), std::move(f5), std::move(f6), std::move(f7),
           std::move(f8), std::move(f9), std::move(f10), std::move(f11),
           std::move(f12), std::move(f13), std::move(f14), std::move(f15),
           std::move(f16)) {}
  TrySeq& operator=(const TrySeq&) = delete;
  TrySeq(const TrySeq& other) {
    assert(other.state_ == 0);
    new (&p_) State15(other.p_);
  }
  TrySeq(TrySeq&& other) {
    assert(other.state_ == 0);
    new (&p_) State15(std::move(other.p_));
  }
  ~TrySeq() {
    switch (state_) {
      case 0:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin0;
      case 1:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin1;
      case 2:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin2;
      case 3:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin3;
      case 4:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin4;
      case 5:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.f);
        goto fin5;
      case 6:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.f);
        goto fin6;
      case 7:
        Destruct(&p_.p.p.p.p.p.p.p.p.f);
        goto fin7;
      case 8:
        Destruct(&p_.p.p.p.p.p.p.p.f);
        goto fin8;
      case 9:
        Destruct(&p_.p.p.p.p.p.p.f);
        goto fin9;
      case 10:
        Destruct(&p_.p.p.p.p.p.f);
        goto fin10;
      case 11:
        Destruct(&p_.p.p.p.p.f);
        goto fin11;
      case 12:
        Destruct(&p_.p.p.p.f);
        goto fin12;
      case 13:
        Destruct(&p_.p.p.f);
        goto fin13;
      case 14:
        Destruct(&p_.p.f);
        goto fin14;
      case 15:
        Destruct(&p_.f);
        goto fin15;
      case 16:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin1:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin2:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin3:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin4:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.next);
  fin5:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.next);
  fin6:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.next);
  fin7:
    Destruct(&p_.p.p.p.p.p.p.p.p.next);
  fin8:
    Destruct(&p_.p.p.p.p.p.p.p.next);
  fin9:
    Destruct(&p_.p.p.p.p.p.p.next);
  fin10:
    Destruct(&p_.p.p.p.p.p.next);
  fin11:
    Destruct(&p_.p.p.p.p.next);
  fin12:
    Destruct(&p_.p.p.p.next);
  fin13:
    Destruct(&p_.p.p.next);
  fin14:
    Destruct(&p_.p.next);
  fin15:
    Destruct(&p_.next);
  }
  Poll<Result> operator()() {
    switch (state_) {
      case 0:
        return RunState0();
      case 1:
        return RunState1();
      case 2:
        return RunState2();
      case 3:
        return RunState3();
      case 4:
        return RunState4();
      case 5:
        return RunState5();
      case 6:
        return RunState6();
      case 7:
        return RunState7();
      case 8:
        return RunState8();
      case 9:
        return RunState9();
      case 10:
        return RunState10();
      case 11:
        return RunState11();
      case 12:
        return RunState12();
      case 13:
        return RunState13();
      case 14:
        return RunState14();
      case 15:
        return RunState15();
      case 16:
        return RunState16();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12, typename F13, typename F14,
          typename F15, typename F16, typename F17>
class TrySeq<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
             F15, F16, F17> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using State2 = IntermediateState<State1, F3, F0, F1, F2>;
  using State3 = IntermediateState<State2, F4, F0, F1, F2, F3>;
  using State4 = IntermediateState<State3, F5, F0, F1, F2, F3, F4>;
  using State5 = IntermediateState<State4, F6, F0, F1, F2, F3, F4, F5>;
  using State6 = IntermediateState<State5, F7, F0, F1, F2, F3, F4, F5, F6>;
  using State7 = IntermediateState<State6, F8, F0, F1, F2, F3, F4, F5, F6, F7>;
  using State8 =
      IntermediateState<State7, F9, F0, F1, F2, F3, F4, F5, F6, F7, F8>;
  using State9 =
      IntermediateState<State8, F10, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9>;
  using State10 = IntermediateState<State9, F11, F0, F1, F2, F3, F4, F5, F6, F7,
                                    F8, F9, F10>;
  using State11 = IntermediateState<State10, F12, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11>;
  using State12 = IntermediateState<State11, F13, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12>;
  using State13 = IntermediateState<State12, F14, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13>;
  using State14 = IntermediateState<State13, F15, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14>;
  using State15 = IntermediateState<State14, F16, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15>;
  using State16 =
      IntermediateState<State15, F17, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16>;
  using FLast = typename State16::Next::Promise;
  union {
    [[no_unique_address]] State16 p_;
    [[no_unique_address]] FLast f_;
  };
  using Result = typename decltype(
      std::declval<typename State16::Next::Promise>()())::Type;
  Poll<Result> RunState0() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 1;
                              return RunState1();
                            });
  }
  Poll<Result> RunState1() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 2;
                              return RunState2();
                            });
  }
  Poll<Result> RunState2() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 3;
                              return RunState3();
                            });
  }
  Poll<Result> RunState3() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 4;
                              return RunState4();
                            });
  }
  Poll<Result> RunState4() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 5;
                              return RunState5();
                            });
  }
  Poll<Result> RunState5() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 6;
                              return RunState6();
                            });
  }
  Poll<Result> RunState6() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 7;
                              return RunState7();
                            });
  }
  Poll<Result> RunState7() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 8;
                              return RunState8();
                            });
  }
  Poll<Result> RunState8() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.f, [this]() {
      state_ = 9;
      return RunState9();
    });
  }
  Poll<Result> RunState9() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.f, [this]() {
      state_ = 10;
      return RunState10();
    });
  }
  Poll<Result> RunState10() {
    return RunState<Result>(&p_.p.p.p.p.p.p, &p_.p.p.p.p.p.f, [this]() {
      state_ = 11;
      return RunState11();
    });
  }
  Poll<Result> RunState11() {
    return RunState<Result>(&p_.p.p.p.p.p, &p_.p.p.p.p.f, [this]() {
      state_ = 12;
      return RunState12();
    });
  }
  Poll<Result> RunState12() {
    return RunState<Result>(&p_.p.p.p.p, &p_.p.p.p.f, [this]() {
      state_ = 13;
      return RunState13();
    });
  }
  Poll<Result> RunState13() {
    return RunState<Result>(&p_.p.p.p, &p_.p.p.f, [this]() {
      state_ = 14;
      return RunState14();
    });
  }
  Poll<Result> RunState14() {
    return RunState<Result>(&p_.p.p, &p_.p.f, [this]() {
      state_ = 15;
      return RunState15();
    });
  }
  Poll<Result> RunState15() {
    return RunState<Result>(&p_.p, &p_.f, [this]() {
      state_ = 16;
      return RunState16();
    });
  }
  Poll<Result> RunState16() {
    return RunState<Result>(&p_, &f_, [this]() {
      state_ = 17;
      return RunState17();
    });
  }
  Poll<Result> RunState17() { return f_(); }

 public:
  TrySeq(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
         F10 f10, F11 f11, F12 f12, F13 f13, F14 f14, F15 f15, F16 f16, F17 f17)
      : p_(std::move(f0), std::move(f1), std::move(f2), std::move(f3),
           std::move(f4), std::move(f5), std::move(f6), std::move(f7),
           std::move(f8), std::move(f9), std::move(f10), std::move(f11),
           std::move(f12), std::move(f13), std::move(f14), std::move(f15),
           std::move(f16), std::move(f17)) {}
  TrySeq& operator=(const TrySeq&) = delete;
  TrySeq(const TrySeq& other) {
    assert(other.state_ == 0);
    new (&p_) State16(other.p_);
  }
  TrySeq(TrySeq&& other) {
    assert(other.state_ == 0);
    new (&p_) State16(std::move(other.p_));
  }
  ~TrySeq() {
    switch (state_) {
      case 0:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin0;
      case 1:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin1;
      case 2:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin2;
      case 3:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin3;
      case 4:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin4;
      case 5:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin5;
      case 6:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.f);
        goto fin6;
      case 7:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.f);
        goto fin7;
      case 8:
        Destruct(&p_.p.p.p.p.p.p.p.p.f);
        goto fin8;
      case 9:
        Destruct(&p_.p.p.p.p.p.p.p.f);
        goto fin9;
      case 10:
        Destruct(&p_.p.p.p.p.p.p.f);
        goto fin10;
      case 11:
        Destruct(&p_.p.p.p.p.p.f);
        goto fin11;
      case 12:
        Destruct(&p_.p.p.p.p.f);
        goto fin12;
      case 13:
        Destruct(&p_.p.p.p.f);
        goto fin13;
      case 14:
        Destruct(&p_.p.p.f);
        goto fin14;
      case 15:
        Destruct(&p_.p.f);
        goto fin15;
      case 16:
        Destruct(&p_.f);
        goto fin16;
      case 17:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin1:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin2:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin3:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin4:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin5:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.next);
  fin6:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.next);
  fin7:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.next);
  fin8:
    Destruct(&p_.p.p.p.p.p.p.p.p.next);
  fin9:
    Destruct(&p_.p.p.p.p.p.p.p.next);
  fin10:
    Destruct(&p_.p.p.p.p.p.p.next);
  fin11:
    Destruct(&p_.p.p.p.p.p.next);
  fin12:
    Destruct(&p_.p.p.p.p.next);
  fin13:
    Destruct(&p_.p.p.p.next);
  fin14:
    Destruct(&p_.p.p.next);
  fin15:
    Destruct(&p_.p.next);
  fin16:
    Destruct(&p_.next);
  }
  Poll<Result> operator()() {
    switch (state_) {
      case 0:
        return RunState0();
      case 1:
        return RunState1();
      case 2:
        return RunState2();
      case 3:
        return RunState3();
      case 4:
        return RunState4();
      case 5:
        return RunState5();
      case 6:
        return RunState6();
      case 7:
        return RunState7();
      case 8:
        return RunState8();
      case 9:
        return RunState9();
      case 10:
        return RunState10();
      case 11:
        return RunState11();
      case 12:
        return RunState12();
      case 13:
        return RunState13();
      case 14:
        return RunState14();
      case 15:
        return RunState15();
      case 16:
        return RunState16();
      case 17:
        return RunState17();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12, typename F13, typename F14,
          typename F15, typename F16, typename F17, typename F18>
class TrySeq<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
             F15, F16, F17, F18> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using State2 = IntermediateState<State1, F3, F0, F1, F2>;
  using State3 = IntermediateState<State2, F4, F0, F1, F2, F3>;
  using State4 = IntermediateState<State3, F5, F0, F1, F2, F3, F4>;
  using State5 = IntermediateState<State4, F6, F0, F1, F2, F3, F4, F5>;
  using State6 = IntermediateState<State5, F7, F0, F1, F2, F3, F4, F5, F6>;
  using State7 = IntermediateState<State6, F8, F0, F1, F2, F3, F4, F5, F6, F7>;
  using State8 =
      IntermediateState<State7, F9, F0, F1, F2, F3, F4, F5, F6, F7, F8>;
  using State9 =
      IntermediateState<State8, F10, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9>;
  using State10 = IntermediateState<State9, F11, F0, F1, F2, F3, F4, F5, F6, F7,
                                    F8, F9, F10>;
  using State11 = IntermediateState<State10, F12, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11>;
  using State12 = IntermediateState<State11, F13, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12>;
  using State13 = IntermediateState<State12, F14, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13>;
  using State14 = IntermediateState<State13, F15, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14>;
  using State15 = IntermediateState<State14, F16, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15>;
  using State16 =
      IntermediateState<State15, F17, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16>;
  using State17 =
      IntermediateState<State16, F18, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17>;
  using FLast = typename State17::Next::Promise;
  union {
    [[no_unique_address]] State17 p_;
    [[no_unique_address]] FLast f_;
  };
  using Result = typename decltype(
      std::declval<typename State17::Next::Promise>()())::Type;
  Poll<Result> RunState0() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 1;
                              return RunState1();
                            });
  }
  Poll<Result> RunState1() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 2;
                              return RunState2();
                            });
  }
  Poll<Result> RunState2() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 3;
                              return RunState3();
                            });
  }
  Poll<Result> RunState3() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 4;
                              return RunState4();
                            });
  }
  Poll<Result> RunState4() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 5;
                              return RunState5();
                            });
  }
  Poll<Result> RunState5() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 6;
                              return RunState6();
                            });
  }
  Poll<Result> RunState6() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 7;
                              return RunState7();
                            });
  }
  Poll<Result> RunState7() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 8;
                              return RunState8();
                            });
  }
  Poll<Result> RunState8() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 9;
                              return RunState9();
                            });
  }
  Poll<Result> RunState9() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.f, [this]() {
      state_ = 10;
      return RunState10();
    });
  }
  Poll<Result> RunState10() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.f, [this]() {
      state_ = 11;
      return RunState11();
    });
  }
  Poll<Result> RunState11() {
    return RunState<Result>(&p_.p.p.p.p.p.p, &p_.p.p.p.p.p.f, [this]() {
      state_ = 12;
      return RunState12();
    });
  }
  Poll<Result> RunState12() {
    return RunState<Result>(&p_.p.p.p.p.p, &p_.p.p.p.p.f, [this]() {
      state_ = 13;
      return RunState13();
    });
  }
  Poll<Result> RunState13() {
    return RunState<Result>(&p_.p.p.p.p, &p_.p.p.p.f, [this]() {
      state_ = 14;
      return RunState14();
    });
  }
  Poll<Result> RunState14() {
    return RunState<Result>(&p_.p.p.p, &p_.p.p.f, [this]() {
      state_ = 15;
      return RunState15();
    });
  }
  Poll<Result> RunState15() {
    return RunState<Result>(&p_.p.p, &p_.p.f, [this]() {
      state_ = 16;
      return RunState16();
    });
  }
  Poll<Result> RunState16() {
    return RunState<Result>(&p_.p, &p_.f, [this]() {
      state_ = 17;
      return RunState17();
    });
  }
  Poll<Result> RunState17() {
    return RunState<Result>(&p_, &f_, [this]() {
      state_ = 18;
      return RunState18();
    });
  }
  Poll<Result> RunState18() { return f_(); }

 public:
  TrySeq(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
         F10 f10, F11 f11, F12 f12, F13 f13, F14 f14, F15 f15, F16 f16, F17 f17,
         F18 f18)
      : p_(std::move(f0), std::move(f1), std::move(f2), std::move(f3),
           std::move(f4), std::move(f5), std::move(f6), std::move(f7),
           std::move(f8), std::move(f9), std::move(f10), std::move(f11),
           std::move(f12), std::move(f13), std::move(f14), std::move(f15),
           std::move(f16), std::move(f17), std::move(f18)) {}
  TrySeq& operator=(const TrySeq&) = delete;
  TrySeq(const TrySeq& other) {
    assert(other.state_ == 0);
    new (&p_) State17(other.p_);
  }
  TrySeq(TrySeq&& other) {
    assert(other.state_ == 0);
    new (&p_) State17(std::move(other.p_));
  }
  ~TrySeq() {
    switch (state_) {
      case 0:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin0;
      case 1:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin1;
      case 2:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin2;
      case 3:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin3;
      case 4:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin4;
      case 5:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin5;
      case 6:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin6;
      case 7:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.f);
        goto fin7;
      case 8:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.f);
        goto fin8;
      case 9:
        Destruct(&p_.p.p.p.p.p.p.p.p.f);
        goto fin9;
      case 10:
        Destruct(&p_.p.p.p.p.p.p.p.f);
        goto fin10;
      case 11:
        Destruct(&p_.p.p.p.p.p.p.f);
        goto fin11;
      case 12:
        Destruct(&p_.p.p.p.p.p.f);
        goto fin12;
      case 13:
        Destruct(&p_.p.p.p.p.f);
        goto fin13;
      case 14:
        Destruct(&p_.p.p.p.f);
        goto fin14;
      case 15:
        Destruct(&p_.p.p.f);
        goto fin15;
      case 16:
        Destruct(&p_.p.f);
        goto fin16;
      case 17:
        Destruct(&p_.f);
        goto fin17;
      case 18:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin1:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin2:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin3:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin4:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin5:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin6:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.next);
  fin7:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.next);
  fin8:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.next);
  fin9:
    Destruct(&p_.p.p.p.p.p.p.p.p.next);
  fin10:
    Destruct(&p_.p.p.p.p.p.p.p.next);
  fin11:
    Destruct(&p_.p.p.p.p.p.p.next);
  fin12:
    Destruct(&p_.p.p.p.p.p.next);
  fin13:
    Destruct(&p_.p.p.p.p.next);
  fin14:
    Destruct(&p_.p.p.p.next);
  fin15:
    Destruct(&p_.p.p.next);
  fin16:
    Destruct(&p_.p.next);
  fin17:
    Destruct(&p_.next);
  }
  Poll<Result> operator()() {
    switch (state_) {
      case 0:
        return RunState0();
      case 1:
        return RunState1();
      case 2:
        return RunState2();
      case 3:
        return RunState3();
      case 4:
        return RunState4();
      case 5:
        return RunState5();
      case 6:
        return RunState6();
      case 7:
        return RunState7();
      case 8:
        return RunState8();
      case 9:
        return RunState9();
      case 10:
        return RunState10();
      case 11:
        return RunState11();
      case 12:
        return RunState12();
      case 13:
        return RunState13();
      case 14:
        return RunState14();
      case 15:
        return RunState15();
      case 16:
        return RunState16();
      case 17:
        return RunState17();
      case 18:
        return RunState18();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12, typename F13, typename F14,
          typename F15, typename F16, typename F17, typename F18, typename F19>
class TrySeq<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
             F15, F16, F17, F18, F19> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using State2 = IntermediateState<State1, F3, F0, F1, F2>;
  using State3 = IntermediateState<State2, F4, F0, F1, F2, F3>;
  using State4 = IntermediateState<State3, F5, F0, F1, F2, F3, F4>;
  using State5 = IntermediateState<State4, F6, F0, F1, F2, F3, F4, F5>;
  using State6 = IntermediateState<State5, F7, F0, F1, F2, F3, F4, F5, F6>;
  using State7 = IntermediateState<State6, F8, F0, F1, F2, F3, F4, F5, F6, F7>;
  using State8 =
      IntermediateState<State7, F9, F0, F1, F2, F3, F4, F5, F6, F7, F8>;
  using State9 =
      IntermediateState<State8, F10, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9>;
  using State10 = IntermediateState<State9, F11, F0, F1, F2, F3, F4, F5, F6, F7,
                                    F8, F9, F10>;
  using State11 = IntermediateState<State10, F12, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11>;
  using State12 = IntermediateState<State11, F13, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12>;
  using State13 = IntermediateState<State12, F14, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13>;
  using State14 = IntermediateState<State13, F15, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14>;
  using State15 = IntermediateState<State14, F16, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15>;
  using State16 =
      IntermediateState<State15, F17, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16>;
  using State17 =
      IntermediateState<State16, F18, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17>;
  using State18 =
      IntermediateState<State17, F19, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18>;
  using FLast = typename State18::Next::Promise;
  union {
    [[no_unique_address]] State18 p_;
    [[no_unique_address]] FLast f_;
  };
  using Result = typename decltype(
      std::declval<typename State18::Next::Promise>()())::Type;
  Poll<Result> RunState0() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 1;
                              return RunState1();
                            });
  }
  Poll<Result> RunState1() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 2;
                              return RunState2();
                            });
  }
  Poll<Result> RunState2() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 3;
                              return RunState3();
                            });
  }
  Poll<Result> RunState3() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 4;
                              return RunState4();
                            });
  }
  Poll<Result> RunState4() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 5;
                              return RunState5();
                            });
  }
  Poll<Result> RunState5() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 6;
                              return RunState6();
                            });
  }
  Poll<Result> RunState6() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 7;
                              return RunState7();
                            });
  }
  Poll<Result> RunState7() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 8;
                              return RunState8();
                            });
  }
  Poll<Result> RunState8() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 9;
                              return RunState9();
                            });
  }
  Poll<Result> RunState9() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 10;
                              return RunState10();
                            });
  }
  Poll<Result> RunState10() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.f, [this]() {
      state_ = 11;
      return RunState11();
    });
  }
  Poll<Result> RunState11() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.f, [this]() {
      state_ = 12;
      return RunState12();
    });
  }
  Poll<Result> RunState12() {
    return RunState<Result>(&p_.p.p.p.p.p.p, &p_.p.p.p.p.p.f, [this]() {
      state_ = 13;
      return RunState13();
    });
  }
  Poll<Result> RunState13() {
    return RunState<Result>(&p_.p.p.p.p.p, &p_.p.p.p.p.f, [this]() {
      state_ = 14;
      return RunState14();
    });
  }
  Poll<Result> RunState14() {
    return RunState<Result>(&p_.p.p.p.p, &p_.p.p.p.f, [this]() {
      state_ = 15;
      return RunState15();
    });
  }
  Poll<Result> RunState15() {
    return RunState<Result>(&p_.p.p.p, &p_.p.p.f, [this]() {
      state_ = 16;
      return RunState16();
    });
  }
  Poll<Result> RunState16() {
    return RunState<Result>(&p_.p.p, &p_.p.f, [this]() {
      state_ = 17;
      return RunState17();
    });
  }
  Poll<Result> RunState17() {
    return RunState<Result>(&p_.p, &p_.f, [this]() {
      state_ = 18;
      return RunState18();
    });
  }
  Poll<Result> RunState18() {
    return RunState<Result>(&p_, &f_, [this]() {
      state_ = 19;
      return RunState19();
    });
  }
  Poll<Result> RunState19() { return f_(); }

 public:
  TrySeq(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
         F10 f10, F11 f11, F12 f12, F13 f13, F14 f14, F15 f15, F16 f16, F17 f17,
         F18 f18, F19 f19)
      : p_(std::move(f0), std::move(f1), std::move(f2), std::move(f3),
           std::move(f4), std::move(f5), std::move(f6), std::move(f7),
           std::move(f8), std::move(f9), std::move(f10), std::move(f11),
           std::move(f12), std::move(f13), std::move(f14), std::move(f15),
           std::move(f16), std::move(f17), std::move(f18), std::move(f19)) {}
  TrySeq& operator=(const TrySeq&) = delete;
  TrySeq(const TrySeq& other) {
    assert(other.state_ == 0);
    new (&p_) State18(other.p_);
  }
  TrySeq(TrySeq&& other) {
    assert(other.state_ == 0);
    new (&p_) State18(std::move(other.p_));
  }
  ~TrySeq() {
    switch (state_) {
      case 0:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin0;
      case 1:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin1;
      case 2:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin2;
      case 3:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin3;
      case 4:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin4;
      case 5:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin5;
      case 6:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin6;
      case 7:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin7;
      case 8:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.f);
        goto fin8;
      case 9:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.f);
        goto fin9;
      case 10:
        Destruct(&p_.p.p.p.p.p.p.p.p.f);
        goto fin10;
      case 11:
        Destruct(&p_.p.p.p.p.p.p.p.f);
        goto fin11;
      case 12:
        Destruct(&p_.p.p.p.p.p.p.f);
        goto fin12;
      case 13:
        Destruct(&p_.p.p.p.p.p.f);
        goto fin13;
      case 14:
        Destruct(&p_.p.p.p.p.f);
        goto fin14;
      case 15:
        Destruct(&p_.p.p.p.f);
        goto fin15;
      case 16:
        Destruct(&p_.p.p.f);
        goto fin16;
      case 17:
        Destruct(&p_.p.f);
        goto fin17;
      case 18:
        Destruct(&p_.f);
        goto fin18;
      case 19:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin1:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin2:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin3:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin4:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin5:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin6:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin7:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.next);
  fin8:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.next);
  fin9:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.next);
  fin10:
    Destruct(&p_.p.p.p.p.p.p.p.p.next);
  fin11:
    Destruct(&p_.p.p.p.p.p.p.p.next);
  fin12:
    Destruct(&p_.p.p.p.p.p.p.next);
  fin13:
    Destruct(&p_.p.p.p.p.p.next);
  fin14:
    Destruct(&p_.p.p.p.p.next);
  fin15:
    Destruct(&p_.p.p.p.next);
  fin16:
    Destruct(&p_.p.p.next);
  fin17:
    Destruct(&p_.p.next);
  fin18:
    Destruct(&p_.next);
  }
  Poll<Result> operator()() {
    switch (state_) {
      case 0:
        return RunState0();
      case 1:
        return RunState1();
      case 2:
        return RunState2();
      case 3:
        return RunState3();
      case 4:
        return RunState4();
      case 5:
        return RunState5();
      case 6:
        return RunState6();
      case 7:
        return RunState7();
      case 8:
        return RunState8();
      case 9:
        return RunState9();
      case 10:
        return RunState10();
      case 11:
        return RunState11();
      case 12:
        return RunState12();
      case 13:
        return RunState13();
      case 14:
        return RunState14();
      case 15:
        return RunState15();
      case 16:
        return RunState16();
      case 17:
        return RunState17();
      case 18:
        return RunState18();
      case 19:
        return RunState19();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12, typename F13, typename F14,
          typename F15, typename F16, typename F17, typename F18, typename F19,
          typename F20>
class TrySeq<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
             F15, F16, F17, F18, F19, F20> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using State2 = IntermediateState<State1, F3, F0, F1, F2>;
  using State3 = IntermediateState<State2, F4, F0, F1, F2, F3>;
  using State4 = IntermediateState<State3, F5, F0, F1, F2, F3, F4>;
  using State5 = IntermediateState<State4, F6, F0, F1, F2, F3, F4, F5>;
  using State6 = IntermediateState<State5, F7, F0, F1, F2, F3, F4, F5, F6>;
  using State7 = IntermediateState<State6, F8, F0, F1, F2, F3, F4, F5, F6, F7>;
  using State8 =
      IntermediateState<State7, F9, F0, F1, F2, F3, F4, F5, F6, F7, F8>;
  using State9 =
      IntermediateState<State8, F10, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9>;
  using State10 = IntermediateState<State9, F11, F0, F1, F2, F3, F4, F5, F6, F7,
                                    F8, F9, F10>;
  using State11 = IntermediateState<State10, F12, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11>;
  using State12 = IntermediateState<State11, F13, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12>;
  using State13 = IntermediateState<State12, F14, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13>;
  using State14 = IntermediateState<State13, F15, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14>;
  using State15 = IntermediateState<State14, F16, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15>;
  using State16 =
      IntermediateState<State15, F17, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16>;
  using State17 =
      IntermediateState<State16, F18, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17>;
  using State18 =
      IntermediateState<State17, F19, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18>;
  using State19 =
      IntermediateState<State18, F20, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19>;
  using FLast = typename State19::Next::Promise;
  union {
    [[no_unique_address]] State19 p_;
    [[no_unique_address]] FLast f_;
  };
  using Result = typename decltype(
      std::declval<typename State19::Next::Promise>()())::Type;
  Poll<Result> RunState0() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 1;
                              return RunState1();
                            });
  }
  Poll<Result> RunState1() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 2;
                              return RunState2();
                            });
  }
  Poll<Result> RunState2() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 3;
                              return RunState3();
                            });
  }
  Poll<Result> RunState3() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 4;
                              return RunState4();
                            });
  }
  Poll<Result> RunState4() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 5;
                              return RunState5();
                            });
  }
  Poll<Result> RunState5() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 6;
                              return RunState6();
                            });
  }
  Poll<Result> RunState6() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 7;
                              return RunState7();
                            });
  }
  Poll<Result> RunState7() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 8;
                              return RunState8();
                            });
  }
  Poll<Result> RunState8() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 9;
                              return RunState9();
                            });
  }
  Poll<Result> RunState9() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 10;
                              return RunState10();
                            });
  }
  Poll<Result> RunState10() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 11;
                              return RunState11();
                            });
  }
  Poll<Result> RunState11() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.f, [this]() {
      state_ = 12;
      return RunState12();
    });
  }
  Poll<Result> RunState12() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.f, [this]() {
      state_ = 13;
      return RunState13();
    });
  }
  Poll<Result> RunState13() {
    return RunState<Result>(&p_.p.p.p.p.p.p, &p_.p.p.p.p.p.f, [this]() {
      state_ = 14;
      return RunState14();
    });
  }
  Poll<Result> RunState14() {
    return RunState<Result>(&p_.p.p.p.p.p, &p_.p.p.p.p.f, [this]() {
      state_ = 15;
      return RunState15();
    });
  }
  Poll<Result> RunState15() {
    return RunState<Result>(&p_.p.p.p.p, &p_.p.p.p.f, [this]() {
      state_ = 16;
      return RunState16();
    });
  }
  Poll<Result> RunState16() {
    return RunState<Result>(&p_.p.p.p, &p_.p.p.f, [this]() {
      state_ = 17;
      return RunState17();
    });
  }
  Poll<Result> RunState17() {
    return RunState<Result>(&p_.p.p, &p_.p.f, [this]() {
      state_ = 18;
      return RunState18();
    });
  }
  Poll<Result> RunState18() {
    return RunState<Result>(&p_.p, &p_.f, [this]() {
      state_ = 19;
      return RunState19();
    });
  }
  Poll<Result> RunState19() {
    return RunState<Result>(&p_, &f_, [this]() {
      state_ = 20;
      return RunState20();
    });
  }
  Poll<Result> RunState20() { return f_(); }

 public:
  TrySeq(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
         F10 f10, F11 f11, F12 f12, F13 f13, F14 f14, F15 f15, F16 f16, F17 f17,
         F18 f18, F19 f19, F20 f20)
      : p_(std::move(f0), std::move(f1), std::move(f2), std::move(f3),
           std::move(f4), std::move(f5), std::move(f6), std::move(f7),
           std::move(f8), std::move(f9), std::move(f10), std::move(f11),
           std::move(f12), std::move(f13), std::move(f14), std::move(f15),
           std::move(f16), std::move(f17), std::move(f18), std::move(f19),
           std::move(f20)) {}
  TrySeq& operator=(const TrySeq&) = delete;
  TrySeq(const TrySeq& other) {
    assert(other.state_ == 0);
    new (&p_) State19(other.p_);
  }
  TrySeq(TrySeq&& other) {
    assert(other.state_ == 0);
    new (&p_) State19(std::move(other.p_));
  }
  ~TrySeq() {
    switch (state_) {
      case 0:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin0;
      case 1:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin1;
      case 2:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin2;
      case 3:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin3;
      case 4:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin4;
      case 5:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin5;
      case 6:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin6;
      case 7:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin7;
      case 8:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin8;
      case 9:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.f);
        goto fin9;
      case 10:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.f);
        goto fin10;
      case 11:
        Destruct(&p_.p.p.p.p.p.p.p.p.f);
        goto fin11;
      case 12:
        Destruct(&p_.p.p.p.p.p.p.p.f);
        goto fin12;
      case 13:
        Destruct(&p_.p.p.p.p.p.p.f);
        goto fin13;
      case 14:
        Destruct(&p_.p.p.p.p.p.f);
        goto fin14;
      case 15:
        Destruct(&p_.p.p.p.p.f);
        goto fin15;
      case 16:
        Destruct(&p_.p.p.p.f);
        goto fin16;
      case 17:
        Destruct(&p_.p.p.f);
        goto fin17;
      case 18:
        Destruct(&p_.p.f);
        goto fin18;
      case 19:
        Destruct(&p_.f);
        goto fin19;
      case 20:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin1:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin2:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin3:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin4:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin5:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin6:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin7:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin8:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.next);
  fin9:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.next);
  fin10:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.next);
  fin11:
    Destruct(&p_.p.p.p.p.p.p.p.p.next);
  fin12:
    Destruct(&p_.p.p.p.p.p.p.p.next);
  fin13:
    Destruct(&p_.p.p.p.p.p.p.next);
  fin14:
    Destruct(&p_.p.p.p.p.p.next);
  fin15:
    Destruct(&p_.p.p.p.p.next);
  fin16:
    Destruct(&p_.p.p.p.next);
  fin17:
    Destruct(&p_.p.p.next);
  fin18:
    Destruct(&p_.p.next);
  fin19:
    Destruct(&p_.next);
  }
  Poll<Result> operator()() {
    switch (state_) {
      case 0:
        return RunState0();
      case 1:
        return RunState1();
      case 2:
        return RunState2();
      case 3:
        return RunState3();
      case 4:
        return RunState4();
      case 5:
        return RunState5();
      case 6:
        return RunState6();
      case 7:
        return RunState7();
      case 8:
        return RunState8();
      case 9:
        return RunState9();
      case 10:
        return RunState10();
      case 11:
        return RunState11();
      case 12:
        return RunState12();
      case 13:
        return RunState13();
      case 14:
        return RunState14();
      case 15:
        return RunState15();
      case 16:
        return RunState16();
      case 17:
        return RunState17();
      case 18:
        return RunState18();
      case 19:
        return RunState19();
      case 20:
        return RunState20();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12, typename F13, typename F14,
          typename F15, typename F16, typename F17, typename F18, typename F19,
          typename F20, typename F21>
class TrySeq<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
             F15, F16, F17, F18, F19, F20, F21> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using State2 = IntermediateState<State1, F3, F0, F1, F2>;
  using State3 = IntermediateState<State2, F4, F0, F1, F2, F3>;
  using State4 = IntermediateState<State3, F5, F0, F1, F2, F3, F4>;
  using State5 = IntermediateState<State4, F6, F0, F1, F2, F3, F4, F5>;
  using State6 = IntermediateState<State5, F7, F0, F1, F2, F3, F4, F5, F6>;
  using State7 = IntermediateState<State6, F8, F0, F1, F2, F3, F4, F5, F6, F7>;
  using State8 =
      IntermediateState<State7, F9, F0, F1, F2, F3, F4, F5, F6, F7, F8>;
  using State9 =
      IntermediateState<State8, F10, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9>;
  using State10 = IntermediateState<State9, F11, F0, F1, F2, F3, F4, F5, F6, F7,
                                    F8, F9, F10>;
  using State11 = IntermediateState<State10, F12, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11>;
  using State12 = IntermediateState<State11, F13, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12>;
  using State13 = IntermediateState<State12, F14, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13>;
  using State14 = IntermediateState<State13, F15, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14>;
  using State15 = IntermediateState<State14, F16, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15>;
  using State16 =
      IntermediateState<State15, F17, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16>;
  using State17 =
      IntermediateState<State16, F18, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17>;
  using State18 =
      IntermediateState<State17, F19, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18>;
  using State19 =
      IntermediateState<State18, F20, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19>;
  using State20 =
      IntermediateState<State19, F21, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20>;
  using FLast = typename State20::Next::Promise;
  union {
    [[no_unique_address]] State20 p_;
    [[no_unique_address]] FLast f_;
  };
  using Result = typename decltype(
      std::declval<typename State20::Next::Promise>()())::Type;
  Poll<Result> RunState0() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 1;
                              return RunState1();
                            });
  }
  Poll<Result> RunState1() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 2;
                              return RunState2();
                            });
  }
  Poll<Result> RunState2() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 3;
                              return RunState3();
                            });
  }
  Poll<Result> RunState3() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 4;
                              return RunState4();
                            });
  }
  Poll<Result> RunState4() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 5;
                              return RunState5();
                            });
  }
  Poll<Result> RunState5() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 6;
                              return RunState6();
                            });
  }
  Poll<Result> RunState6() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 7;
                              return RunState7();
                            });
  }
  Poll<Result> RunState7() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 8;
                              return RunState8();
                            });
  }
  Poll<Result> RunState8() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 9;
                              return RunState9();
                            });
  }
  Poll<Result> RunState9() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 10;
                              return RunState10();
                            });
  }
  Poll<Result> RunState10() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 11;
                              return RunState11();
                            });
  }
  Poll<Result> RunState11() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 12;
                              return RunState12();
                            });
  }
  Poll<Result> RunState12() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.f, [this]() {
      state_ = 13;
      return RunState13();
    });
  }
  Poll<Result> RunState13() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.f, [this]() {
      state_ = 14;
      return RunState14();
    });
  }
  Poll<Result> RunState14() {
    return RunState<Result>(&p_.p.p.p.p.p.p, &p_.p.p.p.p.p.f, [this]() {
      state_ = 15;
      return RunState15();
    });
  }
  Poll<Result> RunState15() {
    return RunState<Result>(&p_.p.p.p.p.p, &p_.p.p.p.p.f, [this]() {
      state_ = 16;
      return RunState16();
    });
  }
  Poll<Result> RunState16() {
    return RunState<Result>(&p_.p.p.p.p, &p_.p.p.p.f, [this]() {
      state_ = 17;
      return RunState17();
    });
  }
  Poll<Result> RunState17() {
    return RunState<Result>(&p_.p.p.p, &p_.p.p.f, [this]() {
      state_ = 18;
      return RunState18();
    });
  }
  Poll<Result> RunState18() {
    return RunState<Result>(&p_.p.p, &p_.p.f, [this]() {
      state_ = 19;
      return RunState19();
    });
  }
  Poll<Result> RunState19() {
    return RunState<Result>(&p_.p, &p_.f, [this]() {
      state_ = 20;
      return RunState20();
    });
  }
  Poll<Result> RunState20() {
    return RunState<Result>(&p_, &f_, [this]() {
      state_ = 21;
      return RunState21();
    });
  }
  Poll<Result> RunState21() { return f_(); }

 public:
  TrySeq(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
         F10 f10, F11 f11, F12 f12, F13 f13, F14 f14, F15 f15, F16 f16, F17 f17,
         F18 f18, F19 f19, F20 f20, F21 f21)
      : p_(std::move(f0), std::move(f1), std::move(f2), std::move(f3),
           std::move(f4), std::move(f5), std::move(f6), std::move(f7),
           std::move(f8), std::move(f9), std::move(f10), std::move(f11),
           std::move(f12), std::move(f13), std::move(f14), std::move(f15),
           std::move(f16), std::move(f17), std::move(f18), std::move(f19),
           std::move(f20), std::move(f21)) {}
  TrySeq& operator=(const TrySeq&) = delete;
  TrySeq(const TrySeq& other) {
    assert(other.state_ == 0);
    new (&p_) State20(other.p_);
  }
  TrySeq(TrySeq&& other) {
    assert(other.state_ == 0);
    new (&p_) State20(std::move(other.p_));
  }
  ~TrySeq() {
    switch (state_) {
      case 0:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin0;
      case 1:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin1;
      case 2:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin2;
      case 3:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin3;
      case 4:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin4;
      case 5:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin5;
      case 6:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin6;
      case 7:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin7;
      case 8:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin8;
      case 9:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin9;
      case 10:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.f);
        goto fin10;
      case 11:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.f);
        goto fin11;
      case 12:
        Destruct(&p_.p.p.p.p.p.p.p.p.f);
        goto fin12;
      case 13:
        Destruct(&p_.p.p.p.p.p.p.p.f);
        goto fin13;
      case 14:
        Destruct(&p_.p.p.p.p.p.p.f);
        goto fin14;
      case 15:
        Destruct(&p_.p.p.p.p.p.f);
        goto fin15;
      case 16:
        Destruct(&p_.p.p.p.p.f);
        goto fin16;
      case 17:
        Destruct(&p_.p.p.p.f);
        goto fin17;
      case 18:
        Destruct(&p_.p.p.f);
        goto fin18;
      case 19:
        Destruct(&p_.p.f);
        goto fin19;
      case 20:
        Destruct(&p_.f);
        goto fin20;
      case 21:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin1:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin2:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin3:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin4:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin5:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin6:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin7:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin8:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin9:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.next);
  fin10:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.next);
  fin11:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.next);
  fin12:
    Destruct(&p_.p.p.p.p.p.p.p.p.next);
  fin13:
    Destruct(&p_.p.p.p.p.p.p.p.next);
  fin14:
    Destruct(&p_.p.p.p.p.p.p.next);
  fin15:
    Destruct(&p_.p.p.p.p.p.next);
  fin16:
    Destruct(&p_.p.p.p.p.next);
  fin17:
    Destruct(&p_.p.p.p.next);
  fin18:
    Destruct(&p_.p.p.next);
  fin19:
    Destruct(&p_.p.next);
  fin20:
    Destruct(&p_.next);
  }
  Poll<Result> operator()() {
    switch (state_) {
      case 0:
        return RunState0();
      case 1:
        return RunState1();
      case 2:
        return RunState2();
      case 3:
        return RunState3();
      case 4:
        return RunState4();
      case 5:
        return RunState5();
      case 6:
        return RunState6();
      case 7:
        return RunState7();
      case 8:
        return RunState8();
      case 9:
        return RunState9();
      case 10:
        return RunState10();
      case 11:
        return RunState11();
      case 12:
        return RunState12();
      case 13:
        return RunState13();
      case 14:
        return RunState14();
      case 15:
        return RunState15();
      case 16:
        return RunState16();
      case 17:
        return RunState17();
      case 18:
        return RunState18();
      case 19:
        return RunState19();
      case 20:
        return RunState20();
      case 21:
        return RunState21();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12, typename F13, typename F14,
          typename F15, typename F16, typename F17, typename F18, typename F19,
          typename F20, typename F21, typename F22>
class TrySeq<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
             F15, F16, F17, F18, F19, F20, F21, F22> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using State2 = IntermediateState<State1, F3, F0, F1, F2>;
  using State3 = IntermediateState<State2, F4, F0, F1, F2, F3>;
  using State4 = IntermediateState<State3, F5, F0, F1, F2, F3, F4>;
  using State5 = IntermediateState<State4, F6, F0, F1, F2, F3, F4, F5>;
  using State6 = IntermediateState<State5, F7, F0, F1, F2, F3, F4, F5, F6>;
  using State7 = IntermediateState<State6, F8, F0, F1, F2, F3, F4, F5, F6, F7>;
  using State8 =
      IntermediateState<State7, F9, F0, F1, F2, F3, F4, F5, F6, F7, F8>;
  using State9 =
      IntermediateState<State8, F10, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9>;
  using State10 = IntermediateState<State9, F11, F0, F1, F2, F3, F4, F5, F6, F7,
                                    F8, F9, F10>;
  using State11 = IntermediateState<State10, F12, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11>;
  using State12 = IntermediateState<State11, F13, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12>;
  using State13 = IntermediateState<State12, F14, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13>;
  using State14 = IntermediateState<State13, F15, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14>;
  using State15 = IntermediateState<State14, F16, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15>;
  using State16 =
      IntermediateState<State15, F17, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16>;
  using State17 =
      IntermediateState<State16, F18, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17>;
  using State18 =
      IntermediateState<State17, F19, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18>;
  using State19 =
      IntermediateState<State18, F20, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19>;
  using State20 =
      IntermediateState<State19, F21, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20>;
  using State21 = IntermediateState<State20, F22, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15,
                                    F16, F17, F18, F19, F20, F21>;
  using FLast = typename State21::Next::Promise;
  union {
    [[no_unique_address]] State21 p_;
    [[no_unique_address]] FLast f_;
  };
  using Result = typename decltype(
      std::declval<typename State21::Next::Promise>()())::Type;
  Poll<Result> RunState0() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 1;
                              return RunState1();
                            });
  }
  Poll<Result> RunState1() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 2;
                              return RunState2();
                            });
  }
  Poll<Result> RunState2() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 3;
                              return RunState3();
                            });
  }
  Poll<Result> RunState3() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 4;
                              return RunState4();
                            });
  }
  Poll<Result> RunState4() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 5;
                              return RunState5();
                            });
  }
  Poll<Result> RunState5() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 6;
                              return RunState6();
                            });
  }
  Poll<Result> RunState6() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 7;
                              return RunState7();
                            });
  }
  Poll<Result> RunState7() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 8;
                              return RunState8();
                            });
  }
  Poll<Result> RunState8() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 9;
                              return RunState9();
                            });
  }
  Poll<Result> RunState9() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 10;
                              return RunState10();
                            });
  }
  Poll<Result> RunState10() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 11;
                              return RunState11();
                            });
  }
  Poll<Result> RunState11() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 12;
                              return RunState12();
                            });
  }
  Poll<Result> RunState12() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 13;
                              return RunState13();
                            });
  }
  Poll<Result> RunState13() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.f, [this]() {
      state_ = 14;
      return RunState14();
    });
  }
  Poll<Result> RunState14() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.f, [this]() {
      state_ = 15;
      return RunState15();
    });
  }
  Poll<Result> RunState15() {
    return RunState<Result>(&p_.p.p.p.p.p.p, &p_.p.p.p.p.p.f, [this]() {
      state_ = 16;
      return RunState16();
    });
  }
  Poll<Result> RunState16() {
    return RunState<Result>(&p_.p.p.p.p.p, &p_.p.p.p.p.f, [this]() {
      state_ = 17;
      return RunState17();
    });
  }
  Poll<Result> RunState17() {
    return RunState<Result>(&p_.p.p.p.p, &p_.p.p.p.f, [this]() {
      state_ = 18;
      return RunState18();
    });
  }
  Poll<Result> RunState18() {
    return RunState<Result>(&p_.p.p.p, &p_.p.p.f, [this]() {
      state_ = 19;
      return RunState19();
    });
  }
  Poll<Result> RunState19() {
    return RunState<Result>(&p_.p.p, &p_.p.f, [this]() {
      state_ = 20;
      return RunState20();
    });
  }
  Poll<Result> RunState20() {
    return RunState<Result>(&p_.p, &p_.f, [this]() {
      state_ = 21;
      return RunState21();
    });
  }
  Poll<Result> RunState21() {
    return RunState<Result>(&p_, &f_, [this]() {
      state_ = 22;
      return RunState22();
    });
  }
  Poll<Result> RunState22() { return f_(); }

 public:
  TrySeq(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
         F10 f10, F11 f11, F12 f12, F13 f13, F14 f14, F15 f15, F16 f16, F17 f17,
         F18 f18, F19 f19, F20 f20, F21 f21, F22 f22)
      : p_(std::move(f0), std::move(f1), std::move(f2), std::move(f3),
           std::move(f4), std::move(f5), std::move(f6), std::move(f7),
           std::move(f8), std::move(f9), std::move(f10), std::move(f11),
           std::move(f12), std::move(f13), std::move(f14), std::move(f15),
           std::move(f16), std::move(f17), std::move(f18), std::move(f19),
           std::move(f20), std::move(f21), std::move(f22)) {}
  TrySeq& operator=(const TrySeq&) = delete;
  TrySeq(const TrySeq& other) {
    assert(other.state_ == 0);
    new (&p_) State21(other.p_);
  }
  TrySeq(TrySeq&& other) {
    assert(other.state_ == 0);
    new (&p_) State21(std::move(other.p_));
  }
  ~TrySeq() {
    switch (state_) {
      case 0:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin0;
      case 1:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin1;
      case 2:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin2;
      case 3:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin3;
      case 4:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin4;
      case 5:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin5;
      case 6:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin6;
      case 7:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin7;
      case 8:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin8;
      case 9:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin9;
      case 10:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin10;
      case 11:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.f);
        goto fin11;
      case 12:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.f);
        goto fin12;
      case 13:
        Destruct(&p_.p.p.p.p.p.p.p.p.f);
        goto fin13;
      case 14:
        Destruct(&p_.p.p.p.p.p.p.p.f);
        goto fin14;
      case 15:
        Destruct(&p_.p.p.p.p.p.p.f);
        goto fin15;
      case 16:
        Destruct(&p_.p.p.p.p.p.f);
        goto fin16;
      case 17:
        Destruct(&p_.p.p.p.p.f);
        goto fin17;
      case 18:
        Destruct(&p_.p.p.p.f);
        goto fin18;
      case 19:
        Destruct(&p_.p.p.f);
        goto fin19;
      case 20:
        Destruct(&p_.p.f);
        goto fin20;
      case 21:
        Destruct(&p_.f);
        goto fin21;
      case 22:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin1:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin2:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin3:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin4:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin5:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin6:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin7:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin8:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin9:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin10:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.next);
  fin11:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.next);
  fin12:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.next);
  fin13:
    Destruct(&p_.p.p.p.p.p.p.p.p.next);
  fin14:
    Destruct(&p_.p.p.p.p.p.p.p.next);
  fin15:
    Destruct(&p_.p.p.p.p.p.p.next);
  fin16:
    Destruct(&p_.p.p.p.p.p.next);
  fin17:
    Destruct(&p_.p.p.p.p.next);
  fin18:
    Destruct(&p_.p.p.p.next);
  fin19:
    Destruct(&p_.p.p.next);
  fin20:
    Destruct(&p_.p.next);
  fin21:
    Destruct(&p_.next);
  }
  Poll<Result> operator()() {
    switch (state_) {
      case 0:
        return RunState0();
      case 1:
        return RunState1();
      case 2:
        return RunState2();
      case 3:
        return RunState3();
      case 4:
        return RunState4();
      case 5:
        return RunState5();
      case 6:
        return RunState6();
      case 7:
        return RunState7();
      case 8:
        return RunState8();
      case 9:
        return RunState9();
      case 10:
        return RunState10();
      case 11:
        return RunState11();
      case 12:
        return RunState12();
      case 13:
        return RunState13();
      case 14:
        return RunState14();
      case 15:
        return RunState15();
      case 16:
        return RunState16();
      case 17:
        return RunState17();
      case 18:
        return RunState18();
      case 19:
        return RunState19();
      case 20:
        return RunState20();
      case 21:
        return RunState21();
      case 22:
        return RunState22();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12, typename F13, typename F14,
          typename F15, typename F16, typename F17, typename F18, typename F19,
          typename F20, typename F21, typename F22, typename F23>
class TrySeq<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
             F15, F16, F17, F18, F19, F20, F21, F22, F23> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using State2 = IntermediateState<State1, F3, F0, F1, F2>;
  using State3 = IntermediateState<State2, F4, F0, F1, F2, F3>;
  using State4 = IntermediateState<State3, F5, F0, F1, F2, F3, F4>;
  using State5 = IntermediateState<State4, F6, F0, F1, F2, F3, F4, F5>;
  using State6 = IntermediateState<State5, F7, F0, F1, F2, F3, F4, F5, F6>;
  using State7 = IntermediateState<State6, F8, F0, F1, F2, F3, F4, F5, F6, F7>;
  using State8 =
      IntermediateState<State7, F9, F0, F1, F2, F3, F4, F5, F6, F7, F8>;
  using State9 =
      IntermediateState<State8, F10, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9>;
  using State10 = IntermediateState<State9, F11, F0, F1, F2, F3, F4, F5, F6, F7,
                                    F8, F9, F10>;
  using State11 = IntermediateState<State10, F12, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11>;
  using State12 = IntermediateState<State11, F13, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12>;
  using State13 = IntermediateState<State12, F14, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13>;
  using State14 = IntermediateState<State13, F15, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14>;
  using State15 = IntermediateState<State14, F16, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15>;
  using State16 =
      IntermediateState<State15, F17, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16>;
  using State17 =
      IntermediateState<State16, F18, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17>;
  using State18 =
      IntermediateState<State17, F19, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18>;
  using State19 =
      IntermediateState<State18, F20, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19>;
  using State20 =
      IntermediateState<State19, F21, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20>;
  using State21 = IntermediateState<State20, F22, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15,
                                    F16, F17, F18, F19, F20, F21>;
  using State22 = IntermediateState<State21, F23, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15,
                                    F16, F17, F18, F19, F20, F21, F22>;
  using FLast = typename State22::Next::Promise;
  union {
    [[no_unique_address]] State22 p_;
    [[no_unique_address]] FLast f_;
  };
  using Result = typename decltype(
      std::declval<typename State22::Next::Promise>()())::Type;
  Poll<Result> RunState0() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 1;
                              return RunState1();
                            });
  }
  Poll<Result> RunState1() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 2;
                              return RunState2();
                            });
  }
  Poll<Result> RunState2() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 3;
                              return RunState3();
                            });
  }
  Poll<Result> RunState3() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 4;
                              return RunState4();
                            });
  }
  Poll<Result> RunState4() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 5;
                              return RunState5();
                            });
  }
  Poll<Result> RunState5() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 6;
                              return RunState6();
                            });
  }
  Poll<Result> RunState6() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 7;
                              return RunState7();
                            });
  }
  Poll<Result> RunState7() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 8;
                              return RunState8();
                            });
  }
  Poll<Result> RunState8() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 9;
                              return RunState9();
                            });
  }
  Poll<Result> RunState9() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 10;
                              return RunState10();
                            });
  }
  Poll<Result> RunState10() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 11;
                              return RunState11();
                            });
  }
  Poll<Result> RunState11() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 12;
                              return RunState12();
                            });
  }
  Poll<Result> RunState12() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 13;
                              return RunState13();
                            });
  }
  Poll<Result> RunState13() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 14;
                              return RunState14();
                            });
  }
  Poll<Result> RunState14() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.f, [this]() {
      state_ = 15;
      return RunState15();
    });
  }
  Poll<Result> RunState15() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.f, [this]() {
      state_ = 16;
      return RunState16();
    });
  }
  Poll<Result> RunState16() {
    return RunState<Result>(&p_.p.p.p.p.p.p, &p_.p.p.p.p.p.f, [this]() {
      state_ = 17;
      return RunState17();
    });
  }
  Poll<Result> RunState17() {
    return RunState<Result>(&p_.p.p.p.p.p, &p_.p.p.p.p.f, [this]() {
      state_ = 18;
      return RunState18();
    });
  }
  Poll<Result> RunState18() {
    return RunState<Result>(&p_.p.p.p.p, &p_.p.p.p.f, [this]() {
      state_ = 19;
      return RunState19();
    });
  }
  Poll<Result> RunState19() {
    return RunState<Result>(&p_.p.p.p, &p_.p.p.f, [this]() {
      state_ = 20;
      return RunState20();
    });
  }
  Poll<Result> RunState20() {
    return RunState<Result>(&p_.p.p, &p_.p.f, [this]() {
      state_ = 21;
      return RunState21();
    });
  }
  Poll<Result> RunState21() {
    return RunState<Result>(&p_.p, &p_.f, [this]() {
      state_ = 22;
      return RunState22();
    });
  }
  Poll<Result> RunState22() {
    return RunState<Result>(&p_, &f_, [this]() {
      state_ = 23;
      return RunState23();
    });
  }
  Poll<Result> RunState23() { return f_(); }

 public:
  TrySeq(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
         F10 f10, F11 f11, F12 f12, F13 f13, F14 f14, F15 f15, F16 f16, F17 f17,
         F18 f18, F19 f19, F20 f20, F21 f21, F22 f22, F23 f23)
      : p_(std::move(f0), std::move(f1), std::move(f2), std::move(f3),
           std::move(f4), std::move(f5), std::move(f6), std::move(f7),
           std::move(f8), std::move(f9), std::move(f10), std::move(f11),
           std::move(f12), std::move(f13), std::move(f14), std::move(f15),
           std::move(f16), std::move(f17), std::move(f18), std::move(f19),
           std::move(f20), std::move(f21), std::move(f22), std::move(f23)) {}
  TrySeq& operator=(const TrySeq&) = delete;
  TrySeq(const TrySeq& other) {
    assert(other.state_ == 0);
    new (&p_) State22(other.p_);
  }
  TrySeq(TrySeq&& other) {
    assert(other.state_ == 0);
    new (&p_) State22(std::move(other.p_));
  }
  ~TrySeq() {
    switch (state_) {
      case 0:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin0;
      case 1:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin1;
      case 2:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin2;
      case 3:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin3;
      case 4:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin4;
      case 5:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin5;
      case 6:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin6;
      case 7:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin7;
      case 8:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin8;
      case 9:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin9;
      case 10:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin10;
      case 11:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin11;
      case 12:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.f);
        goto fin12;
      case 13:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.f);
        goto fin13;
      case 14:
        Destruct(&p_.p.p.p.p.p.p.p.p.f);
        goto fin14;
      case 15:
        Destruct(&p_.p.p.p.p.p.p.p.f);
        goto fin15;
      case 16:
        Destruct(&p_.p.p.p.p.p.p.f);
        goto fin16;
      case 17:
        Destruct(&p_.p.p.p.p.p.f);
        goto fin17;
      case 18:
        Destruct(&p_.p.p.p.p.f);
        goto fin18;
      case 19:
        Destruct(&p_.p.p.p.f);
        goto fin19;
      case 20:
        Destruct(&p_.p.p.f);
        goto fin20;
      case 21:
        Destruct(&p_.p.f);
        goto fin21;
      case 22:
        Destruct(&p_.f);
        goto fin22;
      case 23:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin1:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin2:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin3:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin4:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin5:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin6:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin7:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin8:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin9:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin10:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin11:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.next);
  fin12:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.next);
  fin13:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.next);
  fin14:
    Destruct(&p_.p.p.p.p.p.p.p.p.next);
  fin15:
    Destruct(&p_.p.p.p.p.p.p.p.next);
  fin16:
    Destruct(&p_.p.p.p.p.p.p.next);
  fin17:
    Destruct(&p_.p.p.p.p.p.next);
  fin18:
    Destruct(&p_.p.p.p.p.next);
  fin19:
    Destruct(&p_.p.p.p.next);
  fin20:
    Destruct(&p_.p.p.next);
  fin21:
    Destruct(&p_.p.next);
  fin22:
    Destruct(&p_.next);
  }
  Poll<Result> operator()() {
    switch (state_) {
      case 0:
        return RunState0();
      case 1:
        return RunState1();
      case 2:
        return RunState2();
      case 3:
        return RunState3();
      case 4:
        return RunState4();
      case 5:
        return RunState5();
      case 6:
        return RunState6();
      case 7:
        return RunState7();
      case 8:
        return RunState8();
      case 9:
        return RunState9();
      case 10:
        return RunState10();
      case 11:
        return RunState11();
      case 12:
        return RunState12();
      case 13:
        return RunState13();
      case 14:
        return RunState14();
      case 15:
        return RunState15();
      case 16:
        return RunState16();
      case 17:
        return RunState17();
      case 18:
        return RunState18();
      case 19:
        return RunState19();
      case 20:
        return RunState20();
      case 21:
        return RunState21();
      case 22:
        return RunState22();
      case 23:
        return RunState23();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12, typename F13, typename F14,
          typename F15, typename F16, typename F17, typename F18, typename F19,
          typename F20, typename F21, typename F22, typename F23, typename F24>
class TrySeq<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
             F15, F16, F17, F18, F19, F20, F21, F22, F23, F24> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using State2 = IntermediateState<State1, F3, F0, F1, F2>;
  using State3 = IntermediateState<State2, F4, F0, F1, F2, F3>;
  using State4 = IntermediateState<State3, F5, F0, F1, F2, F3, F4>;
  using State5 = IntermediateState<State4, F6, F0, F1, F2, F3, F4, F5>;
  using State6 = IntermediateState<State5, F7, F0, F1, F2, F3, F4, F5, F6>;
  using State7 = IntermediateState<State6, F8, F0, F1, F2, F3, F4, F5, F6, F7>;
  using State8 =
      IntermediateState<State7, F9, F0, F1, F2, F3, F4, F5, F6, F7, F8>;
  using State9 =
      IntermediateState<State8, F10, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9>;
  using State10 = IntermediateState<State9, F11, F0, F1, F2, F3, F4, F5, F6, F7,
                                    F8, F9, F10>;
  using State11 = IntermediateState<State10, F12, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11>;
  using State12 = IntermediateState<State11, F13, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12>;
  using State13 = IntermediateState<State12, F14, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13>;
  using State14 = IntermediateState<State13, F15, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14>;
  using State15 = IntermediateState<State14, F16, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15>;
  using State16 =
      IntermediateState<State15, F17, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16>;
  using State17 =
      IntermediateState<State16, F18, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17>;
  using State18 =
      IntermediateState<State17, F19, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18>;
  using State19 =
      IntermediateState<State18, F20, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19>;
  using State20 =
      IntermediateState<State19, F21, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20>;
  using State21 = IntermediateState<State20, F22, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15,
                                    F16, F17, F18, F19, F20, F21>;
  using State22 = IntermediateState<State21, F23, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15,
                                    F16, F17, F18, F19, F20, F21, F22>;
  using State23 = IntermediateState<State22, F24, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15,
                                    F16, F17, F18, F19, F20, F21, F22, F23>;
  using FLast = typename State23::Next::Promise;
  union {
    [[no_unique_address]] State23 p_;
    [[no_unique_address]] FLast f_;
  };
  using Result = typename decltype(
      std::declval<typename State23::Next::Promise>()())::Type;
  Poll<Result> RunState0() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 1;
                              return RunState1();
                            });
  }
  Poll<Result> RunState1() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 2;
                              return RunState2();
                            });
  }
  Poll<Result> RunState2() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 3;
                              return RunState3();
                            });
  }
  Poll<Result> RunState3() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 4;
                              return RunState4();
                            });
  }
  Poll<Result> RunState4() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 5;
                              return RunState5();
                            });
  }
  Poll<Result> RunState5() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 6;
                              return RunState6();
                            });
  }
  Poll<Result> RunState6() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 7;
                              return RunState7();
                            });
  }
  Poll<Result> RunState7() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 8;
                              return RunState8();
                            });
  }
  Poll<Result> RunState8() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 9;
                              return RunState9();
                            });
  }
  Poll<Result> RunState9() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 10;
                              return RunState10();
                            });
  }
  Poll<Result> RunState10() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 11;
                              return RunState11();
                            });
  }
  Poll<Result> RunState11() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 12;
                              return RunState12();
                            });
  }
  Poll<Result> RunState12() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 13;
                              return RunState13();
                            });
  }
  Poll<Result> RunState13() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 14;
                              return RunState14();
                            });
  }
  Poll<Result> RunState14() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 15;
                              return RunState15();
                            });
  }
  Poll<Result> RunState15() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.f, [this]() {
      state_ = 16;
      return RunState16();
    });
  }
  Poll<Result> RunState16() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.f, [this]() {
      state_ = 17;
      return RunState17();
    });
  }
  Poll<Result> RunState17() {
    return RunState<Result>(&p_.p.p.p.p.p.p, &p_.p.p.p.p.p.f, [this]() {
      state_ = 18;
      return RunState18();
    });
  }
  Poll<Result> RunState18() {
    return RunState<Result>(&p_.p.p.p.p.p, &p_.p.p.p.p.f, [this]() {
      state_ = 19;
      return RunState19();
    });
  }
  Poll<Result> RunState19() {
    return RunState<Result>(&p_.p.p.p.p, &p_.p.p.p.f, [this]() {
      state_ = 20;
      return RunState20();
    });
  }
  Poll<Result> RunState20() {
    return RunState<Result>(&p_.p.p.p, &p_.p.p.f, [this]() {
      state_ = 21;
      return RunState21();
    });
  }
  Poll<Result> RunState21() {
    return RunState<Result>(&p_.p.p, &p_.p.f, [this]() {
      state_ = 22;
      return RunState22();
    });
  }
  Poll<Result> RunState22() {
    return RunState<Result>(&p_.p, &p_.f, [this]() {
      state_ = 23;
      return RunState23();
    });
  }
  Poll<Result> RunState23() {
    return RunState<Result>(&p_, &f_, [this]() {
      state_ = 24;
      return RunState24();
    });
  }
  Poll<Result> RunState24() { return f_(); }

 public:
  TrySeq(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
         F10 f10, F11 f11, F12 f12, F13 f13, F14 f14, F15 f15, F16 f16, F17 f17,
         F18 f18, F19 f19, F20 f20, F21 f21, F22 f22, F23 f23, F24 f24)
      : p_(std::move(f0), std::move(f1), std::move(f2), std::move(f3),
           std::move(f4), std::move(f5), std::move(f6), std::move(f7),
           std::move(f8), std::move(f9), std::move(f10), std::move(f11),
           std::move(f12), std::move(f13), std::move(f14), std::move(f15),
           std::move(f16), std::move(f17), std::move(f18), std::move(f19),
           std::move(f20), std::move(f21), std::move(f22), std::move(f23),
           std::move(f24)) {}
  TrySeq& operator=(const TrySeq&) = delete;
  TrySeq(const TrySeq& other) {
    assert(other.state_ == 0);
    new (&p_) State23(other.p_);
  }
  TrySeq(TrySeq&& other) {
    assert(other.state_ == 0);
    new (&p_) State23(std::move(other.p_));
  }
  ~TrySeq() {
    switch (state_) {
      case 0:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin0;
      case 1:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin1;
      case 2:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin2;
      case 3:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin3;
      case 4:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin4;
      case 5:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin5;
      case 6:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin6;
      case 7:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin7;
      case 8:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin8;
      case 9:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin9;
      case 10:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin10;
      case 11:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin11;
      case 12:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin12;
      case 13:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.f);
        goto fin13;
      case 14:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.f);
        goto fin14;
      case 15:
        Destruct(&p_.p.p.p.p.p.p.p.p.f);
        goto fin15;
      case 16:
        Destruct(&p_.p.p.p.p.p.p.p.f);
        goto fin16;
      case 17:
        Destruct(&p_.p.p.p.p.p.p.f);
        goto fin17;
      case 18:
        Destruct(&p_.p.p.p.p.p.f);
        goto fin18;
      case 19:
        Destruct(&p_.p.p.p.p.f);
        goto fin19;
      case 20:
        Destruct(&p_.p.p.p.f);
        goto fin20;
      case 21:
        Destruct(&p_.p.p.f);
        goto fin21;
      case 22:
        Destruct(&p_.p.f);
        goto fin22;
      case 23:
        Destruct(&p_.f);
        goto fin23;
      case 24:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin1:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin2:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin3:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin4:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin5:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin6:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin7:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin8:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin9:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin10:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin11:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin12:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.next);
  fin13:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.next);
  fin14:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.next);
  fin15:
    Destruct(&p_.p.p.p.p.p.p.p.p.next);
  fin16:
    Destruct(&p_.p.p.p.p.p.p.p.next);
  fin17:
    Destruct(&p_.p.p.p.p.p.p.next);
  fin18:
    Destruct(&p_.p.p.p.p.p.next);
  fin19:
    Destruct(&p_.p.p.p.p.next);
  fin20:
    Destruct(&p_.p.p.p.next);
  fin21:
    Destruct(&p_.p.p.next);
  fin22:
    Destruct(&p_.p.next);
  fin23:
    Destruct(&p_.next);
  }
  Poll<Result> operator()() {
    switch (state_) {
      case 0:
        return RunState0();
      case 1:
        return RunState1();
      case 2:
        return RunState2();
      case 3:
        return RunState3();
      case 4:
        return RunState4();
      case 5:
        return RunState5();
      case 6:
        return RunState6();
      case 7:
        return RunState7();
      case 8:
        return RunState8();
      case 9:
        return RunState9();
      case 10:
        return RunState10();
      case 11:
        return RunState11();
      case 12:
        return RunState12();
      case 13:
        return RunState13();
      case 14:
        return RunState14();
      case 15:
        return RunState15();
      case 16:
        return RunState16();
      case 17:
        return RunState17();
      case 18:
        return RunState18();
      case 19:
        return RunState19();
      case 20:
        return RunState20();
      case 21:
        return RunState21();
      case 22:
        return RunState22();
      case 23:
        return RunState23();
      case 24:
        return RunState24();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12, typename F13, typename F14,
          typename F15, typename F16, typename F17, typename F18, typename F19,
          typename F20, typename F21, typename F22, typename F23, typename F24,
          typename F25>
class TrySeq<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
             F15, F16, F17, F18, F19, F20, F21, F22, F23, F24, F25> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using State2 = IntermediateState<State1, F3, F0, F1, F2>;
  using State3 = IntermediateState<State2, F4, F0, F1, F2, F3>;
  using State4 = IntermediateState<State3, F5, F0, F1, F2, F3, F4>;
  using State5 = IntermediateState<State4, F6, F0, F1, F2, F3, F4, F5>;
  using State6 = IntermediateState<State5, F7, F0, F1, F2, F3, F4, F5, F6>;
  using State7 = IntermediateState<State6, F8, F0, F1, F2, F3, F4, F5, F6, F7>;
  using State8 =
      IntermediateState<State7, F9, F0, F1, F2, F3, F4, F5, F6, F7, F8>;
  using State9 =
      IntermediateState<State8, F10, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9>;
  using State10 = IntermediateState<State9, F11, F0, F1, F2, F3, F4, F5, F6, F7,
                                    F8, F9, F10>;
  using State11 = IntermediateState<State10, F12, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11>;
  using State12 = IntermediateState<State11, F13, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12>;
  using State13 = IntermediateState<State12, F14, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13>;
  using State14 = IntermediateState<State13, F15, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14>;
  using State15 = IntermediateState<State14, F16, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15>;
  using State16 =
      IntermediateState<State15, F17, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16>;
  using State17 =
      IntermediateState<State16, F18, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17>;
  using State18 =
      IntermediateState<State17, F19, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18>;
  using State19 =
      IntermediateState<State18, F20, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19>;
  using State20 =
      IntermediateState<State19, F21, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20>;
  using State21 = IntermediateState<State20, F22, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15,
                                    F16, F17, F18, F19, F20, F21>;
  using State22 = IntermediateState<State21, F23, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15,
                                    F16, F17, F18, F19, F20, F21, F22>;
  using State23 = IntermediateState<State22, F24, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15,
                                    F16, F17, F18, F19, F20, F21, F22, F23>;
  using State24 =
      IntermediateState<State23, F25, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
                        F21, F22, F23, F24>;
  using FLast = typename State24::Next::Promise;
  union {
    [[no_unique_address]] State24 p_;
    [[no_unique_address]] FLast f_;
  };
  using Result = typename decltype(
      std::declval<typename State24::Next::Promise>()())::Type;
  Poll<Result> RunState0() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 1;
                              return RunState1();
                            });
  }
  Poll<Result> RunState1() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 2;
                              return RunState2();
                            });
  }
  Poll<Result> RunState2() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 3;
                              return RunState3();
                            });
  }
  Poll<Result> RunState3() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 4;
                              return RunState4();
                            });
  }
  Poll<Result> RunState4() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 5;
                              return RunState5();
                            });
  }
  Poll<Result> RunState5() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 6;
                              return RunState6();
                            });
  }
  Poll<Result> RunState6() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 7;
                              return RunState7();
                            });
  }
  Poll<Result> RunState7() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 8;
                              return RunState8();
                            });
  }
  Poll<Result> RunState8() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 9;
                              return RunState9();
                            });
  }
  Poll<Result> RunState9() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 10;
                              return RunState10();
                            });
  }
  Poll<Result> RunState10() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 11;
                              return RunState11();
                            });
  }
  Poll<Result> RunState11() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 12;
                              return RunState12();
                            });
  }
  Poll<Result> RunState12() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 13;
                              return RunState13();
                            });
  }
  Poll<Result> RunState13() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 14;
                              return RunState14();
                            });
  }
  Poll<Result> RunState14() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 15;
                              return RunState15();
                            });
  }
  Poll<Result> RunState15() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 16;
                              return RunState16();
                            });
  }
  Poll<Result> RunState16() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.f, [this]() {
      state_ = 17;
      return RunState17();
    });
  }
  Poll<Result> RunState17() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.f, [this]() {
      state_ = 18;
      return RunState18();
    });
  }
  Poll<Result> RunState18() {
    return RunState<Result>(&p_.p.p.p.p.p.p, &p_.p.p.p.p.p.f, [this]() {
      state_ = 19;
      return RunState19();
    });
  }
  Poll<Result> RunState19() {
    return RunState<Result>(&p_.p.p.p.p.p, &p_.p.p.p.p.f, [this]() {
      state_ = 20;
      return RunState20();
    });
  }
  Poll<Result> RunState20() {
    return RunState<Result>(&p_.p.p.p.p, &p_.p.p.p.f, [this]() {
      state_ = 21;
      return RunState21();
    });
  }
  Poll<Result> RunState21() {
    return RunState<Result>(&p_.p.p.p, &p_.p.p.f, [this]() {
      state_ = 22;
      return RunState22();
    });
  }
  Poll<Result> RunState22() {
    return RunState<Result>(&p_.p.p, &p_.p.f, [this]() {
      state_ = 23;
      return RunState23();
    });
  }
  Poll<Result> RunState23() {
    return RunState<Result>(&p_.p, &p_.f, [this]() {
      state_ = 24;
      return RunState24();
    });
  }
  Poll<Result> RunState24() {
    return RunState<Result>(&p_, &f_, [this]() {
      state_ = 25;
      return RunState25();
    });
  }
  Poll<Result> RunState25() { return f_(); }

 public:
  TrySeq(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
         F10 f10, F11 f11, F12 f12, F13 f13, F14 f14, F15 f15, F16 f16, F17 f17,
         F18 f18, F19 f19, F20 f20, F21 f21, F22 f22, F23 f23, F24 f24, F25 f25)
      : p_(std::move(f0), std::move(f1), std::move(f2), std::move(f3),
           std::move(f4), std::move(f5), std::move(f6), std::move(f7),
           std::move(f8), std::move(f9), std::move(f10), std::move(f11),
           std::move(f12), std::move(f13), std::move(f14), std::move(f15),
           std::move(f16), std::move(f17), std::move(f18), std::move(f19),
           std::move(f20), std::move(f21), std::move(f22), std::move(f23),
           std::move(f24), std::move(f25)) {}
  TrySeq& operator=(const TrySeq&) = delete;
  TrySeq(const TrySeq& other) {
    assert(other.state_ == 0);
    new (&p_) State24(other.p_);
  }
  TrySeq(TrySeq&& other) {
    assert(other.state_ == 0);
    new (&p_) State24(std::move(other.p_));
  }
  ~TrySeq() {
    switch (state_) {
      case 0:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin0;
      case 1:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin1;
      case 2:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin2;
      case 3:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin3;
      case 4:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin4;
      case 5:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin5;
      case 6:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin6;
      case 7:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin7;
      case 8:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin8;
      case 9:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin9;
      case 10:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin10;
      case 11:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin11;
      case 12:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin12;
      case 13:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin13;
      case 14:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.f);
        goto fin14;
      case 15:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.f);
        goto fin15;
      case 16:
        Destruct(&p_.p.p.p.p.p.p.p.p.f);
        goto fin16;
      case 17:
        Destruct(&p_.p.p.p.p.p.p.p.f);
        goto fin17;
      case 18:
        Destruct(&p_.p.p.p.p.p.p.f);
        goto fin18;
      case 19:
        Destruct(&p_.p.p.p.p.p.f);
        goto fin19;
      case 20:
        Destruct(&p_.p.p.p.p.f);
        goto fin20;
      case 21:
        Destruct(&p_.p.p.p.f);
        goto fin21;
      case 22:
        Destruct(&p_.p.p.f);
        goto fin22;
      case 23:
        Destruct(&p_.p.f);
        goto fin23;
      case 24:
        Destruct(&p_.f);
        goto fin24;
      case 25:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin1:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin2:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin3:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin4:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin5:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin6:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin7:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin8:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin9:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin10:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin11:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin12:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin13:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.next);
  fin14:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.next);
  fin15:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.next);
  fin16:
    Destruct(&p_.p.p.p.p.p.p.p.p.next);
  fin17:
    Destruct(&p_.p.p.p.p.p.p.p.next);
  fin18:
    Destruct(&p_.p.p.p.p.p.p.next);
  fin19:
    Destruct(&p_.p.p.p.p.p.next);
  fin20:
    Destruct(&p_.p.p.p.p.next);
  fin21:
    Destruct(&p_.p.p.p.next);
  fin22:
    Destruct(&p_.p.p.next);
  fin23:
    Destruct(&p_.p.next);
  fin24:
    Destruct(&p_.next);
  }
  Poll<Result> operator()() {
    switch (state_) {
      case 0:
        return RunState0();
      case 1:
        return RunState1();
      case 2:
        return RunState2();
      case 3:
        return RunState3();
      case 4:
        return RunState4();
      case 5:
        return RunState5();
      case 6:
        return RunState6();
      case 7:
        return RunState7();
      case 8:
        return RunState8();
      case 9:
        return RunState9();
      case 10:
        return RunState10();
      case 11:
        return RunState11();
      case 12:
        return RunState12();
      case 13:
        return RunState13();
      case 14:
        return RunState14();
      case 15:
        return RunState15();
      case 16:
        return RunState16();
      case 17:
        return RunState17();
      case 18:
        return RunState18();
      case 19:
        return RunState19();
      case 20:
        return RunState20();
      case 21:
        return RunState21();
      case 22:
        return RunState22();
      case 23:
        return RunState23();
      case 24:
        return RunState24();
      case 25:
        return RunState25();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12, typename F13, typename F14,
          typename F15, typename F16, typename F17, typename F18, typename F19,
          typename F20, typename F21, typename F22, typename F23, typename F24,
          typename F25, typename F26>
class TrySeq<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
             F15, F16, F17, F18, F19, F20, F21, F22, F23, F24, F25, F26> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using State2 = IntermediateState<State1, F3, F0, F1, F2>;
  using State3 = IntermediateState<State2, F4, F0, F1, F2, F3>;
  using State4 = IntermediateState<State3, F5, F0, F1, F2, F3, F4>;
  using State5 = IntermediateState<State4, F6, F0, F1, F2, F3, F4, F5>;
  using State6 = IntermediateState<State5, F7, F0, F1, F2, F3, F4, F5, F6>;
  using State7 = IntermediateState<State6, F8, F0, F1, F2, F3, F4, F5, F6, F7>;
  using State8 =
      IntermediateState<State7, F9, F0, F1, F2, F3, F4, F5, F6, F7, F8>;
  using State9 =
      IntermediateState<State8, F10, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9>;
  using State10 = IntermediateState<State9, F11, F0, F1, F2, F3, F4, F5, F6, F7,
                                    F8, F9, F10>;
  using State11 = IntermediateState<State10, F12, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11>;
  using State12 = IntermediateState<State11, F13, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12>;
  using State13 = IntermediateState<State12, F14, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13>;
  using State14 = IntermediateState<State13, F15, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14>;
  using State15 = IntermediateState<State14, F16, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15>;
  using State16 =
      IntermediateState<State15, F17, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16>;
  using State17 =
      IntermediateState<State16, F18, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17>;
  using State18 =
      IntermediateState<State17, F19, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18>;
  using State19 =
      IntermediateState<State18, F20, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19>;
  using State20 =
      IntermediateState<State19, F21, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20>;
  using State21 = IntermediateState<State20, F22, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15,
                                    F16, F17, F18, F19, F20, F21>;
  using State22 = IntermediateState<State21, F23, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15,
                                    F16, F17, F18, F19, F20, F21, F22>;
  using State23 = IntermediateState<State22, F24, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15,
                                    F16, F17, F18, F19, F20, F21, F22, F23>;
  using State24 =
      IntermediateState<State23, F25, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
                        F21, F22, F23, F24>;
  using State25 =
      IntermediateState<State24, F26, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
                        F21, F22, F23, F24, F25>;
  using FLast = typename State25::Next::Promise;
  union {
    [[no_unique_address]] State25 p_;
    [[no_unique_address]] FLast f_;
  };
  using Result = typename decltype(
      std::declval<typename State25::Next::Promise>()())::Type;
  Poll<Result> RunState0() {
    return RunState<Result>(
        &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
        &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
          state_ = 1;
          return RunState1();
        });
  }
  Poll<Result> RunState1() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 2;
                              return RunState2();
                            });
  }
  Poll<Result> RunState2() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 3;
                              return RunState3();
                            });
  }
  Poll<Result> RunState3() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 4;
                              return RunState4();
                            });
  }
  Poll<Result> RunState4() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 5;
                              return RunState5();
                            });
  }
  Poll<Result> RunState5() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 6;
                              return RunState6();
                            });
  }
  Poll<Result> RunState6() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 7;
                              return RunState7();
                            });
  }
  Poll<Result> RunState7() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 8;
                              return RunState8();
                            });
  }
  Poll<Result> RunState8() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 9;
                              return RunState9();
                            });
  }
  Poll<Result> RunState9() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 10;
                              return RunState10();
                            });
  }
  Poll<Result> RunState10() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 11;
                              return RunState11();
                            });
  }
  Poll<Result> RunState11() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 12;
                              return RunState12();
                            });
  }
  Poll<Result> RunState12() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 13;
                              return RunState13();
                            });
  }
  Poll<Result> RunState13() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 14;
                              return RunState14();
                            });
  }
  Poll<Result> RunState14() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 15;
                              return RunState15();
                            });
  }
  Poll<Result> RunState15() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 16;
                              return RunState16();
                            });
  }
  Poll<Result> RunState16() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 17;
                              return RunState17();
                            });
  }
  Poll<Result> RunState17() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.f, [this]() {
      state_ = 18;
      return RunState18();
    });
  }
  Poll<Result> RunState18() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.f, [this]() {
      state_ = 19;
      return RunState19();
    });
  }
  Poll<Result> RunState19() {
    return RunState<Result>(&p_.p.p.p.p.p.p, &p_.p.p.p.p.p.f, [this]() {
      state_ = 20;
      return RunState20();
    });
  }
  Poll<Result> RunState20() {
    return RunState<Result>(&p_.p.p.p.p.p, &p_.p.p.p.p.f, [this]() {
      state_ = 21;
      return RunState21();
    });
  }
  Poll<Result> RunState21() {
    return RunState<Result>(&p_.p.p.p.p, &p_.p.p.p.f, [this]() {
      state_ = 22;
      return RunState22();
    });
  }
  Poll<Result> RunState22() {
    return RunState<Result>(&p_.p.p.p, &p_.p.p.f, [this]() {
      state_ = 23;
      return RunState23();
    });
  }
  Poll<Result> RunState23() {
    return RunState<Result>(&p_.p.p, &p_.p.f, [this]() {
      state_ = 24;
      return RunState24();
    });
  }
  Poll<Result> RunState24() {
    return RunState<Result>(&p_.p, &p_.f, [this]() {
      state_ = 25;
      return RunState25();
    });
  }
  Poll<Result> RunState25() {
    return RunState<Result>(&p_, &f_, [this]() {
      state_ = 26;
      return RunState26();
    });
  }
  Poll<Result> RunState26() { return f_(); }

 public:
  TrySeq(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
         F10 f10, F11 f11, F12 f12, F13 f13, F14 f14, F15 f15, F16 f16, F17 f17,
         F18 f18, F19 f19, F20 f20, F21 f21, F22 f22, F23 f23, F24 f24, F25 f25,
         F26 f26)
      : p_(std::move(f0), std::move(f1), std::move(f2), std::move(f3),
           std::move(f4), std::move(f5), std::move(f6), std::move(f7),
           std::move(f8), std::move(f9), std::move(f10), std::move(f11),
           std::move(f12), std::move(f13), std::move(f14), std::move(f15),
           std::move(f16), std::move(f17), std::move(f18), std::move(f19),
           std::move(f20), std::move(f21), std::move(f22), std::move(f23),
           std::move(f24), std::move(f25), std::move(f26)) {}
  TrySeq& operator=(const TrySeq&) = delete;
  TrySeq(const TrySeq& other) {
    assert(other.state_ == 0);
    new (&p_) State25(other.p_);
  }
  TrySeq(TrySeq&& other) {
    assert(other.state_ == 0);
    new (&p_) State25(std::move(other.p_));
  }
  ~TrySeq() {
    switch (state_) {
      case 0:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin0;
      case 1:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin1;
      case 2:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin2;
      case 3:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin3;
      case 4:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin4;
      case 5:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin5;
      case 6:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin6;
      case 7:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin7;
      case 8:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin8;
      case 9:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin9;
      case 10:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin10;
      case 11:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin11;
      case 12:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin12;
      case 13:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin13;
      case 14:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin14;
      case 15:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.f);
        goto fin15;
      case 16:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.f);
        goto fin16;
      case 17:
        Destruct(&p_.p.p.p.p.p.p.p.p.f);
        goto fin17;
      case 18:
        Destruct(&p_.p.p.p.p.p.p.p.f);
        goto fin18;
      case 19:
        Destruct(&p_.p.p.p.p.p.p.f);
        goto fin19;
      case 20:
        Destruct(&p_.p.p.p.p.p.f);
        goto fin20;
      case 21:
        Destruct(&p_.p.p.p.p.f);
        goto fin21;
      case 22:
        Destruct(&p_.p.p.p.f);
        goto fin22;
      case 23:
        Destruct(&p_.p.p.f);
        goto fin23;
      case 24:
        Destruct(&p_.p.f);
        goto fin24;
      case 25:
        Destruct(&p_.f);
        goto fin25;
      case 26:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin1:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin2:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin3:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin4:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin5:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin6:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin7:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin8:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin9:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin10:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin11:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin12:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin13:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin14:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.next);
  fin15:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.next);
  fin16:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.next);
  fin17:
    Destruct(&p_.p.p.p.p.p.p.p.p.next);
  fin18:
    Destruct(&p_.p.p.p.p.p.p.p.next);
  fin19:
    Destruct(&p_.p.p.p.p.p.p.next);
  fin20:
    Destruct(&p_.p.p.p.p.p.next);
  fin21:
    Destruct(&p_.p.p.p.p.next);
  fin22:
    Destruct(&p_.p.p.p.next);
  fin23:
    Destruct(&p_.p.p.next);
  fin24:
    Destruct(&p_.p.next);
  fin25:
    Destruct(&p_.next);
  }
  Poll<Result> operator()() {
    switch (state_) {
      case 0:
        return RunState0();
      case 1:
        return RunState1();
      case 2:
        return RunState2();
      case 3:
        return RunState3();
      case 4:
        return RunState4();
      case 5:
        return RunState5();
      case 6:
        return RunState6();
      case 7:
        return RunState7();
      case 8:
        return RunState8();
      case 9:
        return RunState9();
      case 10:
        return RunState10();
      case 11:
        return RunState11();
      case 12:
        return RunState12();
      case 13:
        return RunState13();
      case 14:
        return RunState14();
      case 15:
        return RunState15();
      case 16:
        return RunState16();
      case 17:
        return RunState17();
      case 18:
        return RunState18();
      case 19:
        return RunState19();
      case 20:
        return RunState20();
      case 21:
        return RunState21();
      case 22:
        return RunState22();
      case 23:
        return RunState23();
      case 24:
        return RunState24();
      case 25:
        return RunState25();
      case 26:
        return RunState26();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12, typename F13, typename F14,
          typename F15, typename F16, typename F17, typename F18, typename F19,
          typename F20, typename F21, typename F22, typename F23, typename F24,
          typename F25, typename F26, typename F27>
class TrySeq<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
             F15, F16, F17, F18, F19, F20, F21, F22, F23, F24, F25, F26, F27> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using State2 = IntermediateState<State1, F3, F0, F1, F2>;
  using State3 = IntermediateState<State2, F4, F0, F1, F2, F3>;
  using State4 = IntermediateState<State3, F5, F0, F1, F2, F3, F4>;
  using State5 = IntermediateState<State4, F6, F0, F1, F2, F3, F4, F5>;
  using State6 = IntermediateState<State5, F7, F0, F1, F2, F3, F4, F5, F6>;
  using State7 = IntermediateState<State6, F8, F0, F1, F2, F3, F4, F5, F6, F7>;
  using State8 =
      IntermediateState<State7, F9, F0, F1, F2, F3, F4, F5, F6, F7, F8>;
  using State9 =
      IntermediateState<State8, F10, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9>;
  using State10 = IntermediateState<State9, F11, F0, F1, F2, F3, F4, F5, F6, F7,
                                    F8, F9, F10>;
  using State11 = IntermediateState<State10, F12, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11>;
  using State12 = IntermediateState<State11, F13, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12>;
  using State13 = IntermediateState<State12, F14, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13>;
  using State14 = IntermediateState<State13, F15, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14>;
  using State15 = IntermediateState<State14, F16, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15>;
  using State16 =
      IntermediateState<State15, F17, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16>;
  using State17 =
      IntermediateState<State16, F18, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17>;
  using State18 =
      IntermediateState<State17, F19, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18>;
  using State19 =
      IntermediateState<State18, F20, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19>;
  using State20 =
      IntermediateState<State19, F21, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20>;
  using State21 = IntermediateState<State20, F22, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15,
                                    F16, F17, F18, F19, F20, F21>;
  using State22 = IntermediateState<State21, F23, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15,
                                    F16, F17, F18, F19, F20, F21, F22>;
  using State23 = IntermediateState<State22, F24, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15,
                                    F16, F17, F18, F19, F20, F21, F22, F23>;
  using State24 =
      IntermediateState<State23, F25, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
                        F21, F22, F23, F24>;
  using State25 =
      IntermediateState<State24, F26, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
                        F21, F22, F23, F24, F25>;
  using State26 =
      IntermediateState<State25, F27, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
                        F21, F22, F23, F24, F25, F26>;
  using FLast = typename State26::Next::Promise;
  union {
    [[no_unique_address]] State26 p_;
    [[no_unique_address]] FLast f_;
  };
  using Result = typename decltype(
      std::declval<typename State26::Next::Promise>()())::Type;
  Poll<Result> RunState0() {
    return RunState<Result>(
        &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
        &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
          state_ = 1;
          return RunState1();
        });
  }
  Poll<Result> RunState1() {
    return RunState<Result>(
        &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
        &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
          state_ = 2;
          return RunState2();
        });
  }
  Poll<Result> RunState2() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 3;
                              return RunState3();
                            });
  }
  Poll<Result> RunState3() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 4;
                              return RunState4();
                            });
  }
  Poll<Result> RunState4() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 5;
                              return RunState5();
                            });
  }
  Poll<Result> RunState5() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 6;
                              return RunState6();
                            });
  }
  Poll<Result> RunState6() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 7;
                              return RunState7();
                            });
  }
  Poll<Result> RunState7() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 8;
                              return RunState8();
                            });
  }
  Poll<Result> RunState8() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 9;
                              return RunState9();
                            });
  }
  Poll<Result> RunState9() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 10;
                              return RunState10();
                            });
  }
  Poll<Result> RunState10() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 11;
                              return RunState11();
                            });
  }
  Poll<Result> RunState11() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 12;
                              return RunState12();
                            });
  }
  Poll<Result> RunState12() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 13;
                              return RunState13();
                            });
  }
  Poll<Result> RunState13() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 14;
                              return RunState14();
                            });
  }
  Poll<Result> RunState14() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 15;
                              return RunState15();
                            });
  }
  Poll<Result> RunState15() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 16;
                              return RunState16();
                            });
  }
  Poll<Result> RunState16() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 17;
                              return RunState17();
                            });
  }
  Poll<Result> RunState17() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 18;
                              return RunState18();
                            });
  }
  Poll<Result> RunState18() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.f, [this]() {
      state_ = 19;
      return RunState19();
    });
  }
  Poll<Result> RunState19() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.f, [this]() {
      state_ = 20;
      return RunState20();
    });
  }
  Poll<Result> RunState20() {
    return RunState<Result>(&p_.p.p.p.p.p.p, &p_.p.p.p.p.p.f, [this]() {
      state_ = 21;
      return RunState21();
    });
  }
  Poll<Result> RunState21() {
    return RunState<Result>(&p_.p.p.p.p.p, &p_.p.p.p.p.f, [this]() {
      state_ = 22;
      return RunState22();
    });
  }
  Poll<Result> RunState22() {
    return RunState<Result>(&p_.p.p.p.p, &p_.p.p.p.f, [this]() {
      state_ = 23;
      return RunState23();
    });
  }
  Poll<Result> RunState23() {
    return RunState<Result>(&p_.p.p.p, &p_.p.p.f, [this]() {
      state_ = 24;
      return RunState24();
    });
  }
  Poll<Result> RunState24() {
    return RunState<Result>(&p_.p.p, &p_.p.f, [this]() {
      state_ = 25;
      return RunState25();
    });
  }
  Poll<Result> RunState25() {
    return RunState<Result>(&p_.p, &p_.f, [this]() {
      state_ = 26;
      return RunState26();
    });
  }
  Poll<Result> RunState26() {
    return RunState<Result>(&p_, &f_, [this]() {
      state_ = 27;
      return RunState27();
    });
  }
  Poll<Result> RunState27() { return f_(); }

 public:
  TrySeq(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
         F10 f10, F11 f11, F12 f12, F13 f13, F14 f14, F15 f15, F16 f16, F17 f17,
         F18 f18, F19 f19, F20 f20, F21 f21, F22 f22, F23 f23, F24 f24, F25 f25,
         F26 f26, F27 f27)
      : p_(std::move(f0), std::move(f1), std::move(f2), std::move(f3),
           std::move(f4), std::move(f5), std::move(f6), std::move(f7),
           std::move(f8), std::move(f9), std::move(f10), std::move(f11),
           std::move(f12), std::move(f13), std::move(f14), std::move(f15),
           std::move(f16), std::move(f17), std::move(f18), std::move(f19),
           std::move(f20), std::move(f21), std::move(f22), std::move(f23),
           std::move(f24), std::move(f25), std::move(f26), std::move(f27)) {}
  TrySeq& operator=(const TrySeq&) = delete;
  TrySeq(const TrySeq& other) {
    assert(other.state_ == 0);
    new (&p_) State26(other.p_);
  }
  TrySeq(TrySeq&& other) {
    assert(other.state_ == 0);
    new (&p_) State26(std::move(other.p_));
  }
  ~TrySeq() {
    switch (state_) {
      case 0:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin0;
      case 1:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin1;
      case 2:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin2;
      case 3:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin3;
      case 4:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin4;
      case 5:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin5;
      case 6:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin6;
      case 7:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin7;
      case 8:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin8;
      case 9:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin9;
      case 10:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin10;
      case 11:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin11;
      case 12:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin12;
      case 13:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin13;
      case 14:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin14;
      case 15:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin15;
      case 16:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.f);
        goto fin16;
      case 17:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.f);
        goto fin17;
      case 18:
        Destruct(&p_.p.p.p.p.p.p.p.p.f);
        goto fin18;
      case 19:
        Destruct(&p_.p.p.p.p.p.p.p.f);
        goto fin19;
      case 20:
        Destruct(&p_.p.p.p.p.p.p.f);
        goto fin20;
      case 21:
        Destruct(&p_.p.p.p.p.p.f);
        goto fin21;
      case 22:
        Destruct(&p_.p.p.p.p.f);
        goto fin22;
      case 23:
        Destruct(&p_.p.p.p.f);
        goto fin23;
      case 24:
        Destruct(&p_.p.p.f);
        goto fin24;
      case 25:
        Destruct(&p_.p.f);
        goto fin25;
      case 26:
        Destruct(&p_.f);
        goto fin26;
      case 27:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin1:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin2:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin3:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin4:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin5:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin6:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin7:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin8:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin9:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin10:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin11:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin12:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin13:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin14:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin15:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.next);
  fin16:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.next);
  fin17:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.next);
  fin18:
    Destruct(&p_.p.p.p.p.p.p.p.p.next);
  fin19:
    Destruct(&p_.p.p.p.p.p.p.p.next);
  fin20:
    Destruct(&p_.p.p.p.p.p.p.next);
  fin21:
    Destruct(&p_.p.p.p.p.p.next);
  fin22:
    Destruct(&p_.p.p.p.p.next);
  fin23:
    Destruct(&p_.p.p.p.next);
  fin24:
    Destruct(&p_.p.p.next);
  fin25:
    Destruct(&p_.p.next);
  fin26:
    Destruct(&p_.next);
  }
  Poll<Result> operator()() {
    switch (state_) {
      case 0:
        return RunState0();
      case 1:
        return RunState1();
      case 2:
        return RunState2();
      case 3:
        return RunState3();
      case 4:
        return RunState4();
      case 5:
        return RunState5();
      case 6:
        return RunState6();
      case 7:
        return RunState7();
      case 8:
        return RunState8();
      case 9:
        return RunState9();
      case 10:
        return RunState10();
      case 11:
        return RunState11();
      case 12:
        return RunState12();
      case 13:
        return RunState13();
      case 14:
        return RunState14();
      case 15:
        return RunState15();
      case 16:
        return RunState16();
      case 17:
        return RunState17();
      case 18:
        return RunState18();
      case 19:
        return RunState19();
      case 20:
        return RunState20();
      case 21:
        return RunState21();
      case 22:
        return RunState22();
      case 23:
        return RunState23();
      case 24:
        return RunState24();
      case 25:
        return RunState25();
      case 26:
        return RunState26();
      case 27:
        return RunState27();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12, typename F13, typename F14,
          typename F15, typename F16, typename F17, typename F18, typename F19,
          typename F20, typename F21, typename F22, typename F23, typename F24,
          typename F25, typename F26, typename F27, typename F28>
class TrySeq<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
             F15, F16, F17, F18, F19, F20, F21, F22, F23, F24, F25, F26, F27,
             F28> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using State2 = IntermediateState<State1, F3, F0, F1, F2>;
  using State3 = IntermediateState<State2, F4, F0, F1, F2, F3>;
  using State4 = IntermediateState<State3, F5, F0, F1, F2, F3, F4>;
  using State5 = IntermediateState<State4, F6, F0, F1, F2, F3, F4, F5>;
  using State6 = IntermediateState<State5, F7, F0, F1, F2, F3, F4, F5, F6>;
  using State7 = IntermediateState<State6, F8, F0, F1, F2, F3, F4, F5, F6, F7>;
  using State8 =
      IntermediateState<State7, F9, F0, F1, F2, F3, F4, F5, F6, F7, F8>;
  using State9 =
      IntermediateState<State8, F10, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9>;
  using State10 = IntermediateState<State9, F11, F0, F1, F2, F3, F4, F5, F6, F7,
                                    F8, F9, F10>;
  using State11 = IntermediateState<State10, F12, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11>;
  using State12 = IntermediateState<State11, F13, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12>;
  using State13 = IntermediateState<State12, F14, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13>;
  using State14 = IntermediateState<State13, F15, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14>;
  using State15 = IntermediateState<State14, F16, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15>;
  using State16 =
      IntermediateState<State15, F17, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16>;
  using State17 =
      IntermediateState<State16, F18, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17>;
  using State18 =
      IntermediateState<State17, F19, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18>;
  using State19 =
      IntermediateState<State18, F20, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19>;
  using State20 =
      IntermediateState<State19, F21, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20>;
  using State21 = IntermediateState<State20, F22, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15,
                                    F16, F17, F18, F19, F20, F21>;
  using State22 = IntermediateState<State21, F23, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15,
                                    F16, F17, F18, F19, F20, F21, F22>;
  using State23 = IntermediateState<State22, F24, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15,
                                    F16, F17, F18, F19, F20, F21, F22, F23>;
  using State24 =
      IntermediateState<State23, F25, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
                        F21, F22, F23, F24>;
  using State25 =
      IntermediateState<State24, F26, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
                        F21, F22, F23, F24, F25>;
  using State26 =
      IntermediateState<State25, F27, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
                        F21, F22, F23, F24, F25, F26>;
  using State27 =
      IntermediateState<State26, F28, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
                        F21, F22, F23, F24, F25, F26, F27>;
  using FLast = typename State27::Next::Promise;
  union {
    [[no_unique_address]] State27 p_;
    [[no_unique_address]] FLast f_;
  };
  using Result = typename decltype(
      std::declval<typename State27::Next::Promise>()())::Type;
  Poll<Result> RunState0() {
    return RunState<Result>(
        &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
        &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
          state_ = 1;
          return RunState1();
        });
  }
  Poll<Result> RunState1() {
    return RunState<Result>(
        &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
        &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
          state_ = 2;
          return RunState2();
        });
  }
  Poll<Result> RunState2() {
    return RunState<Result>(
        &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
        &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
          state_ = 3;
          return RunState3();
        });
  }
  Poll<Result> RunState3() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 4;
                              return RunState4();
                            });
  }
  Poll<Result> RunState4() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 5;
                              return RunState5();
                            });
  }
  Poll<Result> RunState5() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 6;
                              return RunState6();
                            });
  }
  Poll<Result> RunState6() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 7;
                              return RunState7();
                            });
  }
  Poll<Result> RunState7() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 8;
                              return RunState8();
                            });
  }
  Poll<Result> RunState8() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 9;
                              return RunState9();
                            });
  }
  Poll<Result> RunState9() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 10;
                              return RunState10();
                            });
  }
  Poll<Result> RunState10() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 11;
                              return RunState11();
                            });
  }
  Poll<Result> RunState11() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 12;
                              return RunState12();
                            });
  }
  Poll<Result> RunState12() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 13;
                              return RunState13();
                            });
  }
  Poll<Result> RunState13() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 14;
                              return RunState14();
                            });
  }
  Poll<Result> RunState14() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 15;
                              return RunState15();
                            });
  }
  Poll<Result> RunState15() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 16;
                              return RunState16();
                            });
  }
  Poll<Result> RunState16() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 17;
                              return RunState17();
                            });
  }
  Poll<Result> RunState17() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 18;
                              return RunState18();
                            });
  }
  Poll<Result> RunState18() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 19;
                              return RunState19();
                            });
  }
  Poll<Result> RunState19() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.f, [this]() {
      state_ = 20;
      return RunState20();
    });
  }
  Poll<Result> RunState20() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.f, [this]() {
      state_ = 21;
      return RunState21();
    });
  }
  Poll<Result> RunState21() {
    return RunState<Result>(&p_.p.p.p.p.p.p, &p_.p.p.p.p.p.f, [this]() {
      state_ = 22;
      return RunState22();
    });
  }
  Poll<Result> RunState22() {
    return RunState<Result>(&p_.p.p.p.p.p, &p_.p.p.p.p.f, [this]() {
      state_ = 23;
      return RunState23();
    });
  }
  Poll<Result> RunState23() {
    return RunState<Result>(&p_.p.p.p.p, &p_.p.p.p.f, [this]() {
      state_ = 24;
      return RunState24();
    });
  }
  Poll<Result> RunState24() {
    return RunState<Result>(&p_.p.p.p, &p_.p.p.f, [this]() {
      state_ = 25;
      return RunState25();
    });
  }
  Poll<Result> RunState25() {
    return RunState<Result>(&p_.p.p, &p_.p.f, [this]() {
      state_ = 26;
      return RunState26();
    });
  }
  Poll<Result> RunState26() {
    return RunState<Result>(&p_.p, &p_.f, [this]() {
      state_ = 27;
      return RunState27();
    });
  }
  Poll<Result> RunState27() {
    return RunState<Result>(&p_, &f_, [this]() {
      state_ = 28;
      return RunState28();
    });
  }
  Poll<Result> RunState28() { return f_(); }

 public:
  TrySeq(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
         F10 f10, F11 f11, F12 f12, F13 f13, F14 f14, F15 f15, F16 f16, F17 f17,
         F18 f18, F19 f19, F20 f20, F21 f21, F22 f22, F23 f23, F24 f24, F25 f25,
         F26 f26, F27 f27, F28 f28)
      : p_(std::move(f0), std::move(f1), std::move(f2), std::move(f3),
           std::move(f4), std::move(f5), std::move(f6), std::move(f7),
           std::move(f8), std::move(f9), std::move(f10), std::move(f11),
           std::move(f12), std::move(f13), std::move(f14), std::move(f15),
           std::move(f16), std::move(f17), std::move(f18), std::move(f19),
           std::move(f20), std::move(f21), std::move(f22), std::move(f23),
           std::move(f24), std::move(f25), std::move(f26), std::move(f27),
           std::move(f28)) {}
  TrySeq& operator=(const TrySeq&) = delete;
  TrySeq(const TrySeq& other) {
    assert(other.state_ == 0);
    new (&p_) State27(other.p_);
  }
  TrySeq(TrySeq&& other) {
    assert(other.state_ == 0);
    new (&p_) State27(std::move(other.p_));
  }
  ~TrySeq() {
    switch (state_) {
      case 0:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin0;
      case 1:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin1;
      case 2:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin2;
      case 3:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin3;
      case 4:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin4;
      case 5:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin5;
      case 6:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin6;
      case 7:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin7;
      case 8:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin8;
      case 9:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin9;
      case 10:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin10;
      case 11:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin11;
      case 12:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin12;
      case 13:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin13;
      case 14:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin14;
      case 15:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin15;
      case 16:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin16;
      case 17:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.f);
        goto fin17;
      case 18:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.f);
        goto fin18;
      case 19:
        Destruct(&p_.p.p.p.p.p.p.p.p.f);
        goto fin19;
      case 20:
        Destruct(&p_.p.p.p.p.p.p.p.f);
        goto fin20;
      case 21:
        Destruct(&p_.p.p.p.p.p.p.f);
        goto fin21;
      case 22:
        Destruct(&p_.p.p.p.p.p.f);
        goto fin22;
      case 23:
        Destruct(&p_.p.p.p.p.f);
        goto fin23;
      case 24:
        Destruct(&p_.p.p.p.f);
        goto fin24;
      case 25:
        Destruct(&p_.p.p.f);
        goto fin25;
      case 26:
        Destruct(&p_.p.f);
        goto fin26;
      case 27:
        Destruct(&p_.f);
        goto fin27;
      case 28:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin1:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin2:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin3:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin4:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin5:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin6:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin7:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin8:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin9:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin10:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin11:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin12:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin13:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin14:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin15:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin16:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.next);
  fin17:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.next);
  fin18:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.next);
  fin19:
    Destruct(&p_.p.p.p.p.p.p.p.p.next);
  fin20:
    Destruct(&p_.p.p.p.p.p.p.p.next);
  fin21:
    Destruct(&p_.p.p.p.p.p.p.next);
  fin22:
    Destruct(&p_.p.p.p.p.p.next);
  fin23:
    Destruct(&p_.p.p.p.p.next);
  fin24:
    Destruct(&p_.p.p.p.next);
  fin25:
    Destruct(&p_.p.p.next);
  fin26:
    Destruct(&p_.p.next);
  fin27:
    Destruct(&p_.next);
  }
  Poll<Result> operator()() {
    switch (state_) {
      case 0:
        return RunState0();
      case 1:
        return RunState1();
      case 2:
        return RunState2();
      case 3:
        return RunState3();
      case 4:
        return RunState4();
      case 5:
        return RunState5();
      case 6:
        return RunState6();
      case 7:
        return RunState7();
      case 8:
        return RunState8();
      case 9:
        return RunState9();
      case 10:
        return RunState10();
      case 11:
        return RunState11();
      case 12:
        return RunState12();
      case 13:
        return RunState13();
      case 14:
        return RunState14();
      case 15:
        return RunState15();
      case 16:
        return RunState16();
      case 17:
        return RunState17();
      case 18:
        return RunState18();
      case 19:
        return RunState19();
      case 20:
        return RunState20();
      case 21:
        return RunState21();
      case 22:
        return RunState22();
      case 23:
        return RunState23();
      case 24:
        return RunState24();
      case 25:
        return RunState25();
      case 26:
        return RunState26();
      case 27:
        return RunState27();
      case 28:
        return RunState28();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12, typename F13, typename F14,
          typename F15, typename F16, typename F17, typename F18, typename F19,
          typename F20, typename F21, typename F22, typename F23, typename F24,
          typename F25, typename F26, typename F27, typename F28, typename F29>
class TrySeq<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
             F15, F16, F17, F18, F19, F20, F21, F22, F23, F24, F25, F26, F27,
             F28, F29> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using State2 = IntermediateState<State1, F3, F0, F1, F2>;
  using State3 = IntermediateState<State2, F4, F0, F1, F2, F3>;
  using State4 = IntermediateState<State3, F5, F0, F1, F2, F3, F4>;
  using State5 = IntermediateState<State4, F6, F0, F1, F2, F3, F4, F5>;
  using State6 = IntermediateState<State5, F7, F0, F1, F2, F3, F4, F5, F6>;
  using State7 = IntermediateState<State6, F8, F0, F1, F2, F3, F4, F5, F6, F7>;
  using State8 =
      IntermediateState<State7, F9, F0, F1, F2, F3, F4, F5, F6, F7, F8>;
  using State9 =
      IntermediateState<State8, F10, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9>;
  using State10 = IntermediateState<State9, F11, F0, F1, F2, F3, F4, F5, F6, F7,
                                    F8, F9, F10>;
  using State11 = IntermediateState<State10, F12, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11>;
  using State12 = IntermediateState<State11, F13, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12>;
  using State13 = IntermediateState<State12, F14, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13>;
  using State14 = IntermediateState<State13, F15, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14>;
  using State15 = IntermediateState<State14, F16, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15>;
  using State16 =
      IntermediateState<State15, F17, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16>;
  using State17 =
      IntermediateState<State16, F18, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17>;
  using State18 =
      IntermediateState<State17, F19, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18>;
  using State19 =
      IntermediateState<State18, F20, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19>;
  using State20 =
      IntermediateState<State19, F21, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20>;
  using State21 = IntermediateState<State20, F22, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15,
                                    F16, F17, F18, F19, F20, F21>;
  using State22 = IntermediateState<State21, F23, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15,
                                    F16, F17, F18, F19, F20, F21, F22>;
  using State23 = IntermediateState<State22, F24, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15,
                                    F16, F17, F18, F19, F20, F21, F22, F23>;
  using State24 =
      IntermediateState<State23, F25, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
                        F21, F22, F23, F24>;
  using State25 =
      IntermediateState<State24, F26, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
                        F21, F22, F23, F24, F25>;
  using State26 =
      IntermediateState<State25, F27, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
                        F21, F22, F23, F24, F25, F26>;
  using State27 =
      IntermediateState<State26, F28, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
                        F21, F22, F23, F24, F25, F26, F27>;
  using State28 =
      IntermediateState<State27, F29, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
                        F21, F22, F23, F24, F25, F26, F27, F28>;
  using FLast = typename State28::Next::Promise;
  union {
    [[no_unique_address]] State28 p_;
    [[no_unique_address]] FLast f_;
  };
  using Result = typename decltype(
      std::declval<typename State28::Next::Promise>()())::Type;
  Poll<Result> RunState0() {
    return RunState<Result>(
        &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
        &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
          state_ = 1;
          return RunState1();
        });
  }
  Poll<Result> RunState1() {
    return RunState<Result>(
        &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
        &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
          state_ = 2;
          return RunState2();
        });
  }
  Poll<Result> RunState2() {
    return RunState<Result>(
        &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
        &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
          state_ = 3;
          return RunState3();
        });
  }
  Poll<Result> RunState3() {
    return RunState<Result>(
        &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
        &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
          state_ = 4;
          return RunState4();
        });
  }
  Poll<Result> RunState4() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 5;
                              return RunState5();
                            });
  }
  Poll<Result> RunState5() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 6;
                              return RunState6();
                            });
  }
  Poll<Result> RunState6() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 7;
                              return RunState7();
                            });
  }
  Poll<Result> RunState7() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 8;
                              return RunState8();
                            });
  }
  Poll<Result> RunState8() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 9;
                              return RunState9();
                            });
  }
  Poll<Result> RunState9() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 10;
                              return RunState10();
                            });
  }
  Poll<Result> RunState10() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 11;
                              return RunState11();
                            });
  }
  Poll<Result> RunState11() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 12;
                              return RunState12();
                            });
  }
  Poll<Result> RunState12() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 13;
                              return RunState13();
                            });
  }
  Poll<Result> RunState13() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 14;
                              return RunState14();
                            });
  }
  Poll<Result> RunState14() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 15;
                              return RunState15();
                            });
  }
  Poll<Result> RunState15() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 16;
                              return RunState16();
                            });
  }
  Poll<Result> RunState16() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 17;
                              return RunState17();
                            });
  }
  Poll<Result> RunState17() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 18;
                              return RunState18();
                            });
  }
  Poll<Result> RunState18() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 19;
                              return RunState19();
                            });
  }
  Poll<Result> RunState19() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 20;
                              return RunState20();
                            });
  }
  Poll<Result> RunState20() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.f, [this]() {
      state_ = 21;
      return RunState21();
    });
  }
  Poll<Result> RunState21() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.f, [this]() {
      state_ = 22;
      return RunState22();
    });
  }
  Poll<Result> RunState22() {
    return RunState<Result>(&p_.p.p.p.p.p.p, &p_.p.p.p.p.p.f, [this]() {
      state_ = 23;
      return RunState23();
    });
  }
  Poll<Result> RunState23() {
    return RunState<Result>(&p_.p.p.p.p.p, &p_.p.p.p.p.f, [this]() {
      state_ = 24;
      return RunState24();
    });
  }
  Poll<Result> RunState24() {
    return RunState<Result>(&p_.p.p.p.p, &p_.p.p.p.f, [this]() {
      state_ = 25;
      return RunState25();
    });
  }
  Poll<Result> RunState25() {
    return RunState<Result>(&p_.p.p.p, &p_.p.p.f, [this]() {
      state_ = 26;
      return RunState26();
    });
  }
  Poll<Result> RunState26() {
    return RunState<Result>(&p_.p.p, &p_.p.f, [this]() {
      state_ = 27;
      return RunState27();
    });
  }
  Poll<Result> RunState27() {
    return RunState<Result>(&p_.p, &p_.f, [this]() {
      state_ = 28;
      return RunState28();
    });
  }
  Poll<Result> RunState28() {
    return RunState<Result>(&p_, &f_, [this]() {
      state_ = 29;
      return RunState29();
    });
  }
  Poll<Result> RunState29() { return f_(); }

 public:
  TrySeq(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
         F10 f10, F11 f11, F12 f12, F13 f13, F14 f14, F15 f15, F16 f16, F17 f17,
         F18 f18, F19 f19, F20 f20, F21 f21, F22 f22, F23 f23, F24 f24, F25 f25,
         F26 f26, F27 f27, F28 f28, F29 f29)
      : p_(std::move(f0), std::move(f1), std::move(f2), std::move(f3),
           std::move(f4), std::move(f5), std::move(f6), std::move(f7),
           std::move(f8), std::move(f9), std::move(f10), std::move(f11),
           std::move(f12), std::move(f13), std::move(f14), std::move(f15),
           std::move(f16), std::move(f17), std::move(f18), std::move(f19),
           std::move(f20), std::move(f21), std::move(f22), std::move(f23),
           std::move(f24), std::move(f25), std::move(f26), std::move(f27),
           std::move(f28), std::move(f29)) {}
  TrySeq& operator=(const TrySeq&) = delete;
  TrySeq(const TrySeq& other) {
    assert(other.state_ == 0);
    new (&p_) State28(other.p_);
  }
  TrySeq(TrySeq&& other) {
    assert(other.state_ == 0);
    new (&p_) State28(std::move(other.p_));
  }
  ~TrySeq() {
    switch (state_) {
      case 0:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin0;
      case 1:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin1;
      case 2:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin2;
      case 3:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin3;
      case 4:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin4;
      case 5:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin5;
      case 6:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin6;
      case 7:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin7;
      case 8:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin8;
      case 9:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin9;
      case 10:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin10;
      case 11:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin11;
      case 12:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin12;
      case 13:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin13;
      case 14:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin14;
      case 15:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin15;
      case 16:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin16;
      case 17:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin17;
      case 18:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.f);
        goto fin18;
      case 19:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.f);
        goto fin19;
      case 20:
        Destruct(&p_.p.p.p.p.p.p.p.p.f);
        goto fin20;
      case 21:
        Destruct(&p_.p.p.p.p.p.p.p.f);
        goto fin21;
      case 22:
        Destruct(&p_.p.p.p.p.p.p.f);
        goto fin22;
      case 23:
        Destruct(&p_.p.p.p.p.p.f);
        goto fin23;
      case 24:
        Destruct(&p_.p.p.p.p.f);
        goto fin24;
      case 25:
        Destruct(&p_.p.p.p.f);
        goto fin25;
      case 26:
        Destruct(&p_.p.p.f);
        goto fin26;
      case 27:
        Destruct(&p_.p.f);
        goto fin27;
      case 28:
        Destruct(&p_.f);
        goto fin28;
      case 29:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin1:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin2:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin3:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin4:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin5:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin6:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin7:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin8:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin9:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin10:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin11:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin12:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin13:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin14:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin15:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin16:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin17:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.next);
  fin18:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.next);
  fin19:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.next);
  fin20:
    Destruct(&p_.p.p.p.p.p.p.p.p.next);
  fin21:
    Destruct(&p_.p.p.p.p.p.p.p.next);
  fin22:
    Destruct(&p_.p.p.p.p.p.p.next);
  fin23:
    Destruct(&p_.p.p.p.p.p.next);
  fin24:
    Destruct(&p_.p.p.p.p.next);
  fin25:
    Destruct(&p_.p.p.p.next);
  fin26:
    Destruct(&p_.p.p.next);
  fin27:
    Destruct(&p_.p.next);
  fin28:
    Destruct(&p_.next);
  }
  Poll<Result> operator()() {
    switch (state_) {
      case 0:
        return RunState0();
      case 1:
        return RunState1();
      case 2:
        return RunState2();
      case 3:
        return RunState3();
      case 4:
        return RunState4();
      case 5:
        return RunState5();
      case 6:
        return RunState6();
      case 7:
        return RunState7();
      case 8:
        return RunState8();
      case 9:
        return RunState9();
      case 10:
        return RunState10();
      case 11:
        return RunState11();
      case 12:
        return RunState12();
      case 13:
        return RunState13();
      case 14:
        return RunState14();
      case 15:
        return RunState15();
      case 16:
        return RunState16();
      case 17:
        return RunState17();
      case 18:
        return RunState18();
      case 19:
        return RunState19();
      case 20:
        return RunState20();
      case 21:
        return RunState21();
      case 22:
        return RunState22();
      case 23:
        return RunState23();
      case 24:
        return RunState24();
      case 25:
        return RunState25();
      case 26:
        return RunState26();
      case 27:
        return RunState27();
      case 28:
        return RunState28();
      case 29:
        return RunState29();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12, typename F13, typename F14,
          typename F15, typename F16, typename F17, typename F18, typename F19,
          typename F20, typename F21, typename F22, typename F23, typename F24,
          typename F25, typename F26, typename F27, typename F28, typename F29,
          typename F30>
class TrySeq<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
             F15, F16, F17, F18, F19, F20, F21, F22, F23, F24, F25, F26, F27,
             F28, F29, F30> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using State2 = IntermediateState<State1, F3, F0, F1, F2>;
  using State3 = IntermediateState<State2, F4, F0, F1, F2, F3>;
  using State4 = IntermediateState<State3, F5, F0, F1, F2, F3, F4>;
  using State5 = IntermediateState<State4, F6, F0, F1, F2, F3, F4, F5>;
  using State6 = IntermediateState<State5, F7, F0, F1, F2, F3, F4, F5, F6>;
  using State7 = IntermediateState<State6, F8, F0, F1, F2, F3, F4, F5, F6, F7>;
  using State8 =
      IntermediateState<State7, F9, F0, F1, F2, F3, F4, F5, F6, F7, F8>;
  using State9 =
      IntermediateState<State8, F10, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9>;
  using State10 = IntermediateState<State9, F11, F0, F1, F2, F3, F4, F5, F6, F7,
                                    F8, F9, F10>;
  using State11 = IntermediateState<State10, F12, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11>;
  using State12 = IntermediateState<State11, F13, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12>;
  using State13 = IntermediateState<State12, F14, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13>;
  using State14 = IntermediateState<State13, F15, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14>;
  using State15 = IntermediateState<State14, F16, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15>;
  using State16 =
      IntermediateState<State15, F17, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16>;
  using State17 =
      IntermediateState<State16, F18, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17>;
  using State18 =
      IntermediateState<State17, F19, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18>;
  using State19 =
      IntermediateState<State18, F20, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19>;
  using State20 =
      IntermediateState<State19, F21, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20>;
  using State21 = IntermediateState<State20, F22, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15,
                                    F16, F17, F18, F19, F20, F21>;
  using State22 = IntermediateState<State21, F23, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15,
                                    F16, F17, F18, F19, F20, F21, F22>;
  using State23 = IntermediateState<State22, F24, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15,
                                    F16, F17, F18, F19, F20, F21, F22, F23>;
  using State24 =
      IntermediateState<State23, F25, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
                        F21, F22, F23, F24>;
  using State25 =
      IntermediateState<State24, F26, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
                        F21, F22, F23, F24, F25>;
  using State26 =
      IntermediateState<State25, F27, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
                        F21, F22, F23, F24, F25, F26>;
  using State27 =
      IntermediateState<State26, F28, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
                        F21, F22, F23, F24, F25, F26, F27>;
  using State28 =
      IntermediateState<State27, F29, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
                        F21, F22, F23, F24, F25, F26, F27, F28>;
  using State29 =
      IntermediateState<State28, F30, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
                        F21, F22, F23, F24, F25, F26, F27, F28, F29>;
  using FLast = typename State29::Next::Promise;
  union {
    [[no_unique_address]] State29 p_;
    [[no_unique_address]] FLast f_;
  };
  using Result = typename decltype(
      std::declval<typename State29::Next::Promise>()())::Type;
  Poll<Result> RunState0() {
    return RunState<Result>(
        &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
        &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
        [this]() {
          state_ = 1;
          return RunState1();
        });
  }
  Poll<Result> RunState1() {
    return RunState<Result>(
        &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
        &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
          state_ = 2;
          return RunState2();
        });
  }
  Poll<Result> RunState2() {
    return RunState<Result>(
        &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
        &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
          state_ = 3;
          return RunState3();
        });
  }
  Poll<Result> RunState3() {
    return RunState<Result>(
        &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
        &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
          state_ = 4;
          return RunState4();
        });
  }
  Poll<Result> RunState4() {
    return RunState<Result>(
        &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
        &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
          state_ = 5;
          return RunState5();
        });
  }
  Poll<Result> RunState5() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 6;
                              return RunState6();
                            });
  }
  Poll<Result> RunState6() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 7;
                              return RunState7();
                            });
  }
  Poll<Result> RunState7() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 8;
                              return RunState8();
                            });
  }
  Poll<Result> RunState8() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 9;
                              return RunState9();
                            });
  }
  Poll<Result> RunState9() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 10;
                              return RunState10();
                            });
  }
  Poll<Result> RunState10() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 11;
                              return RunState11();
                            });
  }
  Poll<Result> RunState11() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 12;
                              return RunState12();
                            });
  }
  Poll<Result> RunState12() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 13;
                              return RunState13();
                            });
  }
  Poll<Result> RunState13() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 14;
                              return RunState14();
                            });
  }
  Poll<Result> RunState14() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 15;
                              return RunState15();
                            });
  }
  Poll<Result> RunState15() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 16;
                              return RunState16();
                            });
  }
  Poll<Result> RunState16() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 17;
                              return RunState17();
                            });
  }
  Poll<Result> RunState17() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 18;
                              return RunState18();
                            });
  }
  Poll<Result> RunState18() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 19;
                              return RunState19();
                            });
  }
  Poll<Result> RunState19() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 20;
                              return RunState20();
                            });
  }
  Poll<Result> RunState20() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 21;
                              return RunState21();
                            });
  }
  Poll<Result> RunState21() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.f, [this]() {
      state_ = 22;
      return RunState22();
    });
  }
  Poll<Result> RunState22() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.f, [this]() {
      state_ = 23;
      return RunState23();
    });
  }
  Poll<Result> RunState23() {
    return RunState<Result>(&p_.p.p.p.p.p.p, &p_.p.p.p.p.p.f, [this]() {
      state_ = 24;
      return RunState24();
    });
  }
  Poll<Result> RunState24() {
    return RunState<Result>(&p_.p.p.p.p.p, &p_.p.p.p.p.f, [this]() {
      state_ = 25;
      return RunState25();
    });
  }
  Poll<Result> RunState25() {
    return RunState<Result>(&p_.p.p.p.p, &p_.p.p.p.f, [this]() {
      state_ = 26;
      return RunState26();
    });
  }
  Poll<Result> RunState26() {
    return RunState<Result>(&p_.p.p.p, &p_.p.p.f, [this]() {
      state_ = 27;
      return RunState27();
    });
  }
  Poll<Result> RunState27() {
    return RunState<Result>(&p_.p.p, &p_.p.f, [this]() {
      state_ = 28;
      return RunState28();
    });
  }
  Poll<Result> RunState28() {
    return RunState<Result>(&p_.p, &p_.f, [this]() {
      state_ = 29;
      return RunState29();
    });
  }
  Poll<Result> RunState29() {
    return RunState<Result>(&p_, &f_, [this]() {
      state_ = 30;
      return RunState30();
    });
  }
  Poll<Result> RunState30() { return f_(); }

 public:
  TrySeq(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
         F10 f10, F11 f11, F12 f12, F13 f13, F14 f14, F15 f15, F16 f16, F17 f17,
         F18 f18, F19 f19, F20 f20, F21 f21, F22 f22, F23 f23, F24 f24, F25 f25,
         F26 f26, F27 f27, F28 f28, F29 f29, F30 f30)
      : p_(std::move(f0), std::move(f1), std::move(f2), std::move(f3),
           std::move(f4), std::move(f5), std::move(f6), std::move(f7),
           std::move(f8), std::move(f9), std::move(f10), std::move(f11),
           std::move(f12), std::move(f13), std::move(f14), std::move(f15),
           std::move(f16), std::move(f17), std::move(f18), std::move(f19),
           std::move(f20), std::move(f21), std::move(f22), std::move(f23),
           std::move(f24), std::move(f25), std::move(f26), std::move(f27),
           std::move(f28), std::move(f29), std::move(f30)) {}
  TrySeq& operator=(const TrySeq&) = delete;
  TrySeq(const TrySeq& other) {
    assert(other.state_ == 0);
    new (&p_) State29(other.p_);
  }
  TrySeq(TrySeq&& other) {
    assert(other.state_ == 0);
    new (&p_) State29(std::move(other.p_));
  }
  ~TrySeq() {
    switch (state_) {
      case 0:
        Destruct(
            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin0;
      case 1:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin1;
      case 2:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin2;
      case 3:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin3;
      case 4:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin4;
      case 5:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin5;
      case 6:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin6;
      case 7:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin7;
      case 8:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin8;
      case 9:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin9;
      case 10:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin10;
      case 11:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin11;
      case 12:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin12;
      case 13:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin13;
      case 14:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin14;
      case 15:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin15;
      case 16:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin16;
      case 17:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin17;
      case 18:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin18;
      case 19:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.f);
        goto fin19;
      case 20:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.f);
        goto fin20;
      case 21:
        Destruct(&p_.p.p.p.p.p.p.p.p.f);
        goto fin21;
      case 22:
        Destruct(&p_.p.p.p.p.p.p.p.f);
        goto fin22;
      case 23:
        Destruct(&p_.p.p.p.p.p.p.f);
        goto fin23;
      case 24:
        Destruct(&p_.p.p.p.p.p.f);
        goto fin24;
      case 25:
        Destruct(&p_.p.p.p.p.f);
        goto fin25;
      case 26:
        Destruct(&p_.p.p.p.f);
        goto fin26;
      case 27:
        Destruct(&p_.p.p.f);
        goto fin27;
      case 28:
        Destruct(&p_.p.f);
        goto fin28;
      case 29:
        Destruct(&p_.f);
        goto fin29;
      case 30:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(
        &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin1:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin2:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin3:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin4:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin5:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin6:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin7:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin8:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin9:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin10:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin11:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin12:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin13:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin14:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin15:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin16:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin17:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin18:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.next);
  fin19:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.next);
  fin20:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.next);
  fin21:
    Destruct(&p_.p.p.p.p.p.p.p.p.next);
  fin22:
    Destruct(&p_.p.p.p.p.p.p.p.next);
  fin23:
    Destruct(&p_.p.p.p.p.p.p.next);
  fin24:
    Destruct(&p_.p.p.p.p.p.next);
  fin25:
    Destruct(&p_.p.p.p.p.next);
  fin26:
    Destruct(&p_.p.p.p.next);
  fin27:
    Destruct(&p_.p.p.next);
  fin28:
    Destruct(&p_.p.next);
  fin29:
    Destruct(&p_.next);
  }
  Poll<Result> operator()() {
    switch (state_) {
      case 0:
        return RunState0();
      case 1:
        return RunState1();
      case 2:
        return RunState2();
      case 3:
        return RunState3();
      case 4:
        return RunState4();
      case 5:
        return RunState5();
      case 6:
        return RunState6();
      case 7:
        return RunState7();
      case 8:
        return RunState8();
      case 9:
        return RunState9();
      case 10:
        return RunState10();
      case 11:
        return RunState11();
      case 12:
        return RunState12();
      case 13:
        return RunState13();
      case 14:
        return RunState14();
      case 15:
        return RunState15();
      case 16:
        return RunState16();
      case 17:
        return RunState17();
      case 18:
        return RunState18();
      case 19:
        return RunState19();
      case 20:
        return RunState20();
      case 21:
        return RunState21();
      case 22:
        return RunState22();
      case 23:
        return RunState23();
      case 24:
        return RunState24();
      case 25:
        return RunState25();
      case 26:
        return RunState26();
      case 27:
        return RunState27();
      case 28:
        return RunState28();
      case 29:
        return RunState29();
      case 30:
        return RunState30();
    }
    return kPending;
  }
};
template <typename F0, typename F1, typename F2, typename F3, typename F4,
          typename F5, typename F6, typename F7, typename F8, typename F9,
          typename F10, typename F11, typename F12, typename F13, typename F14,
          typename F15, typename F16, typename F17, typename F18, typename F19,
          typename F20, typename F21, typename F22, typename F23, typename F24,
          typename F25, typename F26, typename F27, typename F28, typename F29,
          typename F30, typename F31>
class TrySeq<F0, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
             F15, F16, F17, F18, F19, F20, F21, F22, F23, F24, F25, F26, F27,
             F28, F29, F30, F31> {
 private:
  char state_ = 0;
  using State0 = InitialState<F0, F1>;
  using State1 = IntermediateState<State0, F2, F0, F1>;
  using State2 = IntermediateState<State1, F3, F0, F1, F2>;
  using State3 = IntermediateState<State2, F4, F0, F1, F2, F3>;
  using State4 = IntermediateState<State3, F5, F0, F1, F2, F3, F4>;
  using State5 = IntermediateState<State4, F6, F0, F1, F2, F3, F4, F5>;
  using State6 = IntermediateState<State5, F7, F0, F1, F2, F3, F4, F5, F6>;
  using State7 = IntermediateState<State6, F8, F0, F1, F2, F3, F4, F5, F6, F7>;
  using State8 =
      IntermediateState<State7, F9, F0, F1, F2, F3, F4, F5, F6, F7, F8>;
  using State9 =
      IntermediateState<State8, F10, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9>;
  using State10 = IntermediateState<State9, F11, F0, F1, F2, F3, F4, F5, F6, F7,
                                    F8, F9, F10>;
  using State11 = IntermediateState<State10, F12, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11>;
  using State12 = IntermediateState<State11, F13, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12>;
  using State13 = IntermediateState<State12, F14, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13>;
  using State14 = IntermediateState<State13, F15, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14>;
  using State15 = IntermediateState<State14, F16, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15>;
  using State16 =
      IntermediateState<State15, F17, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16>;
  using State17 =
      IntermediateState<State16, F18, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17>;
  using State18 =
      IntermediateState<State17, F19, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18>;
  using State19 =
      IntermediateState<State18, F20, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19>;
  using State20 =
      IntermediateState<State19, F21, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20>;
  using State21 = IntermediateState<State20, F22, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15,
                                    F16, F17, F18, F19, F20, F21>;
  using State22 = IntermediateState<State21, F23, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15,
                                    F16, F17, F18, F19, F20, F21, F22>;
  using State23 = IntermediateState<State22, F24, F0, F1, F2, F3, F4, F5, F6,
                                    F7, F8, F9, F10, F11, F12, F13, F14, F15,
                                    F16, F17, F18, F19, F20, F21, F22, F23>;
  using State24 =
      IntermediateState<State23, F25, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
                        F21, F22, F23, F24>;
  using State25 =
      IntermediateState<State24, F26, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
                        F21, F22, F23, F24, F25>;
  using State26 =
      IntermediateState<State25, F27, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
                        F21, F22, F23, F24, F25, F26>;
  using State27 =
      IntermediateState<State26, F28, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
                        F21, F22, F23, F24, F25, F26, F27>;
  using State28 =
      IntermediateState<State27, F29, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
                        F21, F22, F23, F24, F25, F26, F27, F28>;
  using State29 =
      IntermediateState<State28, F30, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
                        F21, F22, F23, F24, F25, F26, F27, F28, F29>;
  using State30 =
      IntermediateState<State29, F31, F0, F1, F2, F3, F4, F5, F6, F7, F8, F9,
                        F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
                        F21, F22, F23, F24, F25, F26, F27, F28, F29, F30>;
  using FLast = typename State30::Next::Promise;
  union {
    [[no_unique_address]] State30 p_;
    [[no_unique_address]] FLast f_;
  };
  using Result = typename decltype(
      std::declval<typename State30::Next::Promise>()())::Type;
  Poll<Result> RunState0() {
    return RunState<Result>(
        &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
        &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
        [this]() {
          state_ = 1;
          return RunState1();
        });
  }
  Poll<Result> RunState1() {
    return RunState<Result>(
        &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
        &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
        [this]() {
          state_ = 2;
          return RunState2();
        });
  }
  Poll<Result> RunState2() {
    return RunState<Result>(
        &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
        &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
          state_ = 3;
          return RunState3();
        });
  }
  Poll<Result> RunState3() {
    return RunState<Result>(
        &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
        &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
          state_ = 4;
          return RunState4();
        });
  }
  Poll<Result> RunState4() {
    return RunState<Result>(
        &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
        &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
          state_ = 5;
          return RunState5();
        });
  }
  Poll<Result> RunState5() {
    return RunState<Result>(
        &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
        &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
          state_ = 6;
          return RunState6();
        });
  }
  Poll<Result> RunState6() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 7;
                              return RunState7();
                            });
  }
  Poll<Result> RunState7() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 8;
                              return RunState8();
                            });
  }
  Poll<Result> RunState8() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 9;
                              return RunState9();
                            });
  }
  Poll<Result> RunState9() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 10;
                              return RunState10();
                            });
  }
  Poll<Result> RunState10() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 11;
                              return RunState11();
                            });
  }
  Poll<Result> RunState11() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 12;
                              return RunState12();
                            });
  }
  Poll<Result> RunState12() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 13;
                              return RunState13();
                            });
  }
  Poll<Result> RunState13() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 14;
                              return RunState14();
                            });
  }
  Poll<Result> RunState14() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 15;
                              return RunState15();
                            });
  }
  Poll<Result> RunState15() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 16;
                              return RunState16();
                            });
  }
  Poll<Result> RunState16() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 17;
                              return RunState17();
                            });
  }
  Poll<Result> RunState17() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 18;
                              return RunState18();
                            });
  }
  Poll<Result> RunState18() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 19;
                              return RunState19();
                            });
  }
  Poll<Result> RunState19() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p.p,
                            &p_.p.p.p.p.p.p.p.p.p.p.f, [this]() {
                              state_ = 20;
                              return RunState20();
                            });
  }
  Poll<Result> RunState20() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 21;
                              return RunState21();
                            });
  }
  Poll<Result> RunState21() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.p.f,
                            [this]() {
                              state_ = 22;
                              return RunState22();
                            });
  }
  Poll<Result> RunState22() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.p.f, [this]() {
      state_ = 23;
      return RunState23();
    });
  }
  Poll<Result> RunState23() {
    return RunState<Result>(&p_.p.p.p.p.p.p.p, &p_.p.p.p.p.p.p.f, [this]() {
      state_ = 24;
      return RunState24();
    });
  }
  Poll<Result> RunState24() {
    return RunState<Result>(&p_.p.p.p.p.p.p, &p_.p.p.p.p.p.f, [this]() {
      state_ = 25;
      return RunState25();
    });
  }
  Poll<Result> RunState25() {
    return RunState<Result>(&p_.p.p.p.p.p, &p_.p.p.p.p.f, [this]() {
      state_ = 26;
      return RunState26();
    });
  }
  Poll<Result> RunState26() {
    return RunState<Result>(&p_.p.p.p.p, &p_.p.p.p.f, [this]() {
      state_ = 27;
      return RunState27();
    });
  }
  Poll<Result> RunState27() {
    return RunState<Result>(&p_.p.p.p, &p_.p.p.f, [this]() {
      state_ = 28;
      return RunState28();
    });
  }
  Poll<Result> RunState28() {
    return RunState<Result>(&p_.p.p, &p_.p.f, [this]() {
      state_ = 29;
      return RunState29();
    });
  }
  Poll<Result> RunState29() {
    return RunState<Result>(&p_.p, &p_.f, [this]() {
      state_ = 30;
      return RunState30();
    });
  }
  Poll<Result> RunState30() {
    return RunState<Result>(&p_, &f_, [this]() {
      state_ = 31;
      return RunState31();
    });
  }
  Poll<Result> RunState31() { return f_(); }

 public:
  TrySeq(F0 f0, F1 f1, F2 f2, F3 f3, F4 f4, F5 f5, F6 f6, F7 f7, F8 f8, F9 f9,
         F10 f10, F11 f11, F12 f12, F13 f13, F14 f14, F15 f15, F16 f16, F17 f17,
         F18 f18, F19 f19, F20 f20, F21 f21, F22 f22, F23 f23, F24 f24, F25 f25,
         F26 f26, F27 f27, F28 f28, F29 f29, F30 f30, F31 f31)
      : p_(std::move(f0), std::move(f1), std::move(f2), std::move(f3),
           std::move(f4), std::move(f5), std::move(f6), std::move(f7),
           std::move(f8), std::move(f9), std::move(f10), std::move(f11),
           std::move(f12), std::move(f13), std::move(f14), std::move(f15),
           std::move(f16), std::move(f17), std::move(f18), std::move(f19),
           std::move(f20), std::move(f21), std::move(f22), std::move(f23),
           std::move(f24), std::move(f25), std::move(f26), std::move(f27),
           std::move(f28), std::move(f29), std::move(f30), std::move(f31)) {}
  TrySeq& operator=(const TrySeq&) = delete;
  TrySeq(const TrySeq& other) {
    assert(other.state_ == 0);
    new (&p_) State30(other.p_);
  }
  TrySeq(TrySeq&& other) {
    assert(other.state_ == 0);
    new (&p_) State30(std::move(other.p_));
  }
  ~TrySeq() {
    switch (state_) {
      case 0:
        Destruct(
            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin0;
      case 1:
        Destruct(
            &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin1;
      case 2:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin2;
      case 3:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin3;
      case 4:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin4;
      case 5:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin5;
      case 6:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin6;
      case 7:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin7;
      case 8:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin8;
      case 9:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin9;
      case 10:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin10;
      case 11:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin11;
      case 12:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin12;
      case 13:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin13;
      case 14:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin14;
      case 15:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin15;
      case 16:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin16;
      case 17:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin17;
      case 18:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin18;
      case 19:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.f);
        goto fin19;
      case 20:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.p.f);
        goto fin20;
      case 21:
        Destruct(&p_.p.p.p.p.p.p.p.p.p.f);
        goto fin21;
      case 22:
        Destruct(&p_.p.p.p.p.p.p.p.p.f);
        goto fin22;
      case 23:
        Destruct(&p_.p.p.p.p.p.p.p.f);
        goto fin23;
      case 24:
        Destruct(&p_.p.p.p.p.p.p.f);
        goto fin24;
      case 25:
        Destruct(&p_.p.p.p.p.p.f);
        goto fin25;
      case 26:
        Destruct(&p_.p.p.p.p.f);
        goto fin26;
      case 27:
        Destruct(&p_.p.p.p.f);
        goto fin27;
      case 28:
        Destruct(&p_.p.p.f);
        goto fin28;
      case 29:
        Destruct(&p_.p.f);
        goto fin29;
      case 30:
        Destruct(&p_.f);
        goto fin30;
      case 31:
        Destruct(&f_);
        return;
    }
  fin0:
    Destruct(
        &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin1:
    Destruct(
        &p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin2:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin3:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin4:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin5:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin6:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin7:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin8:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin9:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin10:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin11:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin12:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin13:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin14:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin15:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin16:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin17:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin18:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.p.next);
  fin19:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.p.next);
  fin20:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.p.next);
  fin21:
    Destruct(&p_.p.p.p.p.p.p.p.p.p.next);
  fin22:
    Destruct(&p_.p.p.p.p.p.p.p.p.next);
  fin23:
    Destruct(&p_.p.p.p.p.p.p.p.next);
  fin24:
    Destruct(&p_.p.p.p.p.p.p.next);
  fin25:
    Destruct(&p_.p.p.p.p.p.next);
  fin26:
    Destruct(&p_.p.p.p.p.next);
  fin27:
    Destruct(&p_.p.p.p.next);
  fin28:
    Destruct(&p_.p.p.next);
  fin29:
    Destruct(&p_.p.next);
  fin30:
    Destruct(&p_.next);
  }
  Poll<Result> operator()() {
    switch (state_) {
      case 0:
        return RunState0();
      case 1:
        return RunState1();
      case 2:
        return RunState2();
      case 3:
        return RunState3();
      case 4:
        return RunState4();
      case 5:
        return RunState5();
      case 6:
        return RunState6();
      case 7:
        return RunState7();
      case 8:
        return RunState8();
      case 9:
        return RunState9();
      case 10:
        return RunState10();
      case 11:
        return RunState11();
      case 12:
        return RunState12();
      case 13:
        return RunState13();
      case 14:
        return RunState14();
      case 15:
        return RunState15();
      case 16:
        return RunState16();
      case 17:
        return RunState17();
      case 18:
        return RunState18();
      case 19:
        return RunState19();
      case 20:
        return RunState20();
      case 21:
        return RunState21();
      case 22:
        return RunState22();
      case 23:
        return RunState23();
      case 24:
        return RunState24();
      case 25:
        return RunState25();
      case 26:
        return RunState26();
      case 27:
        return RunState27();
      case 28:
        return RunState28();
      case 29:
        return RunState29();
      case 30:
        return RunState30();
      case 31:
        return RunState31();
    }
    return kPending;
  }
};
