%YAML 1.2
--- |
  cmake_minimum_required (VERSION 2.8.4 FATAL_ERROR)

  <%
  PLATFORM_CHECK = {
    'linux': '(CMAKE_SYSTEM EQUAL Linux)',
    'mac': '(CMAKE_SYSTEM EQUAL Darwin)',
    'windows': '(CMAKE_SYSTEM EQUAL Windows)',
    'posix': '(NOT (CMAKE_SYSTEM EQUAL Windows))'
  }
  %>

  set (PACKAGE_NAME      "grpc")
  set (PACKAGE_VERSION   "${settings.version.major}.${settings.version.minor}.${settings.version.micro}")
  set (PACKAGE_STRING    "<%text>${PACKAGE_NAME} ${PACKAGE_VERSION}</%text>")
  set (PACKAGE_TARNAME   "<%text>${PACKAGE_NAME}-${PACKAGE_VERSION}</%text>")
  set (PACKAGE_BUGREPORT "https://github.com/grpc/grpc/issues/")
  set (CMAKE_ARCHIVE_OUTPUT_DIRECTORY <%text>${CMAKE_BINARY_DIR}/lib</%text>)
  set (CMAKE_LIBRARY_OUTPUT_DIRECTORY <%text>${CMAKE_BINARY_DIR}/lib</%text>)
  set (CMAKE_RUNTIME_OUTPUT_DIRECTORY <%text>${CMAKE_BINARY_DIR}/bin</%text>)

  project (<%text>${PACKAGE_NAME}</%text> C CXX)

  #add_subdirectory(third_party/protobuf/cmake)

  set (PACKAGE_SOVERSION <%text>${PACKAGE_VERSION_MAJOR}</%text>)
  set (CMAKE_INCLUDE_CURRENT_DIR ON)
  set (CMAKE_VERBOSE_MAKEFILE ON)

  include_directories(include)

  include(CheckCXXCompilerFlag)
  CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
  CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
  if(COMPILER_SUPPORTS_CXX11)
      set(CMAKE_CXX_FLAGS "<%text>${CMAKE_CXX_FLAGS}</%text> -std=c++11")
  elseif(COMPILER_SUPPORTS_CXX0X)
      set(CMAKE_CXX_FLAGS "<%text>${CMAKE_CXX_FLAGS}</%text> -std=c++0x")
  else()
          message(STATUS "The compiler <%text>${CMAKE_CXX_COMPILER}</%text> has no C++11 support. Please use a different C++ compiler.")
  endif()

  find_package(ZLIB REQUIRED)
  if (ZLIB_FOUND)
    include_directories(<%text>${ZLIB_INCLUDE_DIRS}</%text>)
  endif(ZLIB_FOUND)

  find_package(OpenSSL REQUIRED)
  if (OPENSSL_FOUND)
    include_directories(<%text>${OPENSSL_INCLUDE_DIRS}</%text>)
  endif(OPENSSL_FOUND)

  include(CheckSymbolExists)
  check_symbol_exists(SSL_get0_alpn_selected openssl/ssl.h HAVE_ALPN)
  if(HAVE_ALPN)
    add_definitions(-DTSI_OPENSSL_ALPN_SUPPORT=1)
  else()
    add_definitions(-DTSI_OPENSSL_ALPN_SUPPORT=0)
  endif()

  % for lib in libs:
  %  if lib.language == 'c':
  %   if lib.get('platforms', None) is not None:
  if (${' OR '.join(PLATFORM_CHECK[chk] for chk in lib.platforms)})
  %   endif
  add_library(${lib.name}
  %   for src in lib.src:
    ${src}
  %   endfor
  )
  %   if lib.get('platforms', None) is not None:
  endif()
  %   endif
  %  endif
  % endfor

  % for tgt in targets:
  %  if tgt.language == 'c':
  if (${' OR '.join(PLATFORM_CHECK[chk] for chk in tgt.platforms)})
  add_executable(${tgt.name}
  %   for src in (tgt.src if tgt.src else ['vsprojects/dummy.c']):
    ${src}
  %   endfor
  )
  target_link_libraries(${tgt.name}
  %   for dep in tgt.deps:
    ${dep}
  %   endfor
    <%text>${ZLIB_LIBRARIES}</%text>
  %   if tgt.get('secure', 'check'):
    <%text>${OPENSSL_LIBRARIES}</%text>
  %   endif
  )
  endif()
  %  endif
  % endfor
