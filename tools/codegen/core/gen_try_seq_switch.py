#!/usr/bin/env python2.7

# Copyright 2021 gRPC authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import sys

def fs(n):
    return ", ".join("F%d" % i for i in range(0, n+1))

def fs_decls(n):
    return ", ".join("F%d f%d" % (i,i) for i in range(0, n+1))

def fs_refdecls(n):
    return ", ".join("F%d&& f%d" % (i,i) for i in range(0, n+1))

def moves(n):
    return ", ".join("std::move(f%d)" % i for i in range(0, n+1))

def forwards(n):
    return ", ".join("std::forward<F%d>(f%d)" % (i,i) for i in range(0, n+1))

def typenames(n):
    return ", ".join("typename F%d" % i for i in range(0, n+1))


# utility: print a big comment block into a set of files
def put_banner(files, banner):
    for f in files:
        print >> f, '/*'
        for line in banner:
            print >> f, ' * %s' % line
        print >> f, ' */'
        print >> f


with open('src/core/lib/promise/try_seq_switch.h', 'w') as H:
    # copy-paste copyright notice from this file
    with open(sys.argv[0]) as my_source:
        copyright = []
        for line in my_source:
            if line[0] != '#':
                break
        for line in my_source:
            if line[0] == '#':
                copyright.append(line)
                break
        for line in my_source:
            if line[0] != '#':
                break
            copyright.append(line)
        put_banner([H], [line[2:].rstrip() for line in copyright])

    put_banner(
        [H],
        ["Automatically generated by %s" % sys.argv[0]])

    for n in range(1, 32):
        print >>H, "template <%s> class TrySeq<%s> {" % (typenames(n), fs(n))
        print >>H, " private:"
        print >>H, "  char state_ = 0;"
        print >>H, "  using State0 = InitialState<F0, F1>;"
        for i in range(1, n):
            print >>H, "  using State%d = IntermediateState<State%d, F%d, %s>;" % (i, i-1, i+1, fs(i))
        print >>H, "  using FLast = typename State%d::Next::Promise;" % (n-1)
        print >>H, "  union {"
        print >>H, "    [[no_unique_address]] State%d prior_;" % (n-1)
        print >>H, "    [[no_unique_address]] FLast f_;"
        print >>H, "  };"
        print >>H, " public:"
        print >>H, "  TrySeq(%s) : prior_(%s) {}" % (fs_decls(n), moves(n))
        print >>H, "  TrySeq& operator=(const TrySeq&) = delete;"
        print >>H, "  TrySeq(const TrySeq& other) {"
        print >>H, "    assert(other.state_ == 0);"
        print >>H, "    new (&prior_) State%d(other.prior_);" % (n-1)
        print >>H, "  }"
        print >>H, "  TrySeq(TrySeq&& other) {"
        print >>H, "    assert(other.state_ == 0);"
        print >>H, "    new (&prior_) State%d(std::move(other.prior_));" % (n-1)
        print >>H, "  }"
        print >>H, "  ~TrySeq() {"
        print >>H, "    switch (state_) {"
        for i in range(0, n):
            print >>H, "     case %d:" % i
            prior = "prior_" + ".prior" * (n - i - 1)
            print >>H, "      Destruct(&%s.f);" % (prior)
            print >>H, "      goto fin%d;" % i
        print >>H, "     case %d:" % n
        print >>H, "      Destruct(&f_);"
        print >>H, "      return;"
        print >>H, "    }"
        for i in range(0, n):
            print >>H, "  fin%d:" % i
            prior = "prior_" + ".prior" * (n - i - 1)
            print >>H, "    Destruct(&%s.next);" % prior
        print >>H, "  }"
        print >>H, "  using Result = typename decltype(std::declval<typename State%d::Next::Promise>()())::Type;" % (n-1)
        print >>H, "  Poll<Result> operator()() {"
        print >>H, "    switch (state_) {"
        for i in range(0, n):
            print >>H, "     case %d: {" % i
            prior = "prior_" + ".prior" * (n - i - 1)
            next_f = "prior_" + ".prior" * (n - i - 2) + ".f" if i != n - 1 else "f_"
            print >>H, "      auto r = %s.f();" % prior
            print >>H, "      auto* p = r.get_ready();"
            print >>H, "      if (p == nullptr) break;"
            print >>H, "      if (!p->ok()) return ready(Result(IntoStatus(p)));"
            print >>H, "      AdvanceState(&%s, &%s, p);" % (prior, next_f)
            print >>H, "      state_ = %d;" % (i+1)
            print >>H, "     }"
        print >>H, "     case %d:" % n
        print >>H, "      return f_();"
        print >>H, "    }"
        print >>H, "    return kPending;"
        print >>H, "  }"
        print >>H, "};"
